// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod wasi {
    #[allow(dead_code)]
    pub mod rdbms {
        #[allow(dead_code, clippy::all)]
        pub mod postgres {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type NodeIndex = u32;
            #[derive(Clone)]
            pub enum Error {
                ConnectionFailure(_rt::String),
                QueryParameterFailure(_rt::String),
                QueryExecutionFailure(_rt::String),
                QueryResponseFailure(_rt::String),
                Other(_rt::String),
            }
            impl ::core::fmt::Debug for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Error::ConnectionFailure(e) => {
                            f.debug_tuple("Error::ConnectionFailure").field(e).finish()
                        }
                        Error::QueryParameterFailure(e) => f
                            .debug_tuple("Error::QueryParameterFailure")
                            .field(e)
                            .finish(),
                        Error::QueryExecutionFailure(e) => f
                            .debug_tuple("Error::QueryExecutionFailure")
                            .field(e)
                            .finish(),
                        Error::QueryResponseFailure(e) => f
                            .debug_tuple("Error::QueryResponseFailure")
                            .field(e)
                            .finish(),
                        Error::Other(e) => f.debug_tuple("Error::Other").field(e).finish(),
                    }
                }
            }
            impl ::core::fmt::Display for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }

            impl std::error::Error for Error {}
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Uuid {
                pub high_bits: u64,
                pub low_bits: u64,
            }
            impl ::core::fmt::Debug for Uuid {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Uuid")
                        .field("high-bits", &self.high_bits)
                        .field("low-bits", &self.low_bits)
                        .finish()
                }
            }
            #[derive(Clone, Copy)]
            pub enum IpAddress {
                Ipv4((u8, u8, u8, u8)),
                Ipv6((u16, u16, u16, u16, u16, u16, u16, u16)),
            }
            impl ::core::fmt::Debug for IpAddress {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        IpAddress::Ipv4(e) => f.debug_tuple("IpAddress::Ipv4").field(e).finish(),
                        IpAddress::Ipv6(e) => f.debug_tuple("IpAddress::Ipv6").field(e).finish(),
                    }
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct MacAddress {
                pub octets: (u8, u8, u8, u8, u8, u8),
            }
            impl ::core::fmt::Debug for MacAddress {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("MacAddress")
                        .field("octets", &self.octets)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Date {
                pub year: i32,
                pub month: u8,
                pub day: u8,
            }
            impl ::core::fmt::Debug for Date {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Date")
                        .field("year", &self.year)
                        .field("month", &self.month)
                        .field("day", &self.day)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Time {
                pub hour: u8,
                pub minute: u8,
                pub second: u8,
                pub nanosecond: u32,
            }
            impl ::core::fmt::Debug for Time {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Time")
                        .field("hour", &self.hour)
                        .field("minute", &self.minute)
                        .field("second", &self.second)
                        .field("nanosecond", &self.nanosecond)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Timestamp {
                pub date: Date,
                pub time: Time,
            }
            impl ::core::fmt::Debug for Timestamp {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Timestamp")
                        .field("date", &self.date)
                        .field("time", &self.time)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Timestamptz {
                pub timestamp: Timestamp,
                pub offset: i32,
            }
            impl ::core::fmt::Debug for Timestamptz {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Timestamptz")
                        .field("timestamp", &self.timestamp)
                        .field("offset", &self.offset)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Timetz {
                pub time: Time,
                pub offset: i32,
            }
            impl ::core::fmt::Debug for Timetz {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Timetz")
                        .field("time", &self.time)
                        .field("offset", &self.offset)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Interval {
                pub months: i32,
                pub days: i32,
                pub microseconds: i64,
            }
            impl ::core::fmt::Debug for Interval {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Interval")
                        .field("months", &self.months)
                        .field("days", &self.days)
                        .field("microseconds", &self.microseconds)
                        .finish()
                }
            }
            #[derive(Clone, Copy)]
            pub enum Int4bound {
                Included(i32),
                Excluded(i32),
                Unbounded,
            }
            impl ::core::fmt::Debug for Int4bound {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Int4bound::Included(e) => {
                            f.debug_tuple("Int4bound::Included").field(e).finish()
                        }
                        Int4bound::Excluded(e) => {
                            f.debug_tuple("Int4bound::Excluded").field(e).finish()
                        }
                        Int4bound::Unbounded => f.debug_tuple("Int4bound::Unbounded").finish(),
                    }
                }
            }
            #[derive(Clone, Copy)]
            pub enum Int8bound {
                Included(i64),
                Excluded(i64),
                Unbounded,
            }
            impl ::core::fmt::Debug for Int8bound {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Int8bound::Included(e) => {
                            f.debug_tuple("Int8bound::Included").field(e).finish()
                        }
                        Int8bound::Excluded(e) => {
                            f.debug_tuple("Int8bound::Excluded").field(e).finish()
                        }
                        Int8bound::Unbounded => f.debug_tuple("Int8bound::Unbounded").finish(),
                    }
                }
            }
            #[derive(Clone)]
            pub enum Numbound {
                Included(_rt::String),
                Excluded(_rt::String),
                Unbounded,
            }
            impl ::core::fmt::Debug for Numbound {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Numbound::Included(e) => {
                            f.debug_tuple("Numbound::Included").field(e).finish()
                        }
                        Numbound::Excluded(e) => {
                            f.debug_tuple("Numbound::Excluded").field(e).finish()
                        }
                        Numbound::Unbounded => f.debug_tuple("Numbound::Unbounded").finish(),
                    }
                }
            }
            #[derive(Clone, Copy)]
            pub enum Tsbound {
                Included(Timestamp),
                Excluded(Timestamp),
                Unbounded,
            }
            impl ::core::fmt::Debug for Tsbound {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Tsbound::Included(e) => {
                            f.debug_tuple("Tsbound::Included").field(e).finish()
                        }
                        Tsbound::Excluded(e) => {
                            f.debug_tuple("Tsbound::Excluded").field(e).finish()
                        }
                        Tsbound::Unbounded => f.debug_tuple("Tsbound::Unbounded").finish(),
                    }
                }
            }
            #[derive(Clone, Copy)]
            pub enum Tstzbound {
                Included(Timestamptz),
                Excluded(Timestamptz),
                Unbounded,
            }
            impl ::core::fmt::Debug for Tstzbound {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Tstzbound::Included(e) => {
                            f.debug_tuple("Tstzbound::Included").field(e).finish()
                        }
                        Tstzbound::Excluded(e) => {
                            f.debug_tuple("Tstzbound::Excluded").field(e).finish()
                        }
                        Tstzbound::Unbounded => f.debug_tuple("Tstzbound::Unbounded").finish(),
                    }
                }
            }
            #[derive(Clone, Copy)]
            pub enum Datebound {
                Included(Date),
                Excluded(Date),
                Unbounded,
            }
            impl ::core::fmt::Debug for Datebound {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Datebound::Included(e) => {
                            f.debug_tuple("Datebound::Included").field(e).finish()
                        }
                        Datebound::Excluded(e) => {
                            f.debug_tuple("Datebound::Excluded").field(e).finish()
                        }
                        Datebound::Unbounded => f.debug_tuple("Datebound::Unbounded").finish(),
                    }
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Int4range {
                pub start: Int4bound,
                pub end: Int4bound,
            }
            impl ::core::fmt::Debug for Int4range {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Int4range")
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Int8range {
                pub start: Int8bound,
                pub end: Int8bound,
            }
            impl ::core::fmt::Debug for Int8range {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Int8range")
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Numrange {
                pub start: Numbound,
                pub end: Numbound,
            }
            impl ::core::fmt::Debug for Numrange {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Numrange")
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Tsrange {
                pub start: Tsbound,
                pub end: Tsbound,
            }
            impl ::core::fmt::Debug for Tsrange {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Tsrange")
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Tstzrange {
                pub start: Tstzbound,
                pub end: Tstzbound,
            }
            impl ::core::fmt::Debug for Tstzrange {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Tstzrange")
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Daterange {
                pub start: Datebound,
                pub end: Datebound,
            }
            impl ::core::fmt::Debug for Daterange {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Daterange")
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct EnumerationType {
                pub name: _rt::String,
            }
            impl ::core::fmt::Debug for EnumerationType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("EnumerationType")
                        .field("name", &self.name)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Enumeration {
                pub name: _rt::String,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for Enumeration {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Enumeration")
                        .field("name", &self.name)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct CompositeType {
                pub name: _rt::String,
                pub attributes: _rt::Vec<(_rt::String, NodeIndex)>,
            }
            impl ::core::fmt::Debug for CompositeType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("CompositeType")
                        .field("name", &self.name)
                        .field("attributes", &self.attributes)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Composite {
                pub name: _rt::String,
                pub values: _rt::Vec<NodeIndex>,
            }
            impl ::core::fmt::Debug for Composite {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Composite")
                        .field("name", &self.name)
                        .field("values", &self.values)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct DomainType {
                pub name: _rt::String,
                pub base_type: NodeIndex,
            }
            impl ::core::fmt::Debug for DomainType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DomainType")
                        .field("name", &self.name)
                        .field("base-type", &self.base_type)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Domain {
                pub name: _rt::String,
                pub value: NodeIndex,
            }
            impl ::core::fmt::Debug for Domain {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Domain")
                        .field("name", &self.name)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct RangeType {
                pub name: _rt::String,
                pub base_type: NodeIndex,
            }
            impl ::core::fmt::Debug for RangeType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("RangeType")
                        .field("name", &self.name)
                        .field("base-type", &self.base_type)
                        .finish()
                }
            }
            #[derive(Clone, Copy)]
            pub enum ValueBound {
                Included(NodeIndex),
                Excluded(NodeIndex),
                Unbounded,
            }
            impl ::core::fmt::Debug for ValueBound {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        ValueBound::Included(e) => {
                            f.debug_tuple("ValueBound::Included").field(e).finish()
                        }
                        ValueBound::Excluded(e) => {
                            f.debug_tuple("ValueBound::Excluded").field(e).finish()
                        }
                        ValueBound::Unbounded => f.debug_tuple("ValueBound::Unbounded").finish(),
                    }
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ValuesRange {
                pub start: ValueBound,
                pub end: ValueBound,
            }
            impl ::core::fmt::Debug for ValuesRange {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ValuesRange")
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Range {
                pub name: _rt::String,
                pub value: ValuesRange,
            }
            impl ::core::fmt::Debug for Range {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Range")
                        .field("name", &self.name)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum DbColumnTypeNode {
                Character,
                Int2,
                Int4,
                Int8,
                Float4,
                Float8,
                Numeric,
                Boolean,
                Text,
                Varchar,
                Bpchar,
                Timestamp,
                Timestamptz,
                Date,
                Time,
                Timetz,
                Interval,
                Bytea,
                Uuid,
                Xml,
                Json,
                Jsonb,
                Jsonpath,
                Inet,
                Cidr,
                Macaddr,
                Bit,
                Varbit,
                Int4range,
                Int8range,
                Numrange,
                Tsrange,
                Tstzrange,
                Daterange,
                Money,
                Oid,
                Enumeration(EnumerationType),
                Composite(CompositeType),
                Domain(DomainType),
                Range(RangeType),
                Array(NodeIndex),
            }
            impl ::core::fmt::Debug for DbColumnTypeNode {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        DbColumnTypeNode::Character => {
                            f.debug_tuple("DbColumnTypeNode::Character").finish()
                        }
                        DbColumnTypeNode::Int2 => f.debug_tuple("DbColumnTypeNode::Int2").finish(),
                        DbColumnTypeNode::Int4 => f.debug_tuple("DbColumnTypeNode::Int4").finish(),
                        DbColumnTypeNode::Int8 => f.debug_tuple("DbColumnTypeNode::Int8").finish(),
                        DbColumnTypeNode::Float4 => {
                            f.debug_tuple("DbColumnTypeNode::Float4").finish()
                        }
                        DbColumnTypeNode::Float8 => {
                            f.debug_tuple("DbColumnTypeNode::Float8").finish()
                        }
                        DbColumnTypeNode::Numeric => {
                            f.debug_tuple("DbColumnTypeNode::Numeric").finish()
                        }
                        DbColumnTypeNode::Boolean => {
                            f.debug_tuple("DbColumnTypeNode::Boolean").finish()
                        }
                        DbColumnTypeNode::Text => f.debug_tuple("DbColumnTypeNode::Text").finish(),
                        DbColumnTypeNode::Varchar => {
                            f.debug_tuple("DbColumnTypeNode::Varchar").finish()
                        }
                        DbColumnTypeNode::Bpchar => {
                            f.debug_tuple("DbColumnTypeNode::Bpchar").finish()
                        }
                        DbColumnTypeNode::Timestamp => {
                            f.debug_tuple("DbColumnTypeNode::Timestamp").finish()
                        }
                        DbColumnTypeNode::Timestamptz => {
                            f.debug_tuple("DbColumnTypeNode::Timestamptz").finish()
                        }
                        DbColumnTypeNode::Date => f.debug_tuple("DbColumnTypeNode::Date").finish(),
                        DbColumnTypeNode::Time => f.debug_tuple("DbColumnTypeNode::Time").finish(),
                        DbColumnTypeNode::Timetz => {
                            f.debug_tuple("DbColumnTypeNode::Timetz").finish()
                        }
                        DbColumnTypeNode::Interval => {
                            f.debug_tuple("DbColumnTypeNode::Interval").finish()
                        }
                        DbColumnTypeNode::Bytea => {
                            f.debug_tuple("DbColumnTypeNode::Bytea").finish()
                        }
                        DbColumnTypeNode::Uuid => f.debug_tuple("DbColumnTypeNode::Uuid").finish(),
                        DbColumnTypeNode::Xml => f.debug_tuple("DbColumnTypeNode::Xml").finish(),
                        DbColumnTypeNode::Json => f.debug_tuple("DbColumnTypeNode::Json").finish(),
                        DbColumnTypeNode::Jsonb => {
                            f.debug_tuple("DbColumnTypeNode::Jsonb").finish()
                        }
                        DbColumnTypeNode::Jsonpath => {
                            f.debug_tuple("DbColumnTypeNode::Jsonpath").finish()
                        }
                        DbColumnTypeNode::Inet => f.debug_tuple("DbColumnTypeNode::Inet").finish(),
                        DbColumnTypeNode::Cidr => f.debug_tuple("DbColumnTypeNode::Cidr").finish(),
                        DbColumnTypeNode::Macaddr => {
                            f.debug_tuple("DbColumnTypeNode::Macaddr").finish()
                        }
                        DbColumnTypeNode::Bit => f.debug_tuple("DbColumnTypeNode::Bit").finish(),
                        DbColumnTypeNode::Varbit => {
                            f.debug_tuple("DbColumnTypeNode::Varbit").finish()
                        }
                        DbColumnTypeNode::Int4range => {
                            f.debug_tuple("DbColumnTypeNode::Int4range").finish()
                        }
                        DbColumnTypeNode::Int8range => {
                            f.debug_tuple("DbColumnTypeNode::Int8range").finish()
                        }
                        DbColumnTypeNode::Numrange => {
                            f.debug_tuple("DbColumnTypeNode::Numrange").finish()
                        }
                        DbColumnTypeNode::Tsrange => {
                            f.debug_tuple("DbColumnTypeNode::Tsrange").finish()
                        }
                        DbColumnTypeNode::Tstzrange => {
                            f.debug_tuple("DbColumnTypeNode::Tstzrange").finish()
                        }
                        DbColumnTypeNode::Daterange => {
                            f.debug_tuple("DbColumnTypeNode::Daterange").finish()
                        }
                        DbColumnTypeNode::Money => {
                            f.debug_tuple("DbColumnTypeNode::Money").finish()
                        }
                        DbColumnTypeNode::Oid => f.debug_tuple("DbColumnTypeNode::Oid").finish(),
                        DbColumnTypeNode::Enumeration(e) => f
                            .debug_tuple("DbColumnTypeNode::Enumeration")
                            .field(e)
                            .finish(),
                        DbColumnTypeNode::Composite(e) => f
                            .debug_tuple("DbColumnTypeNode::Composite")
                            .field(e)
                            .finish(),
                        DbColumnTypeNode::Domain(e) => {
                            f.debug_tuple("DbColumnTypeNode::Domain").field(e).finish()
                        }
                        DbColumnTypeNode::Range(e) => {
                            f.debug_tuple("DbColumnTypeNode::Range").field(e).finish()
                        }
                        DbColumnTypeNode::Array(e) => {
                            f.debug_tuple("DbColumnTypeNode::Array").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct DbColumnType {
                pub nodes: _rt::Vec<DbColumnTypeNode>,
            }
            impl ::core::fmt::Debug for DbColumnType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DbColumnType")
                        .field("nodes", &self.nodes)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum DbValueNode {
                Character(i8),
                Int2(i16),
                Int4(i32),
                Int8(i64),
                Float4(f32),
                Float8(f64),
                Numeric(_rt::String),
                Boolean(bool),
                Text(_rt::String),
                Varchar(_rt::String),
                Bpchar(_rt::String),
                Timestamp(Timestamp),
                Timestamptz(Timestamptz),
                Date(Date),
                Time(Time),
                Timetz(Timetz),
                Interval(Interval),
                Bytea(_rt::Vec<u8>),
                Json(_rt::String),
                Jsonb(_rt::String),
                Jsonpath(_rt::String),
                Xml(_rt::String),
                Uuid(Uuid),
                Inet(IpAddress),
                Cidr(IpAddress),
                Macaddr(MacAddress),
                Bit(_rt::Vec<bool>),
                Varbit(_rt::Vec<bool>),
                Int4range(Int4range),
                Int8range(Int8range),
                Numrange(Numrange),
                Tsrange(Tsrange),
                Tstzrange(Tstzrange),
                Daterange(Daterange),
                Money(i64),
                Oid(u32),
                Enumeration(Enumeration),
                Composite(Composite),
                Domain(Domain),
                Range(Range),
                Array(_rt::Vec<NodeIndex>),
                Null,
            }
            impl ::core::fmt::Debug for DbValueNode {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        DbValueNode::Character(e) => {
                            f.debug_tuple("DbValueNode::Character").field(e).finish()
                        }
                        DbValueNode::Int2(e) => {
                            f.debug_tuple("DbValueNode::Int2").field(e).finish()
                        }
                        DbValueNode::Int4(e) => {
                            f.debug_tuple("DbValueNode::Int4").field(e).finish()
                        }
                        DbValueNode::Int8(e) => {
                            f.debug_tuple("DbValueNode::Int8").field(e).finish()
                        }
                        DbValueNode::Float4(e) => {
                            f.debug_tuple("DbValueNode::Float4").field(e).finish()
                        }
                        DbValueNode::Float8(e) => {
                            f.debug_tuple("DbValueNode::Float8").field(e).finish()
                        }
                        DbValueNode::Numeric(e) => {
                            f.debug_tuple("DbValueNode::Numeric").field(e).finish()
                        }
                        DbValueNode::Boolean(e) => {
                            f.debug_tuple("DbValueNode::Boolean").field(e).finish()
                        }
                        DbValueNode::Text(e) => {
                            f.debug_tuple("DbValueNode::Text").field(e).finish()
                        }
                        DbValueNode::Varchar(e) => {
                            f.debug_tuple("DbValueNode::Varchar").field(e).finish()
                        }
                        DbValueNode::Bpchar(e) => {
                            f.debug_tuple("DbValueNode::Bpchar").field(e).finish()
                        }
                        DbValueNode::Timestamp(e) => {
                            f.debug_tuple("DbValueNode::Timestamp").field(e).finish()
                        }
                        DbValueNode::Timestamptz(e) => {
                            f.debug_tuple("DbValueNode::Timestamptz").field(e).finish()
                        }
                        DbValueNode::Date(e) => {
                            f.debug_tuple("DbValueNode::Date").field(e).finish()
                        }
                        DbValueNode::Time(e) => {
                            f.debug_tuple("DbValueNode::Time").field(e).finish()
                        }
                        DbValueNode::Timetz(e) => {
                            f.debug_tuple("DbValueNode::Timetz").field(e).finish()
                        }
                        DbValueNode::Interval(e) => {
                            f.debug_tuple("DbValueNode::Interval").field(e).finish()
                        }
                        DbValueNode::Bytea(e) => {
                            f.debug_tuple("DbValueNode::Bytea").field(e).finish()
                        }
                        DbValueNode::Json(e) => {
                            f.debug_tuple("DbValueNode::Json").field(e).finish()
                        }
                        DbValueNode::Jsonb(e) => {
                            f.debug_tuple("DbValueNode::Jsonb").field(e).finish()
                        }
                        DbValueNode::Jsonpath(e) => {
                            f.debug_tuple("DbValueNode::Jsonpath").field(e).finish()
                        }
                        DbValueNode::Xml(e) => f.debug_tuple("DbValueNode::Xml").field(e).finish(),
                        DbValueNode::Uuid(e) => {
                            f.debug_tuple("DbValueNode::Uuid").field(e).finish()
                        }
                        DbValueNode::Inet(e) => {
                            f.debug_tuple("DbValueNode::Inet").field(e).finish()
                        }
                        DbValueNode::Cidr(e) => {
                            f.debug_tuple("DbValueNode::Cidr").field(e).finish()
                        }
                        DbValueNode::Macaddr(e) => {
                            f.debug_tuple("DbValueNode::Macaddr").field(e).finish()
                        }
                        DbValueNode::Bit(e) => f.debug_tuple("DbValueNode::Bit").field(e).finish(),
                        DbValueNode::Varbit(e) => {
                            f.debug_tuple("DbValueNode::Varbit").field(e).finish()
                        }
                        DbValueNode::Int4range(e) => {
                            f.debug_tuple("DbValueNode::Int4range").field(e).finish()
                        }
                        DbValueNode::Int8range(e) => {
                            f.debug_tuple("DbValueNode::Int8range").field(e).finish()
                        }
                        DbValueNode::Numrange(e) => {
                            f.debug_tuple("DbValueNode::Numrange").field(e).finish()
                        }
                        DbValueNode::Tsrange(e) => {
                            f.debug_tuple("DbValueNode::Tsrange").field(e).finish()
                        }
                        DbValueNode::Tstzrange(e) => {
                            f.debug_tuple("DbValueNode::Tstzrange").field(e).finish()
                        }
                        DbValueNode::Daterange(e) => {
                            f.debug_tuple("DbValueNode::Daterange").field(e).finish()
                        }
                        DbValueNode::Money(e) => {
                            f.debug_tuple("DbValueNode::Money").field(e).finish()
                        }
                        DbValueNode::Oid(e) => f.debug_tuple("DbValueNode::Oid").field(e).finish(),
                        DbValueNode::Enumeration(e) => {
                            f.debug_tuple("DbValueNode::Enumeration").field(e).finish()
                        }
                        DbValueNode::Composite(e) => {
                            f.debug_tuple("DbValueNode::Composite").field(e).finish()
                        }
                        DbValueNode::Domain(e) => {
                            f.debug_tuple("DbValueNode::Domain").field(e).finish()
                        }
                        DbValueNode::Range(e) => {
                            f.debug_tuple("DbValueNode::Range").field(e).finish()
                        }
                        DbValueNode::Array(e) => {
                            f.debug_tuple("DbValueNode::Array").field(e).finish()
                        }
                        DbValueNode::Null => f.debug_tuple("DbValueNode::Null").finish(),
                    }
                }
            }
            #[derive(Clone)]
            pub struct DbValue {
                pub nodes: _rt::Vec<DbValueNode>,
            }
            impl ::core::fmt::Debug for DbValue {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DbValue")
                        .field("nodes", &self.nodes)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct DbColumn {
                pub ordinal: u64,
                pub name: _rt::String,
                pub db_type: DbColumnType,
                pub db_type_name: _rt::String,
            }
            impl ::core::fmt::Debug for DbColumn {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DbColumn")
                        .field("ordinal", &self.ordinal)
                        .field("name", &self.name)
                        .field("db-type", &self.db_type)
                        .field("db-type-name", &self.db_type_name)
                        .finish()
                }
            }
            /// A single row of values
            #[derive(Clone)]
            pub struct DbRow {
                pub values: _rt::Vec<DbValue>,
            }
            impl ::core::fmt::Debug for DbRow {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DbRow")
                        .field("values", &self.values)
                        .finish()
                }
            }
            /// A potentially very large and lazy stream of rows:

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct DbResultSet {
                handle: _rt::Resource<DbResultSet>,
            }

            impl DbResultSet {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for DbResultSet {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]db-result-set"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct DbConnection {
                handle: _rt::Resource<DbConnection>,
            }

            impl DbConnection {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for DbConnection {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]db-connection"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl DbResultSet {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_columns(&self) -> _rt::Vec<DbColumn> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-result-set.get-columns"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base37 = l1;
                        let len37 = l2;
                        let mut result37 = _rt::Vec::with_capacity(len37);
                        for i in 0..len37 {
                            let base = base37.add(i * 32);
                            let e37 = {
                                let l3 = *base.add(0).cast::<i64>();
                                let l4 = *base.add(8).cast::<*mut u8>();
                                let l5 = *base.add(12).cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                                let l7 = *base.add(16).cast::<*mut u8>();
                                let l8 = *base.add(20).cast::<usize>();
                                let base33 = l7;
                                let len33 = l8;
                                let mut result33 = _rt::Vec::with_capacity(len33);
                                for i in 0..len33 {
                                    let base = base33.add(i * 20);
                                    let e33 = {
                                        let l9 = i32::from(*base.add(0).cast::<u8>());
                                        let v32 = match l9 {
                                            0 => DbColumnTypeNode::Character,
                                            1 => DbColumnTypeNode::Int2,
                                            2 => DbColumnTypeNode::Int4,
                                            3 => DbColumnTypeNode::Int8,
                                            4 => DbColumnTypeNode::Float4,
                                            5 => DbColumnTypeNode::Float8,
                                            6 => DbColumnTypeNode::Numeric,
                                            7 => DbColumnTypeNode::Boolean,
                                            8 => DbColumnTypeNode::Text,
                                            9 => DbColumnTypeNode::Varchar,
                                            10 => DbColumnTypeNode::Bpchar,
                                            11 => DbColumnTypeNode::Timestamp,
                                            12 => DbColumnTypeNode::Timestamptz,
                                            13 => DbColumnTypeNode::Date,
                                            14 => DbColumnTypeNode::Time,
                                            15 => DbColumnTypeNode::Timetz,
                                            16 => DbColumnTypeNode::Interval,
                                            17 => DbColumnTypeNode::Bytea,
                                            18 => DbColumnTypeNode::Uuid,
                                            19 => DbColumnTypeNode::Xml,
                                            20 => DbColumnTypeNode::Json,
                                            21 => DbColumnTypeNode::Jsonb,
                                            22 => DbColumnTypeNode::Jsonpath,
                                            23 => DbColumnTypeNode::Inet,
                                            24 => DbColumnTypeNode::Cidr,
                                            25 => DbColumnTypeNode::Macaddr,
                                            26 => DbColumnTypeNode::Bit,
                                            27 => DbColumnTypeNode::Varbit,
                                            28 => DbColumnTypeNode::Int4range,
                                            29 => DbColumnTypeNode::Int8range,
                                            30 => DbColumnTypeNode::Numrange,
                                            31 => DbColumnTypeNode::Tsrange,
                                            32 => DbColumnTypeNode::Tstzrange,
                                            33 => DbColumnTypeNode::Daterange,
                                            34 => DbColumnTypeNode::Money,
                                            35 => DbColumnTypeNode::Oid,
                                            36 => {
                                                let e32 = {
                                                    let l10 = *base.add(4).cast::<*mut u8>();
                                                    let l11 = *base.add(8).cast::<usize>();
                                                    let len12 = l11;
                                                    let bytes12 = _rt::Vec::from_raw_parts(
                                                        l10.cast(),
                                                        len12,
                                                        len12,
                                                    );

                                                    EnumerationType {
                                                        name: _rt::string_lift(bytes12),
                                                    }
                                                };
                                                DbColumnTypeNode::Enumeration(e32)
                                            }
                                            37 => {
                                                let e32 = {
                                                    let l13 = *base.add(4).cast::<*mut u8>();
                                                    let l14 = *base.add(8).cast::<usize>();
                                                    let len15 = l14;
                                                    let bytes15 = _rt::Vec::from_raw_parts(
                                                        l13.cast(),
                                                        len15,
                                                        len15,
                                                    );
                                                    let l16 = *base.add(12).cast::<*mut u8>();
                                                    let l17 = *base.add(16).cast::<usize>();
                                                    let base22 = l16;
                                                    let len22 = l17;
                                                    let mut result22 =
                                                        _rt::Vec::with_capacity(len22);
                                                    for i in 0..len22 {
                                                        let base = base22.add(i * 12);
                                                        let e22 = {
                                                            let l18 =
                                                                *base.add(0).cast::<*mut u8>();
                                                            let l19 = *base.add(4).cast::<usize>();
                                                            let len20 = l19;
                                                            let bytes20 = _rt::Vec::from_raw_parts(
                                                                l18.cast(),
                                                                len20,
                                                                len20,
                                                            );
                                                            let l21 = *base.add(8).cast::<i32>();

                                                            (_rt::string_lift(bytes20), l21 as u32)
                                                        };
                                                        result22.push(e22);
                                                    }
                                                    _rt::cabi_dealloc(base22, len22 * 12, 4);

                                                    CompositeType {
                                                        name: _rt::string_lift(bytes15),
                                                        attributes: result22,
                                                    }
                                                };
                                                DbColumnTypeNode::Composite(e32)
                                            }
                                            38 => {
                                                let e32 = {
                                                    let l23 = *base.add(4).cast::<*mut u8>();
                                                    let l24 = *base.add(8).cast::<usize>();
                                                    let len25 = l24;
                                                    let bytes25 = _rt::Vec::from_raw_parts(
                                                        l23.cast(),
                                                        len25,
                                                        len25,
                                                    );
                                                    let l26 = *base.add(12).cast::<i32>();

                                                    DomainType {
                                                        name: _rt::string_lift(bytes25),
                                                        base_type: l26 as u32,
                                                    }
                                                };
                                                DbColumnTypeNode::Domain(e32)
                                            }
                                            39 => {
                                                let e32 = {
                                                    let l27 = *base.add(4).cast::<*mut u8>();
                                                    let l28 = *base.add(8).cast::<usize>();
                                                    let len29 = l28;
                                                    let bytes29 = _rt::Vec::from_raw_parts(
                                                        l27.cast(),
                                                        len29,
                                                        len29,
                                                    );
                                                    let l30 = *base.add(12).cast::<i32>();

                                                    RangeType {
                                                        name: _rt::string_lift(bytes29),
                                                        base_type: l30 as u32,
                                                    }
                                                };
                                                DbColumnTypeNode::Range(e32)
                                            }
                                            n => {
                                                debug_assert_eq!(
                                                    n, 40,
                                                    "invalid enum discriminant"
                                                );
                                                let e32 = {
                                                    let l31 = *base.add(4).cast::<i32>();

                                                    l31 as u32
                                                };
                                                DbColumnTypeNode::Array(e32)
                                            }
                                        };

                                        v32
                                    };
                                    result33.push(e33);
                                }
                                _rt::cabi_dealloc(base33, len33 * 20, 4);
                                let l34 = *base.add(24).cast::<*mut u8>();
                                let l35 = *base.add(28).cast::<usize>();
                                let len36 = l35;
                                let bytes36 = _rt::Vec::from_raw_parts(l34.cast(), len36, len36);

                                DbColumn {
                                    ordinal: l3 as u64,
                                    name: _rt::string_lift(bytes6),
                                    db_type: DbColumnType { nodes: result33 },
                                    db_type_name: _rt::string_lift(bytes36),
                                }
                            };
                            result37.push(e37);
                        }
                        _rt::cabi_dealloc(base37, len37 * 32, 8);
                        result37
                    }
                }
            }
            impl DbResultSet {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_next(&self) -> Option<_rt::Vec<DbRow>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-result-set.get-next"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let base268 = l2;
                                    let len268 = l3;
                                    let mut result268 = _rt::Vec::with_capacity(len268);
                                    for i in 0..len268 {
                                        let base = base268.add(i * 8);
                                        let e268 = {
                                            let l4 = *base.add(0).cast::<*mut u8>();
                                            let l5 = *base.add(4).cast::<usize>();
                                            let base267 = l4;
                                            let len267 = l5;
                                            let mut result267 = _rt::Vec::with_capacity(len267);
                                            for i in 0..len267 {
                                                let base = base267.add(i * 8);
                                                let e267 = {
                                                    let l6 = *base.add(0).cast::<*mut u8>();
                                                    let l7 = *base.add(4).cast::<usize>();
                                                    let base266 = l6;
                                                    let len266 = l7;
                                                    let mut result266 =
                                                        _rt::Vec::with_capacity(len266);
                                                    for i in 0..len266 {
                                                        let base = base266.add(i * 56);
                                                        let e266 = {
                                                            let l8 = i32::from(
                                                                *base.add(0).cast::<u8>(),
                                                            );
                                                            let v265 = match l8 {
                                                                0 => {
                                                                    let e265 = {
                                                                        let l9 = i32::from(
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<i8>(),
                                                                        );

                                                                        l9 as i8
                                                                    };
                                                                    DbValueNode::Character(e265)
                                                                }
                                                                1 => {
                                                                    let e265 = {
                                                                        let l10 = i32::from(
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<i16>(),
                                                                        );

                                                                        l10 as i16
                                                                    };
                                                                    DbValueNode::Int2(e265)
                                                                }
                                                                2 => {
                                                                    let e265 = {
                                                                        let l11 = *base
                                                                            .add(8)
                                                                            .cast::<i32>();

                                                                        l11
                                                                    };
                                                                    DbValueNode::Int4(e265)
                                                                }
                                                                3 => {
                                                                    let e265 = {
                                                                        let l12 = *base
                                                                            .add(8)
                                                                            .cast::<i64>();

                                                                        l12
                                                                    };
                                                                    DbValueNode::Int8(e265)
                                                                }
                                                                4 => {
                                                                    let e265 = {
                                                                        let l13 = *base
                                                                            .add(8)
                                                                            .cast::<f32>();

                                                                        l13
                                                                    };
                                                                    DbValueNode::Float4(e265)
                                                                }
                                                                5 => {
                                                                    let e265 = {
                                                                        let l14 = *base
                                                                            .add(8)
                                                                            .cast::<f64>();

                                                                        l14
                                                                    };
                                                                    DbValueNode::Float8(e265)
                                                                }
                                                                6 => {
                                                                    let e265 = {
                                                                        let l15 = *base
                                                                            .add(8)
                                                                            .cast::<*mut u8>(
                                                                        );
                                                                        let l16 = *base
                                                                            .add(12)
                                                                            .cast::<usize>();
                                                                        let len17 = l16;
                                                                        let bytes17 = _rt::Vec::from_raw_parts(l15.cast(), len17, len17);

                                                                        _rt::string_lift(bytes17)
                                                                    };
                                                                    DbValueNode::Numeric(e265)
                                                                }
                                                                7 => {
                                                                    let e265 = {
                                                                        let l18 = i32::from(
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>(),
                                                                        );

                                                                        _rt::bool_lift(l18 as u8)
                                                                    };
                                                                    DbValueNode::Boolean(e265)
                                                                }
                                                                8 => {
                                                                    let e265 = {
                                                                        let l19 = *base
                                                                            .add(8)
                                                                            .cast::<*mut u8>(
                                                                        );
                                                                        let l20 = *base
                                                                            .add(12)
                                                                            .cast::<usize>();
                                                                        let len21 = l20;
                                                                        let bytes21 = _rt::Vec::from_raw_parts(l19.cast(), len21, len21);

                                                                        _rt::string_lift(bytes21)
                                                                    };
                                                                    DbValueNode::Text(e265)
                                                                }
                                                                9 => {
                                                                    let e265 = {
                                                                        let l22 = *base
                                                                            .add(8)
                                                                            .cast::<*mut u8>(
                                                                        );
                                                                        let l23 = *base
                                                                            .add(12)
                                                                            .cast::<usize>();
                                                                        let len24 = l23;
                                                                        let bytes24 = _rt::Vec::from_raw_parts(l22.cast(), len24, len24);

                                                                        _rt::string_lift(bytes24)
                                                                    };
                                                                    DbValueNode::Varchar(e265)
                                                                }
                                                                10 => {
                                                                    let e265 = {
                                                                        let l25 = *base
                                                                            .add(8)
                                                                            .cast::<*mut u8>(
                                                                        );
                                                                        let l26 = *base
                                                                            .add(12)
                                                                            .cast::<usize>();
                                                                        let len27 = l26;
                                                                        let bytes27 = _rt::Vec::from_raw_parts(l25.cast(), len27, len27);

                                                                        _rt::string_lift(bytes27)
                                                                    };
                                                                    DbValueNode::Bpchar(e265)
                                                                }
                                                                11 => {
                                                                    let e265 = {
                                                                        let l28 = *base
                                                                            .add(8)
                                                                            .cast::<i32>();
                                                                        let l29 = i32::from(
                                                                            *base
                                                                                .add(12)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let l30 = i32::from(
                                                                            *base
                                                                                .add(13)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let l31 = i32::from(
                                                                            *base
                                                                                .add(16)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let l32 = i32::from(
                                                                            *base
                                                                                .add(17)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let l33 = i32::from(
                                                                            *base
                                                                                .add(18)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let l34 = *base
                                                                            .add(20)
                                                                            .cast::<i32>();

                                                                        Timestamp {
                                                                            date: Date {
                                                                                year: l28,
                                                                                month: l29 as u8,
                                                                                day: l30 as u8,
                                                                            },
                                                                            time: Time {
                                                                                hour: l31 as u8,
                                                                                minute: l32 as u8,
                                                                                second: l33 as u8,
                                                                                nanosecond: l34
                                                                                    as u32,
                                                                            },
                                                                        }
                                                                    };
                                                                    DbValueNode::Timestamp(e265)
                                                                }
                                                                12 => {
                                                                    let e265 =
                                                                        {
                                                                            let l35 = *base
                                                                                .add(8)
                                                                                .cast::<i32>(
                                                                            );
                                                                            let l36 = i32::from(
                                                                                *base
                                                                                    .add(12)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l37 = i32::from(
                                                                                *base
                                                                                    .add(13)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l38 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l39 = i32::from(
                                                                                *base
                                                                                    .add(17)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l40 = i32::from(
                                                                                *base
                                                                                    .add(18)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l41 = *base
                                                                                .add(20)
                                                                                .cast::<i32>();
                                                                            let l42 = *base
                                                                                .add(24)
                                                                                .cast::<i32>();

                                                                            Timestamptz{
                                      timestamp: Timestamp{
                                        date: Date{
                                          year: l35,
                                          month: l36 as u8,
                                          day: l37 as u8,
                                        },
                                        time: Time{
                                          hour: l38 as u8,
                                          minute: l39 as u8,
                                          second: l40 as u8,
                                          nanosecond: l41 as u32,
                                        },
                                      },
                                      offset: l42,
                                    }
                                                                        };
                                                                    DbValueNode::Timestamptz(e265)
                                                                }
                                                                13 => {
                                                                    let e265 = {
                                                                        let l43 = *base
                                                                            .add(8)
                                                                            .cast::<i32>();
                                                                        let l44 = i32::from(
                                                                            *base
                                                                                .add(12)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let l45 = i32::from(
                                                                            *base
                                                                                .add(13)
                                                                                .cast::<u8>(),
                                                                        );

                                                                        Date {
                                                                            year: l43,
                                                                            month: l44 as u8,
                                                                            day: l45 as u8,
                                                                        }
                                                                    };
                                                                    DbValueNode::Date(e265)
                                                                }
                                                                14 => {
                                                                    let e265 = {
                                                                        let l46 = i32::from(
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let l47 = i32::from(
                                                                            *base
                                                                                .add(9)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let l48 = i32::from(
                                                                            *base
                                                                                .add(10)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let l49 = *base
                                                                            .add(12)
                                                                            .cast::<i32>();

                                                                        Time {
                                                                            hour: l46 as u8,
                                                                            minute: l47 as u8,
                                                                            second: l48 as u8,
                                                                            nanosecond: l49 as u32,
                                                                        }
                                                                    };
                                                                    DbValueNode::Time(e265)
                                                                }
                                                                15 => {
                                                                    let e265 = {
                                                                        let l50 = i32::from(
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let l51 = i32::from(
                                                                            *base
                                                                                .add(9)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let l52 = i32::from(
                                                                            *base
                                                                                .add(10)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let l53 = *base
                                                                            .add(12)
                                                                            .cast::<i32>();
                                                                        let l54 = *base
                                                                            .add(16)
                                                                            .cast::<i32>();

                                                                        Timetz {
                                                                            time: Time {
                                                                                hour: l50 as u8,
                                                                                minute: l51 as u8,
                                                                                second: l52 as u8,
                                                                                nanosecond: l53
                                                                                    as u32,
                                                                            },
                                                                            offset: l54,
                                                                        }
                                                                    };
                                                                    DbValueNode::Timetz(e265)
                                                                }
                                                                16 => {
                                                                    let e265 = {
                                                                        let l55 = *base
                                                                            .add(8)
                                                                            .cast::<i32>();
                                                                        let l56 = *base
                                                                            .add(12)
                                                                            .cast::<i32>();
                                                                        let l57 = *base
                                                                            .add(16)
                                                                            .cast::<i64>();

                                                                        Interval {
                                                                            months: l55,
                                                                            days: l56,
                                                                            microseconds: l57,
                                                                        }
                                                                    };
                                                                    DbValueNode::Interval(e265)
                                                                }
                                                                17 => {
                                                                    let e265 = {
                                                                        let l58 = *base
                                                                            .add(8)
                                                                            .cast::<*mut u8>(
                                                                        );
                                                                        let l59 = *base
                                                                            .add(12)
                                                                            .cast::<usize>();
                                                                        let len60 = l59;

                                                                        _rt::Vec::from_raw_parts(
                                                                            l58.cast(),
                                                                            len60,
                                                                            len60,
                                                                        )
                                                                    };
                                                                    DbValueNode::Bytea(e265)
                                                                }
                                                                18 => {
                                                                    let e265 = {
                                                                        let l61 = *base
                                                                            .add(8)
                                                                            .cast::<*mut u8>(
                                                                        );
                                                                        let l62 = *base
                                                                            .add(12)
                                                                            .cast::<usize>();
                                                                        let len63 = l62;
                                                                        let bytes63 = _rt::Vec::from_raw_parts(l61.cast(), len63, len63);

                                                                        _rt::string_lift(bytes63)
                                                                    };
                                                                    DbValueNode::Json(e265)
                                                                }
                                                                19 => {
                                                                    let e265 = {
                                                                        let l64 = *base
                                                                            .add(8)
                                                                            .cast::<*mut u8>(
                                                                        );
                                                                        let l65 = *base
                                                                            .add(12)
                                                                            .cast::<usize>();
                                                                        let len66 = l65;
                                                                        let bytes66 = _rt::Vec::from_raw_parts(l64.cast(), len66, len66);

                                                                        _rt::string_lift(bytes66)
                                                                    };
                                                                    DbValueNode::Jsonb(e265)
                                                                }
                                                                20 => {
                                                                    let e265 = {
                                                                        let l67 = *base
                                                                            .add(8)
                                                                            .cast::<*mut u8>(
                                                                        );
                                                                        let l68 = *base
                                                                            .add(12)
                                                                            .cast::<usize>();
                                                                        let len69 = l68;
                                                                        let bytes69 = _rt::Vec::from_raw_parts(l67.cast(), len69, len69);

                                                                        _rt::string_lift(bytes69)
                                                                    };
                                                                    DbValueNode::Jsonpath(e265)
                                                                }
                                                                21 => {
                                                                    let e265 = {
                                                                        let l70 = *base
                                                                            .add(8)
                                                                            .cast::<*mut u8>(
                                                                        );
                                                                        let l71 = *base
                                                                            .add(12)
                                                                            .cast::<usize>();
                                                                        let len72 = l71;
                                                                        let bytes72 = _rt::Vec::from_raw_parts(l70.cast(), len72, len72);

                                                                        _rt::string_lift(bytes72)
                                                                    };
                                                                    DbValueNode::Xml(e265)
                                                                }
                                                                22 => {
                                                                    let e265 = {
                                                                        let l73 = *base
                                                                            .add(8)
                                                                            .cast::<i64>();
                                                                        let l74 = *base
                                                                            .add(16)
                                                                            .cast::<i64>();

                                                                        Uuid {
                                                                            high_bits: l73 as u64,
                                                                            low_bits: l74 as u64,
                                                                        }
                                                                    };
                                                                    DbValueNode::Uuid(e265)
                                                                }
                                                                23 => {
                                                                    let e265 = {
                                                                        let l75 = i32::from(
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let v88 = match l75 {
                                                                            0 => {
                                                                                let e88 = {
                                                                                    let l76 = i32::from(*base.add(10).cast::<u8>());
                                                                                    let l77 = i32::from(*base.add(11).cast::<u8>());
                                                                                    let l78 = i32::from(*base.add(12).cast::<u8>());
                                                                                    let l79 = i32::from(*base.add(13).cast::<u8>());

                                                                                    (
                                                                                        l76 as u8,
                                                                                        l77 as u8,
                                                                                        l78 as u8,
                                                                                        l79 as u8,
                                                                                    )
                                                                                };
                                                                                IpAddress::Ipv4(e88)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                                let e88 = {
                                                                                    let l80 = i32::from(*base.add(10).cast::<u16>());
                                                                                    let l81 = i32::from(*base.add(12).cast::<u16>());
                                                                                    let l82 = i32::from(*base.add(14).cast::<u16>());
                                                                                    let l83 = i32::from(*base.add(16).cast::<u16>());
                                                                                    let l84 = i32::from(*base.add(18).cast::<u16>());
                                                                                    let l85 = i32::from(*base.add(20).cast::<u16>());
                                                                                    let l86 = i32::from(*base.add(22).cast::<u16>());
                                                                                    let l87 = i32::from(*base.add(24).cast::<u16>());

                                                                                    (
                                                                                        l80 as u16,
                                                                                        l81 as u16,
                                                                                        l82 as u16,
                                                                                        l83 as u16,
                                                                                        l84 as u16,
                                                                                        l85 as u16,
                                                                                        l86 as u16,
                                                                                        l87 as u16,
                                                                                    )
                                                                                };
                                                                                IpAddress::Ipv6(e88)
                                                                            }
                                                                        };

                                                                        v88
                                                                    };
                                                                    DbValueNode::Inet(e265)
                                                                }
                                                                24 => {
                                                                    let e265 = {
                                                                        let l89 = i32::from(
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let v102 = match l89 {
                                                                            0 => {
                                                                                let e102 = {
                                                                                    let l90 = i32::from(*base.add(10).cast::<u8>());
                                                                                    let l91 = i32::from(*base.add(11).cast::<u8>());
                                                                                    let l92 = i32::from(*base.add(12).cast::<u8>());
                                                                                    let l93 = i32::from(*base.add(13).cast::<u8>());

                                                                                    (
                                                                                        l90 as u8,
                                                                                        l91 as u8,
                                                                                        l92 as u8,
                                                                                        l93 as u8,
                                                                                    )
                                                                                };
                                                                                IpAddress::Ipv4(
                                                                                    e102,
                                                                                )
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                                let e102 = {
                                                                                    let l94 = i32::from(*base.add(10).cast::<u16>());
                                                                                    let l95 = i32::from(*base.add(12).cast::<u16>());
                                                                                    let l96 = i32::from(*base.add(14).cast::<u16>());
                                                                                    let l97 = i32::from(*base.add(16).cast::<u16>());
                                                                                    let l98 = i32::from(*base.add(18).cast::<u16>());
                                                                                    let l99 = i32::from(*base.add(20).cast::<u16>());
                                                                                    let l100 = i32::from(*base.add(22).cast::<u16>());
                                                                                    let l101 = i32::from(*base.add(24).cast::<u16>());

                                                                                    (
                                                                                        l94 as u16,
                                                                                        l95 as u16,
                                                                                        l96 as u16,
                                                                                        l97 as u16,
                                                                                        l98 as u16,
                                                                                        l99 as u16,
                                                                                        l100 as u16,
                                                                                        l101 as u16,
                                                                                    )
                                                                                };
                                                                                IpAddress::Ipv6(
                                                                                    e102,
                                                                                )
                                                                            }
                                                                        };

                                                                        v102
                                                                    };
                                                                    DbValueNode::Cidr(e265)
                                                                }
                                                                25 => {
                                                                    let e265 = {
                                                                        let l103 = i32::from(
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let l104 = i32::from(
                                                                            *base
                                                                                .add(9)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let l105 = i32::from(
                                                                            *base
                                                                                .add(10)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let l106 = i32::from(
                                                                            *base
                                                                                .add(11)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let l107 = i32::from(
                                                                            *base
                                                                                .add(12)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let l108 = i32::from(
                                                                            *base
                                                                                .add(13)
                                                                                .cast::<u8>(),
                                                                        );

                                                                        MacAddress {
                                                                            octets: (
                                                                                l103 as u8,
                                                                                l104 as u8,
                                                                                l105 as u8,
                                                                                l106 as u8,
                                                                                l107 as u8,
                                                                                l108 as u8,
                                                                            ),
                                                                        }
                                                                    };
                                                                    DbValueNode::Macaddr(e265)
                                                                }
                                                                26 => {
                                                                    let e265 = {
                                                                        let l109 = *base
                                                                            .add(8)
                                                                            .cast::<*mut u8>(
                                                                        );
                                                                        let l110 = *base
                                                                            .add(12)
                                                                            .cast::<usize>(
                                                                        );
                                                                        let base112 = l109;
                                                                        let len112 = l110;
                                                                        let mut result112 =
                                                                            _rt::Vec::with_capacity(
                                                                                len112,
                                                                            );
                                                                        for i in 0..len112 {
                                                                            let base =
                                                                                base112.add(i * 1);
                                                                            let e112 = {
                                                                                let l111 = i32::from(*base.add(0).cast::<u8>());

                                                                                _rt::bool_lift(
                                                                                    l111 as u8,
                                                                                )
                                                                            };
                                                                            result112.push(e112);
                                                                        }
                                                                        _rt::cabi_dealloc(
                                                                            base112,
                                                                            len112 * 1,
                                                                            1,
                                                                        );

                                                                        result112
                                                                    };
                                                                    DbValueNode::Bit(e265)
                                                                }
                                                                27 => {
                                                                    let e265 = {
                                                                        let l113 = *base
                                                                            .add(8)
                                                                            .cast::<*mut u8>(
                                                                        );
                                                                        let l114 = *base
                                                                            .add(12)
                                                                            .cast::<usize>(
                                                                        );
                                                                        let base116 = l113;
                                                                        let len116 = l114;
                                                                        let mut result116 =
                                                                            _rt::Vec::with_capacity(
                                                                                len116,
                                                                            );
                                                                        for i in 0..len116 {
                                                                            let base =
                                                                                base116.add(i * 1);
                                                                            let e116 = {
                                                                                let l115 = i32::from(*base.add(0).cast::<u8>());

                                                                                _rt::bool_lift(
                                                                                    l115 as u8,
                                                                                )
                                                                            };
                                                                            result116.push(e116);
                                                                        }
                                                                        _rt::cabi_dealloc(
                                                                            base116,
                                                                            len116 * 1,
                                                                            1,
                                                                        );

                                                                        result116
                                                                    };
                                                                    DbValueNode::Varbit(e265)
                                                                }
                                                                28 => {
                                                                    let e265 = {
                                                                        let l117 = i32::from(
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let v120 = match l117 {
                                                                            0 => {
                                                                                let e120 = {
                                                                                    let l118 = *base.add(12).cast::<i32>();

                                                                                    l118
                                                                                };
                                                                                Int4bound::Included(
                                                                                    e120,
                                                                                )
                                                                            }
                                                                            1 => {
                                                                                let e120 = {
                                                                                    let l119 = *base.add(12).cast::<i32>();

                                                                                    l119
                                                                                };
                                                                                Int4bound::Excluded(
                                                                                    e120,
                                                                                )
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                Int4bound::Unbounded
                                                                            }
                                                                        };
                                                                        let l121 = i32::from(
                                                                            *base
                                                                                .add(16)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let v124 = match l121 {
                                                                            0 => {
                                                                                let e124 = {
                                                                                    let l122 = *base.add(20).cast::<i32>();

                                                                                    l122
                                                                                };
                                                                                Int4bound::Included(
                                                                                    e124,
                                                                                )
                                                                            }
                                                                            1 => {
                                                                                let e124 = {
                                                                                    let l123 = *base.add(20).cast::<i32>();

                                                                                    l123
                                                                                };
                                                                                Int4bound::Excluded(
                                                                                    e124,
                                                                                )
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                Int4bound::Unbounded
                                                                            }
                                                                        };

                                                                        Int4range {
                                                                            start: v120,
                                                                            end: v124,
                                                                        }
                                                                    };
                                                                    DbValueNode::Int4range(e265)
                                                                }
                                                                29 => {
                                                                    let e265 = {
                                                                        let l125 = i32::from(
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let v128 = match l125 {
                                                                            0 => {
                                                                                let e128 = {
                                                                                    let l126 = *base.add(16).cast::<i64>();

                                                                                    l126
                                                                                };
                                                                                Int8bound::Included(
                                                                                    e128,
                                                                                )
                                                                            }
                                                                            1 => {
                                                                                let e128 = {
                                                                                    let l127 = *base.add(16).cast::<i64>();

                                                                                    l127
                                                                                };
                                                                                Int8bound::Excluded(
                                                                                    e128,
                                                                                )
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                Int8bound::Unbounded
                                                                            }
                                                                        };
                                                                        let l129 = i32::from(
                                                                            *base
                                                                                .add(24)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let v132 = match l129 {
                                                                            0 => {
                                                                                let e132 = {
                                                                                    let l130 = *base.add(32).cast::<i64>();

                                                                                    l130
                                                                                };
                                                                                Int8bound::Included(
                                                                                    e132,
                                                                                )
                                                                            }
                                                                            1 => {
                                                                                let e132 = {
                                                                                    let l131 = *base.add(32).cast::<i64>();

                                                                                    l131
                                                                                };
                                                                                Int8bound::Excluded(
                                                                                    e132,
                                                                                )
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                Int8bound::Unbounded
                                                                            }
                                                                        };

                                                                        Int8range {
                                                                            start: v128,
                                                                            end: v132,
                                                                        }
                                                                    };
                                                                    DbValueNode::Int8range(e265)
                                                                }
                                                                30 => {
                                                                    let e265 = {
                                                                        let l133 = i32::from(
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let v140 = match l133 {
                                                                            0 => {
                                                                                let e140 = {
                                                                                    let l134 = *base.add(12).cast::<*mut u8>();
                                                                                    let l135 = *base.add(16).cast::<usize>();
                                                                                    let len136 =
                                                                                        l135;
                                                                                    let bytes136 = _rt::Vec::from_raw_parts(l134.cast(), len136, len136);

                                                                                    _rt::string_lift(
                                                                                        bytes136,
                                                                                    )
                                                                                };
                                                                                Numbound::Included(
                                                                                    e140,
                                                                                )
                                                                            }
                                                                            1 => {
                                                                                let e140 = {
                                                                                    let l137 = *base.add(12).cast::<*mut u8>();
                                                                                    let l138 = *base.add(16).cast::<usize>();
                                                                                    let len139 =
                                                                                        l138;
                                                                                    let bytes139 = _rt::Vec::from_raw_parts(l137.cast(), len139, len139);

                                                                                    _rt::string_lift(
                                                                                        bytes139,
                                                                                    )
                                                                                };
                                                                                Numbound::Excluded(
                                                                                    e140,
                                                                                )
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                Numbound::Unbounded
                                                                            }
                                                                        };
                                                                        let l141 = i32::from(
                                                                            *base
                                                                                .add(20)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let v148 = match l141 {
                                                                            0 => {
                                                                                let e148 = {
                                                                                    let l142 = *base.add(24).cast::<*mut u8>();
                                                                                    let l143 = *base.add(28).cast::<usize>();
                                                                                    let len144 =
                                                                                        l143;
                                                                                    let bytes144 = _rt::Vec::from_raw_parts(l142.cast(), len144, len144);

                                                                                    _rt::string_lift(
                                                                                        bytes144,
                                                                                    )
                                                                                };
                                                                                Numbound::Included(
                                                                                    e148,
                                                                                )
                                                                            }
                                                                            1 => {
                                                                                let e148 = {
                                                                                    let l145 = *base.add(24).cast::<*mut u8>();
                                                                                    let l146 = *base.add(28).cast::<usize>();
                                                                                    let len147 =
                                                                                        l146;
                                                                                    let bytes147 = _rt::Vec::from_raw_parts(l145.cast(), len147, len147);

                                                                                    _rt::string_lift(
                                                                                        bytes147,
                                                                                    )
                                                                                };
                                                                                Numbound::Excluded(
                                                                                    e148,
                                                                                )
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                Numbound::Unbounded
                                                                            }
                                                                        };

                                                                        Numrange {
                                                                            start: v140,
                                                                            end: v148,
                                                                        }
                                                                    };
                                                                    DbValueNode::Numrange(e265)
                                                                }
                                                                31 => {
                                                                    let e265 = {
                                                                        let l149 = i32::from(
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let v164 = match l149 {
                                                                            0 => {
                                                                                let e164 = {
                                                                                    let l150 = *base.add(12).cast::<i32>();
                                                                                    let l151 = i32::from(*base.add(16).cast::<u8>());
                                                                                    let l152 = i32::from(*base.add(17).cast::<u8>());
                                                                                    let l153 = i32::from(*base.add(20).cast::<u8>());
                                                                                    let l154 = i32::from(*base.add(21).cast::<u8>());
                                                                                    let l155 = i32::from(*base.add(22).cast::<u8>());
                                                                                    let l156 = *base.add(24).cast::<i32>();

                                                                                    Timestamp{
                                            date: Date{
                                              year: l150,
                                              month: l151 as u8,
                                              day: l152 as u8,
                                            },
                                            time: Time{
                                              hour: l153 as u8,
                                              minute: l154 as u8,
                                              second: l155 as u8,
                                              nanosecond: l156 as u32,
                                            },
                                          }
                                                                                };
                                                                                Tsbound::Included(
                                                                                    e164,
                                                                                )
                                                                            }
                                                                            1 => {
                                                                                let e164 = {
                                                                                    let l157 = *base.add(12).cast::<i32>();
                                                                                    let l158 = i32::from(*base.add(16).cast::<u8>());
                                                                                    let l159 = i32::from(*base.add(17).cast::<u8>());
                                                                                    let l160 = i32::from(*base.add(20).cast::<u8>());
                                                                                    let l161 = i32::from(*base.add(21).cast::<u8>());
                                                                                    let l162 = i32::from(*base.add(22).cast::<u8>());
                                                                                    let l163 = *base.add(24).cast::<i32>();

                                                                                    Timestamp{
                                            date: Date{
                                              year: l157,
                                              month: l158 as u8,
                                              day: l159 as u8,
                                            },
                                            time: Time{
                                              hour: l160 as u8,
                                              minute: l161 as u8,
                                              second: l162 as u8,
                                              nanosecond: l163 as u32,
                                            },
                                          }
                                                                                };
                                                                                Tsbound::Excluded(
                                                                                    e164,
                                                                                )
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                Tsbound::Unbounded
                                                                            }
                                                                        };
                                                                        let l165 = i32::from(
                                                                            *base
                                                                                .add(28)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let v180 = match l165 {
                                                                            0 => {
                                                                                let e180 = {
                                                                                    let l166 = *base.add(32).cast::<i32>();
                                                                                    let l167 = i32::from(*base.add(36).cast::<u8>());
                                                                                    let l168 = i32::from(*base.add(37).cast::<u8>());
                                                                                    let l169 = i32::from(*base.add(40).cast::<u8>());
                                                                                    let l170 = i32::from(*base.add(41).cast::<u8>());
                                                                                    let l171 = i32::from(*base.add(42).cast::<u8>());
                                                                                    let l172 = *base.add(44).cast::<i32>();

                                                                                    Timestamp{
                                            date: Date{
                                              year: l166,
                                              month: l167 as u8,
                                              day: l168 as u8,
                                            },
                                            time: Time{
                                              hour: l169 as u8,
                                              minute: l170 as u8,
                                              second: l171 as u8,
                                              nanosecond: l172 as u32,
                                            },
                                          }
                                                                                };
                                                                                Tsbound::Included(
                                                                                    e180,
                                                                                )
                                                                            }
                                                                            1 => {
                                                                                let e180 = {
                                                                                    let l173 = *base.add(32).cast::<i32>();
                                                                                    let l174 = i32::from(*base.add(36).cast::<u8>());
                                                                                    let l175 = i32::from(*base.add(37).cast::<u8>());
                                                                                    let l176 = i32::from(*base.add(40).cast::<u8>());
                                                                                    let l177 = i32::from(*base.add(41).cast::<u8>());
                                                                                    let l178 = i32::from(*base.add(42).cast::<u8>());
                                                                                    let l179 = *base.add(44).cast::<i32>();

                                                                                    Timestamp{
                                            date: Date{
                                              year: l173,
                                              month: l174 as u8,
                                              day: l175 as u8,
                                            },
                                            time: Time{
                                              hour: l176 as u8,
                                              minute: l177 as u8,
                                              second: l178 as u8,
                                              nanosecond: l179 as u32,
                                            },
                                          }
                                                                                };
                                                                                Tsbound::Excluded(
                                                                                    e180,
                                                                                )
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                Tsbound::Unbounded
                                                                            }
                                                                        };

                                                                        Tsrange {
                                                                            start: v164,
                                                                            end: v180,
                                                                        }
                                                                    };
                                                                    DbValueNode::Tsrange(e265)
                                                                }
                                                                32 => {
                                                                    let e265 = {
                                                                        let l181 = i32::from(
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let v198 = match l181 {
                                                                            0 => {
                                                                                let e198 = {
                                                                                    let l182 = *base.add(12).cast::<i32>();
                                                                                    let l183 = i32::from(*base.add(16).cast::<u8>());
                                                                                    let l184 = i32::from(*base.add(17).cast::<u8>());
                                                                                    let l185 = i32::from(*base.add(20).cast::<u8>());
                                                                                    let l186 = i32::from(*base.add(21).cast::<u8>());
                                                                                    let l187 = i32::from(*base.add(22).cast::<u8>());
                                                                                    let l188 = *base.add(24).cast::<i32>();
                                                                                    let l189 = *base.add(28).cast::<i32>();

                                                                                    Timestamptz{
                                            timestamp: Timestamp{
                                              date: Date{
                                                year: l182,
                                                month: l183 as u8,
                                                day: l184 as u8,
                                              },
                                              time: Time{
                                                hour: l185 as u8,
                                                minute: l186 as u8,
                                                second: l187 as u8,
                                                nanosecond: l188 as u32,
                                              },
                                            },
                                            offset: l189,
                                          }
                                                                                };
                                                                                Tstzbound::Included(
                                                                                    e198,
                                                                                )
                                                                            }
                                                                            1 => {
                                                                                let e198 = {
                                                                                    let l190 = *base.add(12).cast::<i32>();
                                                                                    let l191 = i32::from(*base.add(16).cast::<u8>());
                                                                                    let l192 = i32::from(*base.add(17).cast::<u8>());
                                                                                    let l193 = i32::from(*base.add(20).cast::<u8>());
                                                                                    let l194 = i32::from(*base.add(21).cast::<u8>());
                                                                                    let l195 = i32::from(*base.add(22).cast::<u8>());
                                                                                    let l196 = *base.add(24).cast::<i32>();
                                                                                    let l197 = *base.add(28).cast::<i32>();

                                                                                    Timestamptz{
                                            timestamp: Timestamp{
                                              date: Date{
                                                year: l190,
                                                month: l191 as u8,
                                                day: l192 as u8,
                                              },
                                              time: Time{
                                                hour: l193 as u8,
                                                minute: l194 as u8,
                                                second: l195 as u8,
                                                nanosecond: l196 as u32,
                                              },
                                            },
                                            offset: l197,
                                          }
                                                                                };
                                                                                Tstzbound::Excluded(
                                                                                    e198,
                                                                                )
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                Tstzbound::Unbounded
                                                                            }
                                                                        };
                                                                        let l199 = i32::from(
                                                                            *base
                                                                                .add(32)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let v216 = match l199 {
                                                                            0 => {
                                                                                let e216 = {
                                                                                    let l200 = *base.add(36).cast::<i32>();
                                                                                    let l201 = i32::from(*base.add(40).cast::<u8>());
                                                                                    let l202 = i32::from(*base.add(41).cast::<u8>());
                                                                                    let l203 = i32::from(*base.add(44).cast::<u8>());
                                                                                    let l204 = i32::from(*base.add(45).cast::<u8>());
                                                                                    let l205 = i32::from(*base.add(46).cast::<u8>());
                                                                                    let l206 = *base.add(48).cast::<i32>();
                                                                                    let l207 = *base.add(52).cast::<i32>();

                                                                                    Timestamptz{
                                            timestamp: Timestamp{
                                              date: Date{
                                                year: l200,
                                                month: l201 as u8,
                                                day: l202 as u8,
                                              },
                                              time: Time{
                                                hour: l203 as u8,
                                                minute: l204 as u8,
                                                second: l205 as u8,
                                                nanosecond: l206 as u32,
                                              },
                                            },
                                            offset: l207,
                                          }
                                                                                };
                                                                                Tstzbound::Included(
                                                                                    e216,
                                                                                )
                                                                            }
                                                                            1 => {
                                                                                let e216 = {
                                                                                    let l208 = *base.add(36).cast::<i32>();
                                                                                    let l209 = i32::from(*base.add(40).cast::<u8>());
                                                                                    let l210 = i32::from(*base.add(41).cast::<u8>());
                                                                                    let l211 = i32::from(*base.add(44).cast::<u8>());
                                                                                    let l212 = i32::from(*base.add(45).cast::<u8>());
                                                                                    let l213 = i32::from(*base.add(46).cast::<u8>());
                                                                                    let l214 = *base.add(48).cast::<i32>();
                                                                                    let l215 = *base.add(52).cast::<i32>();

                                                                                    Timestamptz{
                                            timestamp: Timestamp{
                                              date: Date{
                                                year: l208,
                                                month: l209 as u8,
                                                day: l210 as u8,
                                              },
                                              time: Time{
                                                hour: l211 as u8,
                                                minute: l212 as u8,
                                                second: l213 as u8,
                                                nanosecond: l214 as u32,
                                              },
                                            },
                                            offset: l215,
                                          }
                                                                                };
                                                                                Tstzbound::Excluded(
                                                                                    e216,
                                                                                )
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                Tstzbound::Unbounded
                                                                            }
                                                                        };

                                                                        Tstzrange {
                                                                            start: v198,
                                                                            end: v216,
                                                                        }
                                                                    };
                                                                    DbValueNode::Tstzrange(e265)
                                                                }
                                                                33 => {
                                                                    let e265 = {
                                                                        let l217 = i32::from(
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let v224 = match l217 {
                                                                            0 => {
                                                                                let e224 = {
                                                                                    let l218 = *base.add(12).cast::<i32>();
                                                                                    let l219 = i32::from(*base.add(16).cast::<u8>());
                                                                                    let l220 = i32::from(*base.add(17).cast::<u8>());

                                                                                    Date {
                                                                                        year: l218,
                                                                                        month: l219
                                                                                            as u8,
                                                                                        day: l220
                                                                                            as u8,
                                                                                    }
                                                                                };
                                                                                Datebound::Included(
                                                                                    e224,
                                                                                )
                                                                            }
                                                                            1 => {
                                                                                let e224 = {
                                                                                    let l221 = *base.add(12).cast::<i32>();
                                                                                    let l222 = i32::from(*base.add(16).cast::<u8>());
                                                                                    let l223 = i32::from(*base.add(17).cast::<u8>());

                                                                                    Date {
                                                                                        year: l221,
                                                                                        month: l222
                                                                                            as u8,
                                                                                        day: l223
                                                                                            as u8,
                                                                                    }
                                                                                };
                                                                                Datebound::Excluded(
                                                                                    e224,
                                                                                )
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                Datebound::Unbounded
                                                                            }
                                                                        };
                                                                        let l225 = i32::from(
                                                                            *base
                                                                                .add(20)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let v232 = match l225 {
                                                                            0 => {
                                                                                let e232 = {
                                                                                    let l226 = *base.add(24).cast::<i32>();
                                                                                    let l227 = i32::from(*base.add(28).cast::<u8>());
                                                                                    let l228 = i32::from(*base.add(29).cast::<u8>());

                                                                                    Date {
                                                                                        year: l226,
                                                                                        month: l227
                                                                                            as u8,
                                                                                        day: l228
                                                                                            as u8,
                                                                                    }
                                                                                };
                                                                                Datebound::Included(
                                                                                    e232,
                                                                                )
                                                                            }
                                                                            1 => {
                                                                                let e232 = {
                                                                                    let l229 = *base.add(24).cast::<i32>();
                                                                                    let l230 = i32::from(*base.add(28).cast::<u8>());
                                                                                    let l231 = i32::from(*base.add(29).cast::<u8>());

                                                                                    Date {
                                                                                        year: l229,
                                                                                        month: l230
                                                                                            as u8,
                                                                                        day: l231
                                                                                            as u8,
                                                                                    }
                                                                                };
                                                                                Datebound::Excluded(
                                                                                    e232,
                                                                                )
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                Datebound::Unbounded
                                                                            }
                                                                        };

                                                                        Daterange {
                                                                            start: v224,
                                                                            end: v232,
                                                                        }
                                                                    };
                                                                    DbValueNode::Daterange(e265)
                                                                }
                                                                34 => {
                                                                    let e265 = {
                                                                        let l233 = *base
                                                                            .add(8)
                                                                            .cast::<i64>();

                                                                        l233
                                                                    };
                                                                    DbValueNode::Money(e265)
                                                                }
                                                                35 => {
                                                                    let e265 = {
                                                                        let l234 = *base
                                                                            .add(8)
                                                                            .cast::<i32>();

                                                                        l234 as u32
                                                                    };
                                                                    DbValueNode::Oid(e265)
                                                                }
                                                                36 => {
                                                                    let e265 = {
                                                                        let l235 = *base
                                                                            .add(8)
                                                                            .cast::<*mut u8>(
                                                                        );
                                                                        let l236 = *base
                                                                            .add(12)
                                                                            .cast::<usize>(
                                                                        );
                                                                        let len237 = l236;
                                                                        let bytes237 = _rt::Vec::from_raw_parts(l235.cast(), len237, len237);
                                                                        let l238 = *base
                                                                            .add(16)
                                                                            .cast::<*mut u8>(
                                                                        );
                                                                        let l239 = *base
                                                                            .add(20)
                                                                            .cast::<usize>(
                                                                        );
                                                                        let len240 = l239;
                                                                        let bytes240 = _rt::Vec::from_raw_parts(l238.cast(), len240, len240);

                                                                        Enumeration {
                                                                            name: _rt::string_lift(
                                                                                bytes237,
                                                                            ),
                                                                            value: _rt::string_lift(
                                                                                bytes240,
                                                                            ),
                                                                        }
                                                                    };
                                                                    DbValueNode::Enumeration(e265)
                                                                }
                                                                37 => {
                                                                    let e265 = {
                                                                        let l241 = *base
                                                                            .add(8)
                                                                            .cast::<*mut u8>(
                                                                        );
                                                                        let l242 = *base
                                                                            .add(12)
                                                                            .cast::<usize>(
                                                                        );
                                                                        let len243 = l242;
                                                                        let bytes243 = _rt::Vec::from_raw_parts(l241.cast(), len243, len243);
                                                                        let l244 = *base
                                                                            .add(16)
                                                                            .cast::<*mut u8>(
                                                                        );
                                                                        let l245 = *base
                                                                            .add(20)
                                                                            .cast::<usize>(
                                                                        );
                                                                        let len246 = l245;

                                                                        Composite{
                                      name: _rt::string_lift(bytes243),
                                      values: _rt::Vec::from_raw_parts(l244.cast(), len246, len246),
                                    }
                                                                    };
                                                                    DbValueNode::Composite(e265)
                                                                }
                                                                38 => {
                                                                    let e265 = {
                                                                        let l247 = *base
                                                                            .add(8)
                                                                            .cast::<*mut u8>(
                                                                        );
                                                                        let l248 = *base
                                                                            .add(12)
                                                                            .cast::<usize>(
                                                                        );
                                                                        let len249 = l248;
                                                                        let bytes249 = _rt::Vec::from_raw_parts(l247.cast(), len249, len249);
                                                                        let l250 = *base
                                                                            .add(16)
                                                                            .cast::<i32>();

                                                                        Domain {
                                                                            name: _rt::string_lift(
                                                                                bytes249,
                                                                            ),
                                                                            value: l250 as u32,
                                                                        }
                                                                    };
                                                                    DbValueNode::Domain(e265)
                                                                }
                                                                39 => {
                                                                    let e265 = {
                                                                        let l251 = *base
                                                                            .add(8)
                                                                            .cast::<*mut u8>(
                                                                        );
                                                                        let l252 = *base
                                                                            .add(12)
                                                                            .cast::<usize>(
                                                                        );
                                                                        let len253 = l252;
                                                                        let bytes253 = _rt::Vec::from_raw_parts(l251.cast(), len253, len253);
                                                                        let l254 = i32::from(
                                                                            *base
                                                                                .add(16)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let v257 = match l254 {
                                                                            0 => {
                                                                                let e257 = {
                                                                                    let l255 = *base.add(20).cast::<i32>();

                                                                                    l255 as u32
                                                                                };
                                                                                ValueBound::Included(
                                                                                    e257,
                                                                                )
                                                                            }
                                                                            1 => {
                                                                                let e257 = {
                                                                                    let l256 = *base.add(20).cast::<i32>();

                                                                                    l256 as u32
                                                                                };
                                                                                ValueBound::Excluded(
                                                                                    e257,
                                                                                )
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                ValueBound::Unbounded
                                                                            }
                                                                        };
                                                                        let l258 = i32::from(
                                                                            *base
                                                                                .add(24)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let v261 = match l258 {
                                                                            0 => {
                                                                                let e261 = {
                                                                                    let l259 = *base.add(28).cast::<i32>();

                                                                                    l259 as u32
                                                                                };
                                                                                ValueBound::Included(
                                                                                    e261,
                                                                                )
                                                                            }
                                                                            1 => {
                                                                                let e261 = {
                                                                                    let l260 = *base.add(28).cast::<i32>();

                                                                                    l260 as u32
                                                                                };
                                                                                ValueBound::Excluded(
                                                                                    e261,
                                                                                )
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                ValueBound::Unbounded
                                                                            }
                                                                        };

                                                                        Range {
                                                                            name: _rt::string_lift(
                                                                                bytes253,
                                                                            ),
                                                                            value: ValuesRange {
                                                                                start: v257,
                                                                                end: v261,
                                                                            },
                                                                        }
                                                                    };
                                                                    DbValueNode::Range(e265)
                                                                }
                                                                40 => {
                                                                    let e265 = {
                                                                        let l262 = *base
                                                                            .add(8)
                                                                            .cast::<*mut u8>(
                                                                        );
                                                                        let l263 = *base
                                                                            .add(12)
                                                                            .cast::<usize>(
                                                                        );
                                                                        let len264 = l263;

                                                                        _rt::Vec::from_raw_parts(
                                                                            l262.cast(),
                                                                            len264,
                                                                            len264,
                                                                        )
                                                                    };
                                                                    DbValueNode::Array(e265)
                                                                }
                                                                n => {
                                                                    debug_assert_eq!(
                                                                        n, 41,
                                                                        "invalid enum discriminant"
                                                                    );
                                                                    DbValueNode::Null
                                                                }
                                                            };

                                                            v265
                                                        };
                                                        result266.push(e266);
                                                    }
                                                    _rt::cabi_dealloc(base266, len266 * 56, 8);

                                                    DbValue { nodes: result266 }
                                                };
                                                result267.push(e267);
                                            }
                                            _rt::cabi_dealloc(base267, len267 * 8, 4);

                                            DbRow { values: result267 }
                                        };
                                        result268.push(e268);
                                    }
                                    _rt::cabi_dealloc(base268, len268 * 8, 4);

                                    result268
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn open(address: &str) -> Result<DbConnection, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = address;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[static]db-connection.open"]
                            fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<i32>();

                                    DbConnection::from_handle(l3 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr1.add(4).cast::<u8>());
                                    let v20 = match l4 {
                                        0 => {
                                            let e20 = {
                                                let l5 = *ptr1.add(8).cast::<*mut u8>();
                                                let l6 = *ptr1.add(12).cast::<usize>();
                                                let len7 = l6;
                                                let bytes7 =
                                                    _rt::Vec::from_raw_parts(l5.cast(), len7, len7);

                                                _rt::string_lift(bytes7)
                                            };
                                            Error::ConnectionFailure(e20)
                                        }
                                        1 => {
                                            let e20 = {
                                                let l8 = *ptr1.add(8).cast::<*mut u8>();
                                                let l9 = *ptr1.add(12).cast::<usize>();
                                                let len10 = l9;
                                                let bytes10 = _rt::Vec::from_raw_parts(
                                                    l8.cast(),
                                                    len10,
                                                    len10,
                                                );

                                                _rt::string_lift(bytes10)
                                            };
                                            Error::QueryParameterFailure(e20)
                                        }
                                        2 => {
                                            let e20 = {
                                                let l11 = *ptr1.add(8).cast::<*mut u8>();
                                                let l12 = *ptr1.add(12).cast::<usize>();
                                                let len13 = l12;
                                                let bytes13 = _rt::Vec::from_raw_parts(
                                                    l11.cast(),
                                                    len13,
                                                    len13,
                                                );

                                                _rt::string_lift(bytes13)
                                            };
                                            Error::QueryExecutionFailure(e20)
                                        }
                                        3 => {
                                            let e20 = {
                                                let l14 = *ptr1.add(8).cast::<*mut u8>();
                                                let l15 = *ptr1.add(12).cast::<usize>();
                                                let len16 = l15;
                                                let bytes16 = _rt::Vec::from_raw_parts(
                                                    l14.cast(),
                                                    len16,
                                                    len16,
                                                );

                                                _rt::string_lift(bytes16)
                                            };
                                            Error::QueryResponseFailure(e20)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e20 = {
                                                let l17 = *ptr1.add(8).cast::<*mut u8>();
                                                let l18 = *ptr1.add(12).cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );

                                                _rt::string_lift(bytes19)
                                            };
                                            Error::Other(e20)
                                        }
                                    };

                                    v20
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn query(
                    &self,
                    statement: &str,
                    params: &[DbValue],
                ) -> Result<DbResultSet, Error> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = statement;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec87 = params;
                        let len87 = vec87.len();
                        let layout87 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec87.len() * 8, 4);
                        let result87 = if layout87.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout87).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout87);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec87.into_iter().enumerate() {
                            let base = result87.add(i * 8);
                            {
                                let DbValue { nodes: nodes1 } = e;
                                let vec86 = nodes1;
                                let len86 = vec86.len();
                                let layout86 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec86.len() * 56,
                                    8,
                                );
                                let result86 = if layout86.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout86).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout86);
                                    }
                                    ptr
                                } else {
                                    {
                                        ::core::ptr::null_mut()
                                    }
                                };
                                for (i, e) in vec86.into_iter().enumerate() {
                                    let base = result86.add(i * 56);
                                    {
                                        match e {
                                            DbValueNode::Character(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            DbValueNode::Int2(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            DbValueNode::Int4(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            DbValueNode::Int8(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            DbValueNode::Float4(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            DbValueNode::Float8(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            DbValueNode::Numeric(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(12).cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            DbValueNode::Boolean(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                            DbValueNode::Text(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                let vec3 = e;
                                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                                let len3 = vec3.len();
                                                *base.add(12).cast::<usize>() = len3;
                                                *base.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                            }
                                            DbValueNode::Varchar(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                let vec4 = e;
                                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                                let len4 = vec4.len();
                                                *base.add(12).cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                                            }
                                            DbValueNode::Bpchar(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            DbValueNode::Timestamp(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                let Timestamp {
                                                    date: date6,
                                                    time: time6,
                                                } = e;
                                                let Date {
                                                    year: year7,
                                                    month: month7,
                                                    day: day7,
                                                } = date6;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(year7);
                                                *base.add(12).cast::<u8>() =
                                                    (_rt::as_i32(month7)) as u8;
                                                *base.add(13).cast::<u8>() =
                                                    (_rt::as_i32(day7)) as u8;
                                                let Time {
                                                    hour: hour8,
                                                    minute: minute8,
                                                    second: second8,
                                                    nanosecond: nanosecond8,
                                                } = time6;
                                                *base.add(16).cast::<u8>() =
                                                    (_rt::as_i32(hour8)) as u8;
                                                *base.add(17).cast::<u8>() =
                                                    (_rt::as_i32(minute8)) as u8;
                                                *base.add(18).cast::<u8>() =
                                                    (_rt::as_i32(second8)) as u8;
                                                *base.add(20).cast::<i32>() =
                                                    _rt::as_i32(nanosecond8);
                                            }
                                            DbValueNode::Timestamptz(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                let Timestamptz {
                                                    timestamp: timestamp9,
                                                    offset: offset9,
                                                } = e;
                                                let Timestamp {
                                                    date: date10,
                                                    time: time10,
                                                } = timestamp9;
                                                let Date {
                                                    year: year11,
                                                    month: month11,
                                                    day: day11,
                                                } = date10;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(year11);
                                                *base.add(12).cast::<u8>() =
                                                    (_rt::as_i32(month11)) as u8;
                                                *base.add(13).cast::<u8>() =
                                                    (_rt::as_i32(day11)) as u8;
                                                let Time {
                                                    hour: hour12,
                                                    minute: minute12,
                                                    second: second12,
                                                    nanosecond: nanosecond12,
                                                } = time10;
                                                *base.add(16).cast::<u8>() =
                                                    (_rt::as_i32(hour12)) as u8;
                                                *base.add(17).cast::<u8>() =
                                                    (_rt::as_i32(minute12)) as u8;
                                                *base.add(18).cast::<u8>() =
                                                    (_rt::as_i32(second12)) as u8;
                                                *base.add(20).cast::<i32>() =
                                                    _rt::as_i32(nanosecond12);
                                                *base.add(24).cast::<i32>() = _rt::as_i32(offset9);
                                            }
                                            DbValueNode::Date(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                let Date {
                                                    year: year13,
                                                    month: month13,
                                                    day: day13,
                                                } = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(year13);
                                                *base.add(12).cast::<u8>() =
                                                    (_rt::as_i32(month13)) as u8;
                                                *base.add(13).cast::<u8>() =
                                                    (_rt::as_i32(day13)) as u8;
                                            }
                                            DbValueNode::Time(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                let Time {
                                                    hour: hour14,
                                                    minute: minute14,
                                                    second: second14,
                                                    nanosecond: nanosecond14,
                                                } = e;
                                                *base.add(8).cast::<u8>() =
                                                    (_rt::as_i32(hour14)) as u8;
                                                *base.add(9).cast::<u8>() =
                                                    (_rt::as_i32(minute14)) as u8;
                                                *base.add(10).cast::<u8>() =
                                                    (_rt::as_i32(second14)) as u8;
                                                *base.add(12).cast::<i32>() =
                                                    _rt::as_i32(nanosecond14);
                                            }
                                            DbValueNode::Timetz(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                let Timetz {
                                                    time: time15,
                                                    offset: offset15,
                                                } = e;
                                                let Time {
                                                    hour: hour16,
                                                    minute: minute16,
                                                    second: second16,
                                                    nanosecond: nanosecond16,
                                                } = time15;
                                                *base.add(8).cast::<u8>() =
                                                    (_rt::as_i32(hour16)) as u8;
                                                *base.add(9).cast::<u8>() =
                                                    (_rt::as_i32(minute16)) as u8;
                                                *base.add(10).cast::<u8>() =
                                                    (_rt::as_i32(second16)) as u8;
                                                *base.add(12).cast::<i32>() =
                                                    _rt::as_i32(nanosecond16);
                                                *base.add(16).cast::<i32>() = _rt::as_i32(offset15);
                                            }
                                            DbValueNode::Interval(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                let Interval {
                                                    months: months17,
                                                    days: days17,
                                                    microseconds: microseconds17,
                                                } = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(months17);
                                                *base.add(12).cast::<i32>() = _rt::as_i32(days17);
                                                *base.add(16).cast::<i64>() =
                                                    _rt::as_i64(microseconds17);
                                            }
                                            DbValueNode::Bytea(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                let vec18 = e;
                                                let ptr18 = vec18.as_ptr().cast::<u8>();
                                                let len18 = vec18.len();
                                                *base.add(12).cast::<usize>() = len18;
                                                *base.add(8).cast::<*mut u8>() = ptr18.cast_mut();
                                            }
                                            DbValueNode::Json(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                let vec19 = e;
                                                let ptr19 = vec19.as_ptr().cast::<u8>();
                                                let len19 = vec19.len();
                                                *base.add(12).cast::<usize>() = len19;
                                                *base.add(8).cast::<*mut u8>() = ptr19.cast_mut();
                                            }
                                            DbValueNode::Jsonb(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                let vec20 = e;
                                                let ptr20 = vec20.as_ptr().cast::<u8>();
                                                let len20 = vec20.len();
                                                *base.add(12).cast::<usize>() = len20;
                                                *base.add(8).cast::<*mut u8>() = ptr20.cast_mut();
                                            }
                                            DbValueNode::Jsonpath(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec21 = e;
                                                let ptr21 = vec21.as_ptr().cast::<u8>();
                                                let len21 = vec21.len();
                                                *base.add(12).cast::<usize>() = len21;
                                                *base.add(8).cast::<*mut u8>() = ptr21.cast_mut();
                                            }
                                            DbValueNode::Xml(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let vec22 = e;
                                                let ptr22 = vec22.as_ptr().cast::<u8>();
                                                let len22 = vec22.len();
                                                *base.add(12).cast::<usize>() = len22;
                                                *base.add(8).cast::<*mut u8>() = ptr22.cast_mut();
                                            }
                                            DbValueNode::Uuid(e) => {
                                                *base.add(0).cast::<u8>() = (22i32) as u8;
                                                let Uuid {
                                                    high_bits: high_bits23,
                                                    low_bits: low_bits23,
                                                } = e;
                                                *base.add(8).cast::<i64>() =
                                                    _rt::as_i64(high_bits23);
                                                *base.add(16).cast::<i64>() =
                                                    _rt::as_i64(low_bits23);
                                            }
                                            DbValueNode::Inet(e) => {
                                                *base.add(0).cast::<u8>() = (23i32) as u8;
                                                match e {
                                                    IpAddress::Ipv4(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        let (t24_0, t24_1, t24_2, t24_3) = e;
                                                        *base.add(10).cast::<u8>() =
                                                            (_rt::as_i32(t24_0)) as u8;
                                                        *base.add(11).cast::<u8>() =
                                                            (_rt::as_i32(t24_1)) as u8;
                                                        *base.add(12).cast::<u8>() =
                                                            (_rt::as_i32(t24_2)) as u8;
                                                        *base.add(13).cast::<u8>() =
                                                            (_rt::as_i32(t24_3)) as u8;
                                                    }
                                                    IpAddress::Ipv6(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        let (
                                                            t25_0,
                                                            t25_1,
                                                            t25_2,
                                                            t25_3,
                                                            t25_4,
                                                            t25_5,
                                                            t25_6,
                                                            t25_7,
                                                        ) = e;
                                                        *base.add(10).cast::<u16>() =
                                                            (_rt::as_i32(t25_0)) as u16;
                                                        *base.add(12).cast::<u16>() =
                                                            (_rt::as_i32(t25_1)) as u16;
                                                        *base.add(14).cast::<u16>() =
                                                            (_rt::as_i32(t25_2)) as u16;
                                                        *base.add(16).cast::<u16>() =
                                                            (_rt::as_i32(t25_3)) as u16;
                                                        *base.add(18).cast::<u16>() =
                                                            (_rt::as_i32(t25_4)) as u16;
                                                        *base.add(20).cast::<u16>() =
                                                            (_rt::as_i32(t25_5)) as u16;
                                                        *base.add(22).cast::<u16>() =
                                                            (_rt::as_i32(t25_6)) as u16;
                                                        *base.add(24).cast::<u16>() =
                                                            (_rt::as_i32(t25_7)) as u16;
                                                    }
                                                }
                                            }
                                            DbValueNode::Cidr(e) => {
                                                *base.add(0).cast::<u8>() = (24i32) as u8;
                                                match e {
                                                    IpAddress::Ipv4(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        let (t26_0, t26_1, t26_2, t26_3) = e;
                                                        *base.add(10).cast::<u8>() =
                                                            (_rt::as_i32(t26_0)) as u8;
                                                        *base.add(11).cast::<u8>() =
                                                            (_rt::as_i32(t26_1)) as u8;
                                                        *base.add(12).cast::<u8>() =
                                                            (_rt::as_i32(t26_2)) as u8;
                                                        *base.add(13).cast::<u8>() =
                                                            (_rt::as_i32(t26_3)) as u8;
                                                    }
                                                    IpAddress::Ipv6(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        let (
                                                            t27_0,
                                                            t27_1,
                                                            t27_2,
                                                            t27_3,
                                                            t27_4,
                                                            t27_5,
                                                            t27_6,
                                                            t27_7,
                                                        ) = e;
                                                        *base.add(10).cast::<u16>() =
                                                            (_rt::as_i32(t27_0)) as u16;
                                                        *base.add(12).cast::<u16>() =
                                                            (_rt::as_i32(t27_1)) as u16;
                                                        *base.add(14).cast::<u16>() =
                                                            (_rt::as_i32(t27_2)) as u16;
                                                        *base.add(16).cast::<u16>() =
                                                            (_rt::as_i32(t27_3)) as u16;
                                                        *base.add(18).cast::<u16>() =
                                                            (_rt::as_i32(t27_4)) as u16;
                                                        *base.add(20).cast::<u16>() =
                                                            (_rt::as_i32(t27_5)) as u16;
                                                        *base.add(22).cast::<u16>() =
                                                            (_rt::as_i32(t27_6)) as u16;
                                                        *base.add(24).cast::<u16>() =
                                                            (_rt::as_i32(t27_7)) as u16;
                                                    }
                                                }
                                            }
                                            DbValueNode::Macaddr(e) => {
                                                *base.add(0).cast::<u8>() = (25i32) as u8;
                                                let MacAddress { octets: octets28 } = e;
                                                let (t29_0, t29_1, t29_2, t29_3, t29_4, t29_5) =
                                                    octets28;
                                                *base.add(8).cast::<u8>() =
                                                    (_rt::as_i32(t29_0)) as u8;
                                                *base.add(9).cast::<u8>() =
                                                    (_rt::as_i32(t29_1)) as u8;
                                                *base.add(10).cast::<u8>() =
                                                    (_rt::as_i32(t29_2)) as u8;
                                                *base.add(11).cast::<u8>() =
                                                    (_rt::as_i32(t29_3)) as u8;
                                                *base.add(12).cast::<u8>() =
                                                    (_rt::as_i32(t29_4)) as u8;
                                                *base.add(13).cast::<u8>() =
                                                    (_rt::as_i32(t29_5)) as u8;
                                            }
                                            DbValueNode::Bit(e) => {
                                                *base.add(0).cast::<u8>() = (26i32) as u8;
                                                let vec30 = e;
                                                let len30 = vec30.len();
                                                let layout30 =
                                                    _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec30.len() * 1,
                                                        1,
                                                    );
                                                let result30 = if layout30.size() != 0 {
                                                    let ptr =
                                                        _rt::alloc::alloc(layout30).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout30);
                                                    }
                                                    ptr
                                                } else {
                                                    {
                                                        ::core::ptr::null_mut()
                                                    }
                                                };
                                                for (i, e) in vec30.into_iter().enumerate() {
                                                    let base = result30.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len30;
                                                *base.add(8).cast::<*mut u8>() = result30;
                                                cleanup_list
                                                    .extend_from_slice(&[(result30, layout30)]);
                                            }
                                            DbValueNode::Varbit(e) => {
                                                *base.add(0).cast::<u8>() = (27i32) as u8;
                                                let vec31 = e;
                                                let len31 = vec31.len();
                                                let layout31 =
                                                    _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec31.len() * 1,
                                                        1,
                                                    );
                                                let result31 = if layout31.size() != 0 {
                                                    let ptr =
                                                        _rt::alloc::alloc(layout31).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout31);
                                                    }
                                                    ptr
                                                } else {
                                                    {
                                                        ::core::ptr::null_mut()
                                                    }
                                                };
                                                for (i, e) in vec31.into_iter().enumerate() {
                                                    let base = result31.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len31;
                                                *base.add(8).cast::<*mut u8>() = result31;
                                                cleanup_list
                                                    .extend_from_slice(&[(result31, layout31)]);
                                            }
                                            DbValueNode::Int4range(e) => {
                                                *base.add(0).cast::<u8>() = (28i32) as u8;
                                                let Int4range {
                                                    start: start32,
                                                    end: end32,
                                                } = e;
                                                match start32 {
                                                    Int4bound::Included(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    Int4bound::Excluded(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    Int4bound::Unbounded => {
                                                        *base.add(8).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                                match end32 {
                                                    Int4bound::Included(e) => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    Int4bound::Excluded(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    Int4bound::Unbounded => {
                                                        *base.add(16).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                            }
                                            DbValueNode::Int8range(e) => {
                                                *base.add(0).cast::<u8>() = (29i32) as u8;
                                                let Int8range {
                                                    start: start33,
                                                    end: end33,
                                                } = e;
                                                match start33 {
                                                    Int8bound::Included(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        *base.add(16).cast::<i64>() =
                                                            _rt::as_i64(e);
                                                    }
                                                    Int8bound::Excluded(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i64>() =
                                                            _rt::as_i64(e);
                                                    }
                                                    Int8bound::Unbounded => {
                                                        *base.add(8).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                                match end33 {
                                                    Int8bound::Included(e) => {
                                                        *base.add(24).cast::<u8>() = (0i32) as u8;
                                                        *base.add(32).cast::<i64>() =
                                                            _rt::as_i64(e);
                                                    }
                                                    Int8bound::Excluded(e) => {
                                                        *base.add(24).cast::<u8>() = (1i32) as u8;
                                                        *base.add(32).cast::<i64>() =
                                                            _rt::as_i64(e);
                                                    }
                                                    Int8bound::Unbounded => {
                                                        *base.add(24).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                            }
                                            DbValueNode::Numrange(e) => {
                                                *base.add(0).cast::<u8>() = (30i32) as u8;
                                                let Numrange {
                                                    start: start34,
                                                    end: end34,
                                                } = e;
                                                match start34 {
                                                    Numbound::Included(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        let vec35 = e;
                                                        let ptr35 = vec35.as_ptr().cast::<u8>();
                                                        let len35 = vec35.len();
                                                        *base.add(16).cast::<usize>() = len35;
                                                        *base.add(12).cast::<*mut u8>() =
                                                            ptr35.cast_mut();
                                                    }
                                                    Numbound::Excluded(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        let vec36 = e;
                                                        let ptr36 = vec36.as_ptr().cast::<u8>();
                                                        let len36 = vec36.len();
                                                        *base.add(16).cast::<usize>() = len36;
                                                        *base.add(12).cast::<*mut u8>() =
                                                            ptr36.cast_mut();
                                                    }
                                                    Numbound::Unbounded => {
                                                        *base.add(8).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                                match end34 {
                                                    Numbound::Included(e) => {
                                                        *base.add(20).cast::<u8>() = (0i32) as u8;
                                                        let vec37 = e;
                                                        let ptr37 = vec37.as_ptr().cast::<u8>();
                                                        let len37 = vec37.len();
                                                        *base.add(28).cast::<usize>() = len37;
                                                        *base.add(24).cast::<*mut u8>() =
                                                            ptr37.cast_mut();
                                                    }
                                                    Numbound::Excluded(e) => {
                                                        *base.add(20).cast::<u8>() = (1i32) as u8;
                                                        let vec38 = e;
                                                        let ptr38 = vec38.as_ptr().cast::<u8>();
                                                        let len38 = vec38.len();
                                                        *base.add(28).cast::<usize>() = len38;
                                                        *base.add(24).cast::<*mut u8>() =
                                                            ptr38.cast_mut();
                                                    }
                                                    Numbound::Unbounded => {
                                                        *base.add(20).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                            }
                                            DbValueNode::Tsrange(e) => {
                                                *base.add(0).cast::<u8>() = (31i32) as u8;
                                                let Tsrange {
                                                    start: start39,
                                                    end: end39,
                                                } = e;
                                                match start39 {
                                                    Tsbound::Included(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        let Timestamp {
                                                            date: date40,
                                                            time: time40,
                                                        } = e;
                                                        let Date {
                                                            year: year41,
                                                            month: month41,
                                                            day: day41,
                                                        } = date40;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(year41);
                                                        *base.add(16).cast::<u8>() =
                                                            (_rt::as_i32(month41)) as u8;
                                                        *base.add(17).cast::<u8>() =
                                                            (_rt::as_i32(day41)) as u8;
                                                        let Time {
                                                            hour: hour42,
                                                            minute: minute42,
                                                            second: second42,
                                                            nanosecond: nanosecond42,
                                                        } = time40;
                                                        *base.add(20).cast::<u8>() =
                                                            (_rt::as_i32(hour42)) as u8;
                                                        *base.add(21).cast::<u8>() =
                                                            (_rt::as_i32(minute42)) as u8;
                                                        *base.add(22).cast::<u8>() =
                                                            (_rt::as_i32(second42)) as u8;
                                                        *base.add(24).cast::<i32>() =
                                                            _rt::as_i32(nanosecond42);
                                                    }
                                                    Tsbound::Excluded(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        let Timestamp {
                                                            date: date43,
                                                            time: time43,
                                                        } = e;
                                                        let Date {
                                                            year: year44,
                                                            month: month44,
                                                            day: day44,
                                                        } = date43;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(year44);
                                                        *base.add(16).cast::<u8>() =
                                                            (_rt::as_i32(month44)) as u8;
                                                        *base.add(17).cast::<u8>() =
                                                            (_rt::as_i32(day44)) as u8;
                                                        let Time {
                                                            hour: hour45,
                                                            minute: minute45,
                                                            second: second45,
                                                            nanosecond: nanosecond45,
                                                        } = time43;
                                                        *base.add(20).cast::<u8>() =
                                                            (_rt::as_i32(hour45)) as u8;
                                                        *base.add(21).cast::<u8>() =
                                                            (_rt::as_i32(minute45)) as u8;
                                                        *base.add(22).cast::<u8>() =
                                                            (_rt::as_i32(second45)) as u8;
                                                        *base.add(24).cast::<i32>() =
                                                            _rt::as_i32(nanosecond45);
                                                    }
                                                    Tsbound::Unbounded => {
                                                        *base.add(8).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                                match end39 {
                                                    Tsbound::Included(e) => {
                                                        *base.add(28).cast::<u8>() = (0i32) as u8;
                                                        let Timestamp {
                                                            date: date46,
                                                            time: time46,
                                                        } = e;
                                                        let Date {
                                                            year: year47,
                                                            month: month47,
                                                            day: day47,
                                                        } = date46;
                                                        *base.add(32).cast::<i32>() =
                                                            _rt::as_i32(year47);
                                                        *base.add(36).cast::<u8>() =
                                                            (_rt::as_i32(month47)) as u8;
                                                        *base.add(37).cast::<u8>() =
                                                            (_rt::as_i32(day47)) as u8;
                                                        let Time {
                                                            hour: hour48,
                                                            minute: minute48,
                                                            second: second48,
                                                            nanosecond: nanosecond48,
                                                        } = time46;
                                                        *base.add(40).cast::<u8>() =
                                                            (_rt::as_i32(hour48)) as u8;
                                                        *base.add(41).cast::<u8>() =
                                                            (_rt::as_i32(minute48)) as u8;
                                                        *base.add(42).cast::<u8>() =
                                                            (_rt::as_i32(second48)) as u8;
                                                        *base.add(44).cast::<i32>() =
                                                            _rt::as_i32(nanosecond48);
                                                    }
                                                    Tsbound::Excluded(e) => {
                                                        *base.add(28).cast::<u8>() = (1i32) as u8;
                                                        let Timestamp {
                                                            date: date49,
                                                            time: time49,
                                                        } = e;
                                                        let Date {
                                                            year: year50,
                                                            month: month50,
                                                            day: day50,
                                                        } = date49;
                                                        *base.add(32).cast::<i32>() =
                                                            _rt::as_i32(year50);
                                                        *base.add(36).cast::<u8>() =
                                                            (_rt::as_i32(month50)) as u8;
                                                        *base.add(37).cast::<u8>() =
                                                            (_rt::as_i32(day50)) as u8;
                                                        let Time {
                                                            hour: hour51,
                                                            minute: minute51,
                                                            second: second51,
                                                            nanosecond: nanosecond51,
                                                        } = time49;
                                                        *base.add(40).cast::<u8>() =
                                                            (_rt::as_i32(hour51)) as u8;
                                                        *base.add(41).cast::<u8>() =
                                                            (_rt::as_i32(minute51)) as u8;
                                                        *base.add(42).cast::<u8>() =
                                                            (_rt::as_i32(second51)) as u8;
                                                        *base.add(44).cast::<i32>() =
                                                            _rt::as_i32(nanosecond51);
                                                    }
                                                    Tsbound::Unbounded => {
                                                        *base.add(28).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                            }
                                            DbValueNode::Tstzrange(e) => {
                                                *base.add(0).cast::<u8>() = (32i32) as u8;
                                                let Tstzrange {
                                                    start: start52,
                                                    end: end52,
                                                } = e;
                                                match start52 {
                                                    Tstzbound::Included(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        let Timestamptz {
                                                            timestamp: timestamp53,
                                                            offset: offset53,
                                                        } = e;
                                                        let Timestamp {
                                                            date: date54,
                                                            time: time54,
                                                        } = timestamp53;
                                                        let Date {
                                                            year: year55,
                                                            month: month55,
                                                            day: day55,
                                                        } = date54;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(year55);
                                                        *base.add(16).cast::<u8>() =
                                                            (_rt::as_i32(month55)) as u8;
                                                        *base.add(17).cast::<u8>() =
                                                            (_rt::as_i32(day55)) as u8;
                                                        let Time {
                                                            hour: hour56,
                                                            minute: minute56,
                                                            second: second56,
                                                            nanosecond: nanosecond56,
                                                        } = time54;
                                                        *base.add(20).cast::<u8>() =
                                                            (_rt::as_i32(hour56)) as u8;
                                                        *base.add(21).cast::<u8>() =
                                                            (_rt::as_i32(minute56)) as u8;
                                                        *base.add(22).cast::<u8>() =
                                                            (_rt::as_i32(second56)) as u8;
                                                        *base.add(24).cast::<i32>() =
                                                            _rt::as_i32(nanosecond56);
                                                        *base.add(28).cast::<i32>() =
                                                            _rt::as_i32(offset53);
                                                    }
                                                    Tstzbound::Excluded(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        let Timestamptz {
                                                            timestamp: timestamp57,
                                                            offset: offset57,
                                                        } = e;
                                                        let Timestamp {
                                                            date: date58,
                                                            time: time58,
                                                        } = timestamp57;
                                                        let Date {
                                                            year: year59,
                                                            month: month59,
                                                            day: day59,
                                                        } = date58;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(year59);
                                                        *base.add(16).cast::<u8>() =
                                                            (_rt::as_i32(month59)) as u8;
                                                        *base.add(17).cast::<u8>() =
                                                            (_rt::as_i32(day59)) as u8;
                                                        let Time {
                                                            hour: hour60,
                                                            minute: minute60,
                                                            second: second60,
                                                            nanosecond: nanosecond60,
                                                        } = time58;
                                                        *base.add(20).cast::<u8>() =
                                                            (_rt::as_i32(hour60)) as u8;
                                                        *base.add(21).cast::<u8>() =
                                                            (_rt::as_i32(minute60)) as u8;
                                                        *base.add(22).cast::<u8>() =
                                                            (_rt::as_i32(second60)) as u8;
                                                        *base.add(24).cast::<i32>() =
                                                            _rt::as_i32(nanosecond60);
                                                        *base.add(28).cast::<i32>() =
                                                            _rt::as_i32(offset57);
                                                    }
                                                    Tstzbound::Unbounded => {
                                                        *base.add(8).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                                match end52 {
                                                    Tstzbound::Included(e) => {
                                                        *base.add(32).cast::<u8>() = (0i32) as u8;
                                                        let Timestamptz {
                                                            timestamp: timestamp61,
                                                            offset: offset61,
                                                        } = e;
                                                        let Timestamp {
                                                            date: date62,
                                                            time: time62,
                                                        } = timestamp61;
                                                        let Date {
                                                            year: year63,
                                                            month: month63,
                                                            day: day63,
                                                        } = date62;
                                                        *base.add(36).cast::<i32>() =
                                                            _rt::as_i32(year63);
                                                        *base.add(40).cast::<u8>() =
                                                            (_rt::as_i32(month63)) as u8;
                                                        *base.add(41).cast::<u8>() =
                                                            (_rt::as_i32(day63)) as u8;
                                                        let Time {
                                                            hour: hour64,
                                                            minute: minute64,
                                                            second: second64,
                                                            nanosecond: nanosecond64,
                                                        } = time62;
                                                        *base.add(44).cast::<u8>() =
                                                            (_rt::as_i32(hour64)) as u8;
                                                        *base.add(45).cast::<u8>() =
                                                            (_rt::as_i32(minute64)) as u8;
                                                        *base.add(46).cast::<u8>() =
                                                            (_rt::as_i32(second64)) as u8;
                                                        *base.add(48).cast::<i32>() =
                                                            _rt::as_i32(nanosecond64);
                                                        *base.add(52).cast::<i32>() =
                                                            _rt::as_i32(offset61);
                                                    }
                                                    Tstzbound::Excluded(e) => {
                                                        *base.add(32).cast::<u8>() = (1i32) as u8;
                                                        let Timestamptz {
                                                            timestamp: timestamp65,
                                                            offset: offset65,
                                                        } = e;
                                                        let Timestamp {
                                                            date: date66,
                                                            time: time66,
                                                        } = timestamp65;
                                                        let Date {
                                                            year: year67,
                                                            month: month67,
                                                            day: day67,
                                                        } = date66;
                                                        *base.add(36).cast::<i32>() =
                                                            _rt::as_i32(year67);
                                                        *base.add(40).cast::<u8>() =
                                                            (_rt::as_i32(month67)) as u8;
                                                        *base.add(41).cast::<u8>() =
                                                            (_rt::as_i32(day67)) as u8;
                                                        let Time {
                                                            hour: hour68,
                                                            minute: minute68,
                                                            second: second68,
                                                            nanosecond: nanosecond68,
                                                        } = time66;
                                                        *base.add(44).cast::<u8>() =
                                                            (_rt::as_i32(hour68)) as u8;
                                                        *base.add(45).cast::<u8>() =
                                                            (_rt::as_i32(minute68)) as u8;
                                                        *base.add(46).cast::<u8>() =
                                                            (_rt::as_i32(second68)) as u8;
                                                        *base.add(48).cast::<i32>() =
                                                            _rt::as_i32(nanosecond68);
                                                        *base.add(52).cast::<i32>() =
                                                            _rt::as_i32(offset65);
                                                    }
                                                    Tstzbound::Unbounded => {
                                                        *base.add(32).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                            }
                                            DbValueNode::Daterange(e) => {
                                                *base.add(0).cast::<u8>() = (33i32) as u8;
                                                let Daterange {
                                                    start: start69,
                                                    end: end69,
                                                } = e;
                                                match start69 {
                                                    Datebound::Included(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        let Date {
                                                            year: year70,
                                                            month: month70,
                                                            day: day70,
                                                        } = e;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(year70);
                                                        *base.add(16).cast::<u8>() =
                                                            (_rt::as_i32(month70)) as u8;
                                                        *base.add(17).cast::<u8>() =
                                                            (_rt::as_i32(day70)) as u8;
                                                    }
                                                    Datebound::Excluded(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        let Date {
                                                            year: year71,
                                                            month: month71,
                                                            day: day71,
                                                        } = e;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(year71);
                                                        *base.add(16).cast::<u8>() =
                                                            (_rt::as_i32(month71)) as u8;
                                                        *base.add(17).cast::<u8>() =
                                                            (_rt::as_i32(day71)) as u8;
                                                    }
                                                    Datebound::Unbounded => {
                                                        *base.add(8).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                                match end69 {
                                                    Datebound::Included(e) => {
                                                        *base.add(20).cast::<u8>() = (0i32) as u8;
                                                        let Date {
                                                            year: year72,
                                                            month: month72,
                                                            day: day72,
                                                        } = e;
                                                        *base.add(24).cast::<i32>() =
                                                            _rt::as_i32(year72);
                                                        *base.add(28).cast::<u8>() =
                                                            (_rt::as_i32(month72)) as u8;
                                                        *base.add(29).cast::<u8>() =
                                                            (_rt::as_i32(day72)) as u8;
                                                    }
                                                    Datebound::Excluded(e) => {
                                                        *base.add(20).cast::<u8>() = (1i32) as u8;
                                                        let Date {
                                                            year: year73,
                                                            month: month73,
                                                            day: day73,
                                                        } = e;
                                                        *base.add(24).cast::<i32>() =
                                                            _rt::as_i32(year73);
                                                        *base.add(28).cast::<u8>() =
                                                            (_rt::as_i32(month73)) as u8;
                                                        *base.add(29).cast::<u8>() =
                                                            (_rt::as_i32(day73)) as u8;
                                                    }
                                                    Datebound::Unbounded => {
                                                        *base.add(20).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                            }
                                            DbValueNode::Money(e) => {
                                                *base.add(0).cast::<u8>() = (34i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            DbValueNode::Oid(e) => {
                                                *base.add(0).cast::<u8>() = (35i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            DbValueNode::Enumeration(e) => {
                                                *base.add(0).cast::<u8>() = (36i32) as u8;
                                                let Enumeration {
                                                    name: name74,
                                                    value: value74,
                                                } = e;
                                                let vec75 = name74;
                                                let ptr75 = vec75.as_ptr().cast::<u8>();
                                                let len75 = vec75.len();
                                                *base.add(12).cast::<usize>() = len75;
                                                *base.add(8).cast::<*mut u8>() = ptr75.cast_mut();
                                                let vec76 = value74;
                                                let ptr76 = vec76.as_ptr().cast::<u8>();
                                                let len76 = vec76.len();
                                                *base.add(20).cast::<usize>() = len76;
                                                *base.add(16).cast::<*mut u8>() = ptr76.cast_mut();
                                            }
                                            DbValueNode::Composite(e) => {
                                                *base.add(0).cast::<u8>() = (37i32) as u8;
                                                let Composite {
                                                    name: name77,
                                                    values: values77,
                                                } = e;
                                                let vec78 = name77;
                                                let ptr78 = vec78.as_ptr().cast::<u8>();
                                                let len78 = vec78.len();
                                                *base.add(12).cast::<usize>() = len78;
                                                *base.add(8).cast::<*mut u8>() = ptr78.cast_mut();
                                                let vec79 = values77;
                                                let ptr79 = vec79.as_ptr().cast::<u8>();
                                                let len79 = vec79.len();
                                                *base.add(20).cast::<usize>() = len79;
                                                *base.add(16).cast::<*mut u8>() = ptr79.cast_mut();
                                            }
                                            DbValueNode::Domain(e) => {
                                                *base.add(0).cast::<u8>() = (38i32) as u8;
                                                let Domain {
                                                    name: name80,
                                                    value: value80,
                                                } = e;
                                                let vec81 = name80;
                                                let ptr81 = vec81.as_ptr().cast::<u8>();
                                                let len81 = vec81.len();
                                                *base.add(12).cast::<usize>() = len81;
                                                *base.add(8).cast::<*mut u8>() = ptr81.cast_mut();
                                                *base.add(16).cast::<i32>() = _rt::as_i32(value80);
                                            }
                                            DbValueNode::Range(e) => {
                                                *base.add(0).cast::<u8>() = (39i32) as u8;
                                                let Range {
                                                    name: name82,
                                                    value: value82,
                                                } = e;
                                                let vec83 = name82;
                                                let ptr83 = vec83.as_ptr().cast::<u8>();
                                                let len83 = vec83.len();
                                                *base.add(12).cast::<usize>() = len83;
                                                *base.add(8).cast::<*mut u8>() = ptr83.cast_mut();
                                                let ValuesRange {
                                                    start: start84,
                                                    end: end84,
                                                } = value82;
                                                match start84 {
                                                    ValueBound::Included(e) => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    ValueBound::Excluded(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    ValueBound::Unbounded => {
                                                        *base.add(16).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                                match end84 {
                                                    ValueBound::Included(e) => {
                                                        *base.add(24).cast::<u8>() = (0i32) as u8;
                                                        *base.add(28).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    ValueBound::Excluded(e) => {
                                                        *base.add(24).cast::<u8>() = (1i32) as u8;
                                                        *base.add(28).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    ValueBound::Unbounded => {
                                                        *base.add(24).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                            }
                                            DbValueNode::Array(e) => {
                                                *base.add(0).cast::<u8>() = (40i32) as u8;
                                                let vec85 = e;
                                                let ptr85 = vec85.as_ptr().cast::<u8>();
                                                let len85 = vec85.len();
                                                *base.add(12).cast::<usize>() = len85;
                                                *base.add(8).cast::<*mut u8>() = ptr85.cast_mut();
                                            }
                                            DbValueNode::Null => {
                                                *base.add(0).cast::<u8>() = (41i32) as u8;
                                            }
                                        }
                                    }
                                }
                                *base.add(4).cast::<usize>() = len86;
                                *base.add(0).cast::<*mut u8>() = result86;
                                cleanup_list.extend_from_slice(&[(result86, layout86)]);
                            }
                        }
                        let ptr88 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-connection.query"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result87,
                            len87,
                            ptr88,
                        );
                        let l89 = i32::from(*ptr88.add(0).cast::<u8>());
                        if layout87.size() != 0 {
                            _rt::alloc::dealloc(result87.cast(), layout87);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l89 {
                            0 => {
                                let e = {
                                    let l90 = *ptr88.add(4).cast::<i32>();

                                    DbResultSet::from_handle(l90 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l91 = i32::from(*ptr88.add(4).cast::<u8>());
                                    let v107 = match l91 {
                                        0 => {
                                            let e107 = {
                                                let l92 = *ptr88.add(8).cast::<*mut u8>();
                                                let l93 = *ptr88.add(12).cast::<usize>();
                                                let len94 = l93;
                                                let bytes94 = _rt::Vec::from_raw_parts(
                                                    l92.cast(),
                                                    len94,
                                                    len94,
                                                );

                                                _rt::string_lift(bytes94)
                                            };
                                            Error::ConnectionFailure(e107)
                                        }
                                        1 => {
                                            let e107 = {
                                                let l95 = *ptr88.add(8).cast::<*mut u8>();
                                                let l96 = *ptr88.add(12).cast::<usize>();
                                                let len97 = l96;
                                                let bytes97 = _rt::Vec::from_raw_parts(
                                                    l95.cast(),
                                                    len97,
                                                    len97,
                                                );

                                                _rt::string_lift(bytes97)
                                            };
                                            Error::QueryParameterFailure(e107)
                                        }
                                        2 => {
                                            let e107 = {
                                                let l98 = *ptr88.add(8).cast::<*mut u8>();
                                                let l99 = *ptr88.add(12).cast::<usize>();
                                                let len100 = l99;
                                                let bytes100 = _rt::Vec::from_raw_parts(
                                                    l98.cast(),
                                                    len100,
                                                    len100,
                                                );

                                                _rt::string_lift(bytes100)
                                            };
                                            Error::QueryExecutionFailure(e107)
                                        }
                                        3 => {
                                            let e107 = {
                                                let l101 = *ptr88.add(8).cast::<*mut u8>();
                                                let l102 = *ptr88.add(12).cast::<usize>();
                                                let len103 = l102;
                                                let bytes103 = _rt::Vec::from_raw_parts(
                                                    l101.cast(),
                                                    len103,
                                                    len103,
                                                );

                                                _rt::string_lift(bytes103)
                                            };
                                            Error::QueryResponseFailure(e107)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e107 = {
                                                let l104 = *ptr88.add(8).cast::<*mut u8>();
                                                let l105 = *ptr88.add(12).cast::<usize>();
                                                let len106 = l105;
                                                let bytes106 = _rt::Vec::from_raw_parts(
                                                    l104.cast(),
                                                    len106,
                                                    len106,
                                                );

                                                _rt::string_lift(bytes106)
                                            };
                                            Error::Other(e107)
                                        }
                                    };

                                    v107
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn execute(&self, statement: &str, params: &[DbValue]) -> Result<u64, Error> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                        let vec0 = statement;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec87 = params;
                        let len87 = vec87.len();
                        let layout87 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec87.len() * 8, 4);
                        let result87 = if layout87.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout87).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout87);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec87.into_iter().enumerate() {
                            let base = result87.add(i * 8);
                            {
                                let DbValue { nodes: nodes1 } = e;
                                let vec86 = nodes1;
                                let len86 = vec86.len();
                                let layout86 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec86.len() * 56,
                                    8,
                                );
                                let result86 = if layout86.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout86).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout86);
                                    }
                                    ptr
                                } else {
                                    {
                                        ::core::ptr::null_mut()
                                    }
                                };
                                for (i, e) in vec86.into_iter().enumerate() {
                                    let base = result86.add(i * 56);
                                    {
                                        match e {
                                            DbValueNode::Character(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            DbValueNode::Int2(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            DbValueNode::Int4(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            DbValueNode::Int8(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            DbValueNode::Float4(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            DbValueNode::Float8(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            DbValueNode::Numeric(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(12).cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            DbValueNode::Boolean(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                            DbValueNode::Text(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                let vec3 = e;
                                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                                let len3 = vec3.len();
                                                *base.add(12).cast::<usize>() = len3;
                                                *base.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                            }
                                            DbValueNode::Varchar(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                let vec4 = e;
                                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                                let len4 = vec4.len();
                                                *base.add(12).cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                                            }
                                            DbValueNode::Bpchar(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            DbValueNode::Timestamp(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                let Timestamp {
                                                    date: date6,
                                                    time: time6,
                                                } = e;
                                                let Date {
                                                    year: year7,
                                                    month: month7,
                                                    day: day7,
                                                } = date6;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(year7);
                                                *base.add(12).cast::<u8>() =
                                                    (_rt::as_i32(month7)) as u8;
                                                *base.add(13).cast::<u8>() =
                                                    (_rt::as_i32(day7)) as u8;
                                                let Time {
                                                    hour: hour8,
                                                    minute: minute8,
                                                    second: second8,
                                                    nanosecond: nanosecond8,
                                                } = time6;
                                                *base.add(16).cast::<u8>() =
                                                    (_rt::as_i32(hour8)) as u8;
                                                *base.add(17).cast::<u8>() =
                                                    (_rt::as_i32(minute8)) as u8;
                                                *base.add(18).cast::<u8>() =
                                                    (_rt::as_i32(second8)) as u8;
                                                *base.add(20).cast::<i32>() =
                                                    _rt::as_i32(nanosecond8);
                                            }
                                            DbValueNode::Timestamptz(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                let Timestamptz {
                                                    timestamp: timestamp9,
                                                    offset: offset9,
                                                } = e;
                                                let Timestamp {
                                                    date: date10,
                                                    time: time10,
                                                } = timestamp9;
                                                let Date {
                                                    year: year11,
                                                    month: month11,
                                                    day: day11,
                                                } = date10;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(year11);
                                                *base.add(12).cast::<u8>() =
                                                    (_rt::as_i32(month11)) as u8;
                                                *base.add(13).cast::<u8>() =
                                                    (_rt::as_i32(day11)) as u8;
                                                let Time {
                                                    hour: hour12,
                                                    minute: minute12,
                                                    second: second12,
                                                    nanosecond: nanosecond12,
                                                } = time10;
                                                *base.add(16).cast::<u8>() =
                                                    (_rt::as_i32(hour12)) as u8;
                                                *base.add(17).cast::<u8>() =
                                                    (_rt::as_i32(minute12)) as u8;
                                                *base.add(18).cast::<u8>() =
                                                    (_rt::as_i32(second12)) as u8;
                                                *base.add(20).cast::<i32>() =
                                                    _rt::as_i32(nanosecond12);
                                                *base.add(24).cast::<i32>() = _rt::as_i32(offset9);
                                            }
                                            DbValueNode::Date(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                let Date {
                                                    year: year13,
                                                    month: month13,
                                                    day: day13,
                                                } = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(year13);
                                                *base.add(12).cast::<u8>() =
                                                    (_rt::as_i32(month13)) as u8;
                                                *base.add(13).cast::<u8>() =
                                                    (_rt::as_i32(day13)) as u8;
                                            }
                                            DbValueNode::Time(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                let Time {
                                                    hour: hour14,
                                                    minute: minute14,
                                                    second: second14,
                                                    nanosecond: nanosecond14,
                                                } = e;
                                                *base.add(8).cast::<u8>() =
                                                    (_rt::as_i32(hour14)) as u8;
                                                *base.add(9).cast::<u8>() =
                                                    (_rt::as_i32(minute14)) as u8;
                                                *base.add(10).cast::<u8>() =
                                                    (_rt::as_i32(second14)) as u8;
                                                *base.add(12).cast::<i32>() =
                                                    _rt::as_i32(nanosecond14);
                                            }
                                            DbValueNode::Timetz(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                let Timetz {
                                                    time: time15,
                                                    offset: offset15,
                                                } = e;
                                                let Time {
                                                    hour: hour16,
                                                    minute: minute16,
                                                    second: second16,
                                                    nanosecond: nanosecond16,
                                                } = time15;
                                                *base.add(8).cast::<u8>() =
                                                    (_rt::as_i32(hour16)) as u8;
                                                *base.add(9).cast::<u8>() =
                                                    (_rt::as_i32(minute16)) as u8;
                                                *base.add(10).cast::<u8>() =
                                                    (_rt::as_i32(second16)) as u8;
                                                *base.add(12).cast::<i32>() =
                                                    _rt::as_i32(nanosecond16);
                                                *base.add(16).cast::<i32>() = _rt::as_i32(offset15);
                                            }
                                            DbValueNode::Interval(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                let Interval {
                                                    months: months17,
                                                    days: days17,
                                                    microseconds: microseconds17,
                                                } = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(months17);
                                                *base.add(12).cast::<i32>() = _rt::as_i32(days17);
                                                *base.add(16).cast::<i64>() =
                                                    _rt::as_i64(microseconds17);
                                            }
                                            DbValueNode::Bytea(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                let vec18 = e;
                                                let ptr18 = vec18.as_ptr().cast::<u8>();
                                                let len18 = vec18.len();
                                                *base.add(12).cast::<usize>() = len18;
                                                *base.add(8).cast::<*mut u8>() = ptr18.cast_mut();
                                            }
                                            DbValueNode::Json(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                let vec19 = e;
                                                let ptr19 = vec19.as_ptr().cast::<u8>();
                                                let len19 = vec19.len();
                                                *base.add(12).cast::<usize>() = len19;
                                                *base.add(8).cast::<*mut u8>() = ptr19.cast_mut();
                                            }
                                            DbValueNode::Jsonb(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                let vec20 = e;
                                                let ptr20 = vec20.as_ptr().cast::<u8>();
                                                let len20 = vec20.len();
                                                *base.add(12).cast::<usize>() = len20;
                                                *base.add(8).cast::<*mut u8>() = ptr20.cast_mut();
                                            }
                                            DbValueNode::Jsonpath(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec21 = e;
                                                let ptr21 = vec21.as_ptr().cast::<u8>();
                                                let len21 = vec21.len();
                                                *base.add(12).cast::<usize>() = len21;
                                                *base.add(8).cast::<*mut u8>() = ptr21.cast_mut();
                                            }
                                            DbValueNode::Xml(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let vec22 = e;
                                                let ptr22 = vec22.as_ptr().cast::<u8>();
                                                let len22 = vec22.len();
                                                *base.add(12).cast::<usize>() = len22;
                                                *base.add(8).cast::<*mut u8>() = ptr22.cast_mut();
                                            }
                                            DbValueNode::Uuid(e) => {
                                                *base.add(0).cast::<u8>() = (22i32) as u8;
                                                let Uuid {
                                                    high_bits: high_bits23,
                                                    low_bits: low_bits23,
                                                } = e;
                                                *base.add(8).cast::<i64>() =
                                                    _rt::as_i64(high_bits23);
                                                *base.add(16).cast::<i64>() =
                                                    _rt::as_i64(low_bits23);
                                            }
                                            DbValueNode::Inet(e) => {
                                                *base.add(0).cast::<u8>() = (23i32) as u8;
                                                match e {
                                                    IpAddress::Ipv4(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        let (t24_0, t24_1, t24_2, t24_3) = e;
                                                        *base.add(10).cast::<u8>() =
                                                            (_rt::as_i32(t24_0)) as u8;
                                                        *base.add(11).cast::<u8>() =
                                                            (_rt::as_i32(t24_1)) as u8;
                                                        *base.add(12).cast::<u8>() =
                                                            (_rt::as_i32(t24_2)) as u8;
                                                        *base.add(13).cast::<u8>() =
                                                            (_rt::as_i32(t24_3)) as u8;
                                                    }
                                                    IpAddress::Ipv6(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        let (
                                                            t25_0,
                                                            t25_1,
                                                            t25_2,
                                                            t25_3,
                                                            t25_4,
                                                            t25_5,
                                                            t25_6,
                                                            t25_7,
                                                        ) = e;
                                                        *base.add(10).cast::<u16>() =
                                                            (_rt::as_i32(t25_0)) as u16;
                                                        *base.add(12).cast::<u16>() =
                                                            (_rt::as_i32(t25_1)) as u16;
                                                        *base.add(14).cast::<u16>() =
                                                            (_rt::as_i32(t25_2)) as u16;
                                                        *base.add(16).cast::<u16>() =
                                                            (_rt::as_i32(t25_3)) as u16;
                                                        *base.add(18).cast::<u16>() =
                                                            (_rt::as_i32(t25_4)) as u16;
                                                        *base.add(20).cast::<u16>() =
                                                            (_rt::as_i32(t25_5)) as u16;
                                                        *base.add(22).cast::<u16>() =
                                                            (_rt::as_i32(t25_6)) as u16;
                                                        *base.add(24).cast::<u16>() =
                                                            (_rt::as_i32(t25_7)) as u16;
                                                    }
                                                }
                                            }
                                            DbValueNode::Cidr(e) => {
                                                *base.add(0).cast::<u8>() = (24i32) as u8;
                                                match e {
                                                    IpAddress::Ipv4(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        let (t26_0, t26_1, t26_2, t26_3) = e;
                                                        *base.add(10).cast::<u8>() =
                                                            (_rt::as_i32(t26_0)) as u8;
                                                        *base.add(11).cast::<u8>() =
                                                            (_rt::as_i32(t26_1)) as u8;
                                                        *base.add(12).cast::<u8>() =
                                                            (_rt::as_i32(t26_2)) as u8;
                                                        *base.add(13).cast::<u8>() =
                                                            (_rt::as_i32(t26_3)) as u8;
                                                    }
                                                    IpAddress::Ipv6(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        let (
                                                            t27_0,
                                                            t27_1,
                                                            t27_2,
                                                            t27_3,
                                                            t27_4,
                                                            t27_5,
                                                            t27_6,
                                                            t27_7,
                                                        ) = e;
                                                        *base.add(10).cast::<u16>() =
                                                            (_rt::as_i32(t27_0)) as u16;
                                                        *base.add(12).cast::<u16>() =
                                                            (_rt::as_i32(t27_1)) as u16;
                                                        *base.add(14).cast::<u16>() =
                                                            (_rt::as_i32(t27_2)) as u16;
                                                        *base.add(16).cast::<u16>() =
                                                            (_rt::as_i32(t27_3)) as u16;
                                                        *base.add(18).cast::<u16>() =
                                                            (_rt::as_i32(t27_4)) as u16;
                                                        *base.add(20).cast::<u16>() =
                                                            (_rt::as_i32(t27_5)) as u16;
                                                        *base.add(22).cast::<u16>() =
                                                            (_rt::as_i32(t27_6)) as u16;
                                                        *base.add(24).cast::<u16>() =
                                                            (_rt::as_i32(t27_7)) as u16;
                                                    }
                                                }
                                            }
                                            DbValueNode::Macaddr(e) => {
                                                *base.add(0).cast::<u8>() = (25i32) as u8;
                                                let MacAddress { octets: octets28 } = e;
                                                let (t29_0, t29_1, t29_2, t29_3, t29_4, t29_5) =
                                                    octets28;
                                                *base.add(8).cast::<u8>() =
                                                    (_rt::as_i32(t29_0)) as u8;
                                                *base.add(9).cast::<u8>() =
                                                    (_rt::as_i32(t29_1)) as u8;
                                                *base.add(10).cast::<u8>() =
                                                    (_rt::as_i32(t29_2)) as u8;
                                                *base.add(11).cast::<u8>() =
                                                    (_rt::as_i32(t29_3)) as u8;
                                                *base.add(12).cast::<u8>() =
                                                    (_rt::as_i32(t29_4)) as u8;
                                                *base.add(13).cast::<u8>() =
                                                    (_rt::as_i32(t29_5)) as u8;
                                            }
                                            DbValueNode::Bit(e) => {
                                                *base.add(0).cast::<u8>() = (26i32) as u8;
                                                let vec30 = e;
                                                let len30 = vec30.len();
                                                let layout30 =
                                                    _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec30.len() * 1,
                                                        1,
                                                    );
                                                let result30 = if layout30.size() != 0 {
                                                    let ptr =
                                                        _rt::alloc::alloc(layout30).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout30);
                                                    }
                                                    ptr
                                                } else {
                                                    {
                                                        ::core::ptr::null_mut()
                                                    }
                                                };
                                                for (i, e) in vec30.into_iter().enumerate() {
                                                    let base = result30.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len30;
                                                *base.add(8).cast::<*mut u8>() = result30;
                                                cleanup_list
                                                    .extend_from_slice(&[(result30, layout30)]);
                                            }
                                            DbValueNode::Varbit(e) => {
                                                *base.add(0).cast::<u8>() = (27i32) as u8;
                                                let vec31 = e;
                                                let len31 = vec31.len();
                                                let layout31 =
                                                    _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec31.len() * 1,
                                                        1,
                                                    );
                                                let result31 = if layout31.size() != 0 {
                                                    let ptr =
                                                        _rt::alloc::alloc(layout31).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout31);
                                                    }
                                                    ptr
                                                } else {
                                                    {
                                                        ::core::ptr::null_mut()
                                                    }
                                                };
                                                for (i, e) in vec31.into_iter().enumerate() {
                                                    let base = result31.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len31;
                                                *base.add(8).cast::<*mut u8>() = result31;
                                                cleanup_list
                                                    .extend_from_slice(&[(result31, layout31)]);
                                            }
                                            DbValueNode::Int4range(e) => {
                                                *base.add(0).cast::<u8>() = (28i32) as u8;
                                                let Int4range {
                                                    start: start32,
                                                    end: end32,
                                                } = e;
                                                match start32 {
                                                    Int4bound::Included(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    Int4bound::Excluded(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    Int4bound::Unbounded => {
                                                        *base.add(8).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                                match end32 {
                                                    Int4bound::Included(e) => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    Int4bound::Excluded(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    Int4bound::Unbounded => {
                                                        *base.add(16).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                            }
                                            DbValueNode::Int8range(e) => {
                                                *base.add(0).cast::<u8>() = (29i32) as u8;
                                                let Int8range {
                                                    start: start33,
                                                    end: end33,
                                                } = e;
                                                match start33 {
                                                    Int8bound::Included(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        *base.add(16).cast::<i64>() =
                                                            _rt::as_i64(e);
                                                    }
                                                    Int8bound::Excluded(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i64>() =
                                                            _rt::as_i64(e);
                                                    }
                                                    Int8bound::Unbounded => {
                                                        *base.add(8).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                                match end33 {
                                                    Int8bound::Included(e) => {
                                                        *base.add(24).cast::<u8>() = (0i32) as u8;
                                                        *base.add(32).cast::<i64>() =
                                                            _rt::as_i64(e);
                                                    }
                                                    Int8bound::Excluded(e) => {
                                                        *base.add(24).cast::<u8>() = (1i32) as u8;
                                                        *base.add(32).cast::<i64>() =
                                                            _rt::as_i64(e);
                                                    }
                                                    Int8bound::Unbounded => {
                                                        *base.add(24).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                            }
                                            DbValueNode::Numrange(e) => {
                                                *base.add(0).cast::<u8>() = (30i32) as u8;
                                                let Numrange {
                                                    start: start34,
                                                    end: end34,
                                                } = e;
                                                match start34 {
                                                    Numbound::Included(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        let vec35 = e;
                                                        let ptr35 = vec35.as_ptr().cast::<u8>();
                                                        let len35 = vec35.len();
                                                        *base.add(16).cast::<usize>() = len35;
                                                        *base.add(12).cast::<*mut u8>() =
                                                            ptr35.cast_mut();
                                                    }
                                                    Numbound::Excluded(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        let vec36 = e;
                                                        let ptr36 = vec36.as_ptr().cast::<u8>();
                                                        let len36 = vec36.len();
                                                        *base.add(16).cast::<usize>() = len36;
                                                        *base.add(12).cast::<*mut u8>() =
                                                            ptr36.cast_mut();
                                                    }
                                                    Numbound::Unbounded => {
                                                        *base.add(8).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                                match end34 {
                                                    Numbound::Included(e) => {
                                                        *base.add(20).cast::<u8>() = (0i32) as u8;
                                                        let vec37 = e;
                                                        let ptr37 = vec37.as_ptr().cast::<u8>();
                                                        let len37 = vec37.len();
                                                        *base.add(28).cast::<usize>() = len37;
                                                        *base.add(24).cast::<*mut u8>() =
                                                            ptr37.cast_mut();
                                                    }
                                                    Numbound::Excluded(e) => {
                                                        *base.add(20).cast::<u8>() = (1i32) as u8;
                                                        let vec38 = e;
                                                        let ptr38 = vec38.as_ptr().cast::<u8>();
                                                        let len38 = vec38.len();
                                                        *base.add(28).cast::<usize>() = len38;
                                                        *base.add(24).cast::<*mut u8>() =
                                                            ptr38.cast_mut();
                                                    }
                                                    Numbound::Unbounded => {
                                                        *base.add(20).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                            }
                                            DbValueNode::Tsrange(e) => {
                                                *base.add(0).cast::<u8>() = (31i32) as u8;
                                                let Tsrange {
                                                    start: start39,
                                                    end: end39,
                                                } = e;
                                                match start39 {
                                                    Tsbound::Included(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        let Timestamp {
                                                            date: date40,
                                                            time: time40,
                                                        } = e;
                                                        let Date {
                                                            year: year41,
                                                            month: month41,
                                                            day: day41,
                                                        } = date40;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(year41);
                                                        *base.add(16).cast::<u8>() =
                                                            (_rt::as_i32(month41)) as u8;
                                                        *base.add(17).cast::<u8>() =
                                                            (_rt::as_i32(day41)) as u8;
                                                        let Time {
                                                            hour: hour42,
                                                            minute: minute42,
                                                            second: second42,
                                                            nanosecond: nanosecond42,
                                                        } = time40;
                                                        *base.add(20).cast::<u8>() =
                                                            (_rt::as_i32(hour42)) as u8;
                                                        *base.add(21).cast::<u8>() =
                                                            (_rt::as_i32(minute42)) as u8;
                                                        *base.add(22).cast::<u8>() =
                                                            (_rt::as_i32(second42)) as u8;
                                                        *base.add(24).cast::<i32>() =
                                                            _rt::as_i32(nanosecond42);
                                                    }
                                                    Tsbound::Excluded(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        let Timestamp {
                                                            date: date43,
                                                            time: time43,
                                                        } = e;
                                                        let Date {
                                                            year: year44,
                                                            month: month44,
                                                            day: day44,
                                                        } = date43;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(year44);
                                                        *base.add(16).cast::<u8>() =
                                                            (_rt::as_i32(month44)) as u8;
                                                        *base.add(17).cast::<u8>() =
                                                            (_rt::as_i32(day44)) as u8;
                                                        let Time {
                                                            hour: hour45,
                                                            minute: minute45,
                                                            second: second45,
                                                            nanosecond: nanosecond45,
                                                        } = time43;
                                                        *base.add(20).cast::<u8>() =
                                                            (_rt::as_i32(hour45)) as u8;
                                                        *base.add(21).cast::<u8>() =
                                                            (_rt::as_i32(minute45)) as u8;
                                                        *base.add(22).cast::<u8>() =
                                                            (_rt::as_i32(second45)) as u8;
                                                        *base.add(24).cast::<i32>() =
                                                            _rt::as_i32(nanosecond45);
                                                    }
                                                    Tsbound::Unbounded => {
                                                        *base.add(8).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                                match end39 {
                                                    Tsbound::Included(e) => {
                                                        *base.add(28).cast::<u8>() = (0i32) as u8;
                                                        let Timestamp {
                                                            date: date46,
                                                            time: time46,
                                                        } = e;
                                                        let Date {
                                                            year: year47,
                                                            month: month47,
                                                            day: day47,
                                                        } = date46;
                                                        *base.add(32).cast::<i32>() =
                                                            _rt::as_i32(year47);
                                                        *base.add(36).cast::<u8>() =
                                                            (_rt::as_i32(month47)) as u8;
                                                        *base.add(37).cast::<u8>() =
                                                            (_rt::as_i32(day47)) as u8;
                                                        let Time {
                                                            hour: hour48,
                                                            minute: minute48,
                                                            second: second48,
                                                            nanosecond: nanosecond48,
                                                        } = time46;
                                                        *base.add(40).cast::<u8>() =
                                                            (_rt::as_i32(hour48)) as u8;
                                                        *base.add(41).cast::<u8>() =
                                                            (_rt::as_i32(minute48)) as u8;
                                                        *base.add(42).cast::<u8>() =
                                                            (_rt::as_i32(second48)) as u8;
                                                        *base.add(44).cast::<i32>() =
                                                            _rt::as_i32(nanosecond48);
                                                    }
                                                    Tsbound::Excluded(e) => {
                                                        *base.add(28).cast::<u8>() = (1i32) as u8;
                                                        let Timestamp {
                                                            date: date49,
                                                            time: time49,
                                                        } = e;
                                                        let Date {
                                                            year: year50,
                                                            month: month50,
                                                            day: day50,
                                                        } = date49;
                                                        *base.add(32).cast::<i32>() =
                                                            _rt::as_i32(year50);
                                                        *base.add(36).cast::<u8>() =
                                                            (_rt::as_i32(month50)) as u8;
                                                        *base.add(37).cast::<u8>() =
                                                            (_rt::as_i32(day50)) as u8;
                                                        let Time {
                                                            hour: hour51,
                                                            minute: minute51,
                                                            second: second51,
                                                            nanosecond: nanosecond51,
                                                        } = time49;
                                                        *base.add(40).cast::<u8>() =
                                                            (_rt::as_i32(hour51)) as u8;
                                                        *base.add(41).cast::<u8>() =
                                                            (_rt::as_i32(minute51)) as u8;
                                                        *base.add(42).cast::<u8>() =
                                                            (_rt::as_i32(second51)) as u8;
                                                        *base.add(44).cast::<i32>() =
                                                            _rt::as_i32(nanosecond51);
                                                    }
                                                    Tsbound::Unbounded => {
                                                        *base.add(28).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                            }
                                            DbValueNode::Tstzrange(e) => {
                                                *base.add(0).cast::<u8>() = (32i32) as u8;
                                                let Tstzrange {
                                                    start: start52,
                                                    end: end52,
                                                } = e;
                                                match start52 {
                                                    Tstzbound::Included(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        let Timestamptz {
                                                            timestamp: timestamp53,
                                                            offset: offset53,
                                                        } = e;
                                                        let Timestamp {
                                                            date: date54,
                                                            time: time54,
                                                        } = timestamp53;
                                                        let Date {
                                                            year: year55,
                                                            month: month55,
                                                            day: day55,
                                                        } = date54;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(year55);
                                                        *base.add(16).cast::<u8>() =
                                                            (_rt::as_i32(month55)) as u8;
                                                        *base.add(17).cast::<u8>() =
                                                            (_rt::as_i32(day55)) as u8;
                                                        let Time {
                                                            hour: hour56,
                                                            minute: minute56,
                                                            second: second56,
                                                            nanosecond: nanosecond56,
                                                        } = time54;
                                                        *base.add(20).cast::<u8>() =
                                                            (_rt::as_i32(hour56)) as u8;
                                                        *base.add(21).cast::<u8>() =
                                                            (_rt::as_i32(minute56)) as u8;
                                                        *base.add(22).cast::<u8>() =
                                                            (_rt::as_i32(second56)) as u8;
                                                        *base.add(24).cast::<i32>() =
                                                            _rt::as_i32(nanosecond56);
                                                        *base.add(28).cast::<i32>() =
                                                            _rt::as_i32(offset53);
                                                    }
                                                    Tstzbound::Excluded(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        let Timestamptz {
                                                            timestamp: timestamp57,
                                                            offset: offset57,
                                                        } = e;
                                                        let Timestamp {
                                                            date: date58,
                                                            time: time58,
                                                        } = timestamp57;
                                                        let Date {
                                                            year: year59,
                                                            month: month59,
                                                            day: day59,
                                                        } = date58;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(year59);
                                                        *base.add(16).cast::<u8>() =
                                                            (_rt::as_i32(month59)) as u8;
                                                        *base.add(17).cast::<u8>() =
                                                            (_rt::as_i32(day59)) as u8;
                                                        let Time {
                                                            hour: hour60,
                                                            minute: minute60,
                                                            second: second60,
                                                            nanosecond: nanosecond60,
                                                        } = time58;
                                                        *base.add(20).cast::<u8>() =
                                                            (_rt::as_i32(hour60)) as u8;
                                                        *base.add(21).cast::<u8>() =
                                                            (_rt::as_i32(minute60)) as u8;
                                                        *base.add(22).cast::<u8>() =
                                                            (_rt::as_i32(second60)) as u8;
                                                        *base.add(24).cast::<i32>() =
                                                            _rt::as_i32(nanosecond60);
                                                        *base.add(28).cast::<i32>() =
                                                            _rt::as_i32(offset57);
                                                    }
                                                    Tstzbound::Unbounded => {
                                                        *base.add(8).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                                match end52 {
                                                    Tstzbound::Included(e) => {
                                                        *base.add(32).cast::<u8>() = (0i32) as u8;
                                                        let Timestamptz {
                                                            timestamp: timestamp61,
                                                            offset: offset61,
                                                        } = e;
                                                        let Timestamp {
                                                            date: date62,
                                                            time: time62,
                                                        } = timestamp61;
                                                        let Date {
                                                            year: year63,
                                                            month: month63,
                                                            day: day63,
                                                        } = date62;
                                                        *base.add(36).cast::<i32>() =
                                                            _rt::as_i32(year63);
                                                        *base.add(40).cast::<u8>() =
                                                            (_rt::as_i32(month63)) as u8;
                                                        *base.add(41).cast::<u8>() =
                                                            (_rt::as_i32(day63)) as u8;
                                                        let Time {
                                                            hour: hour64,
                                                            minute: minute64,
                                                            second: second64,
                                                            nanosecond: nanosecond64,
                                                        } = time62;
                                                        *base.add(44).cast::<u8>() =
                                                            (_rt::as_i32(hour64)) as u8;
                                                        *base.add(45).cast::<u8>() =
                                                            (_rt::as_i32(minute64)) as u8;
                                                        *base.add(46).cast::<u8>() =
                                                            (_rt::as_i32(second64)) as u8;
                                                        *base.add(48).cast::<i32>() =
                                                            _rt::as_i32(nanosecond64);
                                                        *base.add(52).cast::<i32>() =
                                                            _rt::as_i32(offset61);
                                                    }
                                                    Tstzbound::Excluded(e) => {
                                                        *base.add(32).cast::<u8>() = (1i32) as u8;
                                                        let Timestamptz {
                                                            timestamp: timestamp65,
                                                            offset: offset65,
                                                        } = e;
                                                        let Timestamp {
                                                            date: date66,
                                                            time: time66,
                                                        } = timestamp65;
                                                        let Date {
                                                            year: year67,
                                                            month: month67,
                                                            day: day67,
                                                        } = date66;
                                                        *base.add(36).cast::<i32>() =
                                                            _rt::as_i32(year67);
                                                        *base.add(40).cast::<u8>() =
                                                            (_rt::as_i32(month67)) as u8;
                                                        *base.add(41).cast::<u8>() =
                                                            (_rt::as_i32(day67)) as u8;
                                                        let Time {
                                                            hour: hour68,
                                                            minute: minute68,
                                                            second: second68,
                                                            nanosecond: nanosecond68,
                                                        } = time66;
                                                        *base.add(44).cast::<u8>() =
                                                            (_rt::as_i32(hour68)) as u8;
                                                        *base.add(45).cast::<u8>() =
                                                            (_rt::as_i32(minute68)) as u8;
                                                        *base.add(46).cast::<u8>() =
                                                            (_rt::as_i32(second68)) as u8;
                                                        *base.add(48).cast::<i32>() =
                                                            _rt::as_i32(nanosecond68);
                                                        *base.add(52).cast::<i32>() =
                                                            _rt::as_i32(offset65);
                                                    }
                                                    Tstzbound::Unbounded => {
                                                        *base.add(32).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                            }
                                            DbValueNode::Daterange(e) => {
                                                *base.add(0).cast::<u8>() = (33i32) as u8;
                                                let Daterange {
                                                    start: start69,
                                                    end: end69,
                                                } = e;
                                                match start69 {
                                                    Datebound::Included(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        let Date {
                                                            year: year70,
                                                            month: month70,
                                                            day: day70,
                                                        } = e;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(year70);
                                                        *base.add(16).cast::<u8>() =
                                                            (_rt::as_i32(month70)) as u8;
                                                        *base.add(17).cast::<u8>() =
                                                            (_rt::as_i32(day70)) as u8;
                                                    }
                                                    Datebound::Excluded(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        let Date {
                                                            year: year71,
                                                            month: month71,
                                                            day: day71,
                                                        } = e;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(year71);
                                                        *base.add(16).cast::<u8>() =
                                                            (_rt::as_i32(month71)) as u8;
                                                        *base.add(17).cast::<u8>() =
                                                            (_rt::as_i32(day71)) as u8;
                                                    }
                                                    Datebound::Unbounded => {
                                                        *base.add(8).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                                match end69 {
                                                    Datebound::Included(e) => {
                                                        *base.add(20).cast::<u8>() = (0i32) as u8;
                                                        let Date {
                                                            year: year72,
                                                            month: month72,
                                                            day: day72,
                                                        } = e;
                                                        *base.add(24).cast::<i32>() =
                                                            _rt::as_i32(year72);
                                                        *base.add(28).cast::<u8>() =
                                                            (_rt::as_i32(month72)) as u8;
                                                        *base.add(29).cast::<u8>() =
                                                            (_rt::as_i32(day72)) as u8;
                                                    }
                                                    Datebound::Excluded(e) => {
                                                        *base.add(20).cast::<u8>() = (1i32) as u8;
                                                        let Date {
                                                            year: year73,
                                                            month: month73,
                                                            day: day73,
                                                        } = e;
                                                        *base.add(24).cast::<i32>() =
                                                            _rt::as_i32(year73);
                                                        *base.add(28).cast::<u8>() =
                                                            (_rt::as_i32(month73)) as u8;
                                                        *base.add(29).cast::<u8>() =
                                                            (_rt::as_i32(day73)) as u8;
                                                    }
                                                    Datebound::Unbounded => {
                                                        *base.add(20).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                            }
                                            DbValueNode::Money(e) => {
                                                *base.add(0).cast::<u8>() = (34i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            DbValueNode::Oid(e) => {
                                                *base.add(0).cast::<u8>() = (35i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            DbValueNode::Enumeration(e) => {
                                                *base.add(0).cast::<u8>() = (36i32) as u8;
                                                let Enumeration {
                                                    name: name74,
                                                    value: value74,
                                                } = e;
                                                let vec75 = name74;
                                                let ptr75 = vec75.as_ptr().cast::<u8>();
                                                let len75 = vec75.len();
                                                *base.add(12).cast::<usize>() = len75;
                                                *base.add(8).cast::<*mut u8>() = ptr75.cast_mut();
                                                let vec76 = value74;
                                                let ptr76 = vec76.as_ptr().cast::<u8>();
                                                let len76 = vec76.len();
                                                *base.add(20).cast::<usize>() = len76;
                                                *base.add(16).cast::<*mut u8>() = ptr76.cast_mut();
                                            }
                                            DbValueNode::Composite(e) => {
                                                *base.add(0).cast::<u8>() = (37i32) as u8;
                                                let Composite {
                                                    name: name77,
                                                    values: values77,
                                                } = e;
                                                let vec78 = name77;
                                                let ptr78 = vec78.as_ptr().cast::<u8>();
                                                let len78 = vec78.len();
                                                *base.add(12).cast::<usize>() = len78;
                                                *base.add(8).cast::<*mut u8>() = ptr78.cast_mut();
                                                let vec79 = values77;
                                                let ptr79 = vec79.as_ptr().cast::<u8>();
                                                let len79 = vec79.len();
                                                *base.add(20).cast::<usize>() = len79;
                                                *base.add(16).cast::<*mut u8>() = ptr79.cast_mut();
                                            }
                                            DbValueNode::Domain(e) => {
                                                *base.add(0).cast::<u8>() = (38i32) as u8;
                                                let Domain {
                                                    name: name80,
                                                    value: value80,
                                                } = e;
                                                let vec81 = name80;
                                                let ptr81 = vec81.as_ptr().cast::<u8>();
                                                let len81 = vec81.len();
                                                *base.add(12).cast::<usize>() = len81;
                                                *base.add(8).cast::<*mut u8>() = ptr81.cast_mut();
                                                *base.add(16).cast::<i32>() = _rt::as_i32(value80);
                                            }
                                            DbValueNode::Range(e) => {
                                                *base.add(0).cast::<u8>() = (39i32) as u8;
                                                let Range {
                                                    name: name82,
                                                    value: value82,
                                                } = e;
                                                let vec83 = name82;
                                                let ptr83 = vec83.as_ptr().cast::<u8>();
                                                let len83 = vec83.len();
                                                *base.add(12).cast::<usize>() = len83;
                                                *base.add(8).cast::<*mut u8>() = ptr83.cast_mut();
                                                let ValuesRange {
                                                    start: start84,
                                                    end: end84,
                                                } = value82;
                                                match start84 {
                                                    ValueBound::Included(e) => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    ValueBound::Excluded(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    ValueBound::Unbounded => {
                                                        *base.add(16).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                                match end84 {
                                                    ValueBound::Included(e) => {
                                                        *base.add(24).cast::<u8>() = (0i32) as u8;
                                                        *base.add(28).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    ValueBound::Excluded(e) => {
                                                        *base.add(24).cast::<u8>() = (1i32) as u8;
                                                        *base.add(28).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    ValueBound::Unbounded => {
                                                        *base.add(24).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                            }
                                            DbValueNode::Array(e) => {
                                                *base.add(0).cast::<u8>() = (40i32) as u8;
                                                let vec85 = e;
                                                let ptr85 = vec85.as_ptr().cast::<u8>();
                                                let len85 = vec85.len();
                                                *base.add(12).cast::<usize>() = len85;
                                                *base.add(8).cast::<*mut u8>() = ptr85.cast_mut();
                                            }
                                            DbValueNode::Null => {
                                                *base.add(0).cast::<u8>() = (41i32) as u8;
                                            }
                                        }
                                    }
                                }
                                *base.add(4).cast::<usize>() = len86;
                                *base.add(0).cast::<*mut u8>() = result86;
                                cleanup_list.extend_from_slice(&[(result86, layout86)]);
                            }
                        }
                        let ptr88 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-connection.execute"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result87,
                            len87,
                            ptr88,
                        );
                        let l89 = i32::from(*ptr88.add(0).cast::<u8>());
                        if layout87.size() != 0 {
                            _rt::alloc::dealloc(result87.cast(), layout87);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l89 {
                            0 => {
                                let e = {
                                    let l90 = *ptr88.add(8).cast::<i64>();

                                    l90 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l91 = i32::from(*ptr88.add(8).cast::<u8>());
                                    let v107 = match l91 {
                                        0 => {
                                            let e107 = {
                                                let l92 = *ptr88.add(12).cast::<*mut u8>();
                                                let l93 = *ptr88.add(16).cast::<usize>();
                                                let len94 = l93;
                                                let bytes94 = _rt::Vec::from_raw_parts(
                                                    l92.cast(),
                                                    len94,
                                                    len94,
                                                );

                                                _rt::string_lift(bytes94)
                                            };
                                            Error::ConnectionFailure(e107)
                                        }
                                        1 => {
                                            let e107 = {
                                                let l95 = *ptr88.add(12).cast::<*mut u8>();
                                                let l96 = *ptr88.add(16).cast::<usize>();
                                                let len97 = l96;
                                                let bytes97 = _rt::Vec::from_raw_parts(
                                                    l95.cast(),
                                                    len97,
                                                    len97,
                                                );

                                                _rt::string_lift(bytes97)
                                            };
                                            Error::QueryParameterFailure(e107)
                                        }
                                        2 => {
                                            let e107 = {
                                                let l98 = *ptr88.add(12).cast::<*mut u8>();
                                                let l99 = *ptr88.add(16).cast::<usize>();
                                                let len100 = l99;
                                                let bytes100 = _rt::Vec::from_raw_parts(
                                                    l98.cast(),
                                                    len100,
                                                    len100,
                                                );

                                                _rt::string_lift(bytes100)
                                            };
                                            Error::QueryExecutionFailure(e107)
                                        }
                                        3 => {
                                            let e107 = {
                                                let l101 = *ptr88.add(12).cast::<*mut u8>();
                                                let l102 = *ptr88.add(16).cast::<usize>();
                                                let len103 = l102;
                                                let bytes103 = _rt::Vec::from_raw_parts(
                                                    l101.cast(),
                                                    len103,
                                                    len103,
                                                );

                                                _rt::string_lift(bytes103)
                                            };
                                            Error::QueryResponseFailure(e107)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e107 = {
                                                let l104 = *ptr88.add(12).cast::<*mut u8>();
                                                let l105 = *ptr88.add(16).cast::<usize>();
                                                let len106 = l105;
                                                let bytes106 = _rt::Vec::from_raw_parts(
                                                    l104.cast(),
                                                    len106,
                                                    len106,
                                                );

                                                _rt::string_lift(bytes106)
                                            };
                                            Error::Other(e107)
                                        }
                                    };

                                    v107
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod mysql {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub enum Error {
                ConnectionFailure(_rt::String),
                QueryParameterFailure(_rt::String),
                QueryExecutionFailure(_rt::String),
                QueryResponseFailure(_rt::String),
                Other(_rt::String),
            }
            impl ::core::fmt::Debug for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Error::ConnectionFailure(e) => {
                            f.debug_tuple("Error::ConnectionFailure").field(e).finish()
                        }
                        Error::QueryParameterFailure(e) => f
                            .debug_tuple("Error::QueryParameterFailure")
                            .field(e)
                            .finish(),
                        Error::QueryExecutionFailure(e) => f
                            .debug_tuple("Error::QueryExecutionFailure")
                            .field(e)
                            .finish(),
                        Error::QueryResponseFailure(e) => f
                            .debug_tuple("Error::QueryResponseFailure")
                            .field(e)
                            .finish(),
                        Error::Other(e) => f.debug_tuple("Error::Other").field(e).finish(),
                    }
                }
            }
            impl ::core::fmt::Display for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }

            impl std::error::Error for Error {}
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Date {
                pub year: i32,
                pub month: u8,
                pub day: u8,
            }
            impl ::core::fmt::Debug for Date {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Date")
                        .field("year", &self.year)
                        .field("month", &self.month)
                        .field("day", &self.day)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Time {
                pub hour: u8,
                pub minute: u8,
                pub second: u8,
                pub nanosecond: u32,
            }
            impl ::core::fmt::Debug for Time {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Time")
                        .field("hour", &self.hour)
                        .field("minute", &self.minute)
                        .field("second", &self.second)
                        .field("nanosecond", &self.nanosecond)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Timestamp {
                pub date: Date,
                pub time: Time,
            }
            impl ::core::fmt::Debug for Timestamp {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Timestamp")
                        .field("date", &self.date)
                        .field("time", &self.time)
                        .finish()
                }
            }
            #[derive(Clone, Copy)]
            pub enum DbColumnType {
                Boolean,
                Tinyint,
                Smallint,
                Mediumint,
                Int,
                Bigint,
                TinyintUnsigned,
                SmallintUnsigned,
                MediumintUnsigned,
                IntUnsigned,
                BigintUnsigned,
                Float,
                Double,
                Decimal,
                Date,
                Datetime,
                Timestamp,
                Time,
                Year,
                Fixchar,
                Varchar,
                Tinytext,
                Text,
                Mediumtext,
                Longtext,
                Binary,
                Varbinary,
                Tinyblob,
                Blob,
                Mediumblob,
                Longblob,
                Enumeration,
                Set,
                Bit,
                Json,
            }
            impl ::core::fmt::Debug for DbColumnType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        DbColumnType::Boolean => f.debug_tuple("DbColumnType::Boolean").finish(),
                        DbColumnType::Tinyint => f.debug_tuple("DbColumnType::Tinyint").finish(),
                        DbColumnType::Smallint => f.debug_tuple("DbColumnType::Smallint").finish(),
                        DbColumnType::Mediumint => {
                            f.debug_tuple("DbColumnType::Mediumint").finish()
                        }
                        DbColumnType::Int => f.debug_tuple("DbColumnType::Int").finish(),
                        DbColumnType::Bigint => f.debug_tuple("DbColumnType::Bigint").finish(),
                        DbColumnType::TinyintUnsigned => {
                            f.debug_tuple("DbColumnType::TinyintUnsigned").finish()
                        }
                        DbColumnType::SmallintUnsigned => {
                            f.debug_tuple("DbColumnType::SmallintUnsigned").finish()
                        }
                        DbColumnType::MediumintUnsigned => {
                            f.debug_tuple("DbColumnType::MediumintUnsigned").finish()
                        }
                        DbColumnType::IntUnsigned => {
                            f.debug_tuple("DbColumnType::IntUnsigned").finish()
                        }
                        DbColumnType::BigintUnsigned => {
                            f.debug_tuple("DbColumnType::BigintUnsigned").finish()
                        }
                        DbColumnType::Float => f.debug_tuple("DbColumnType::Float").finish(),
                        DbColumnType::Double => f.debug_tuple("DbColumnType::Double").finish(),
                        DbColumnType::Decimal => f.debug_tuple("DbColumnType::Decimal").finish(),
                        DbColumnType::Date => f.debug_tuple("DbColumnType::Date").finish(),
                        DbColumnType::Datetime => f.debug_tuple("DbColumnType::Datetime").finish(),
                        DbColumnType::Timestamp => {
                            f.debug_tuple("DbColumnType::Timestamp").finish()
                        }
                        DbColumnType::Time => f.debug_tuple("DbColumnType::Time").finish(),
                        DbColumnType::Year => f.debug_tuple("DbColumnType::Year").finish(),
                        DbColumnType::Fixchar => f.debug_tuple("DbColumnType::Fixchar").finish(),
                        DbColumnType::Varchar => f.debug_tuple("DbColumnType::Varchar").finish(),
                        DbColumnType::Tinytext => f.debug_tuple("DbColumnType::Tinytext").finish(),
                        DbColumnType::Text => f.debug_tuple("DbColumnType::Text").finish(),
                        DbColumnType::Mediumtext => {
                            f.debug_tuple("DbColumnType::Mediumtext").finish()
                        }
                        DbColumnType::Longtext => f.debug_tuple("DbColumnType::Longtext").finish(),
                        DbColumnType::Binary => f.debug_tuple("DbColumnType::Binary").finish(),
                        DbColumnType::Varbinary => {
                            f.debug_tuple("DbColumnType::Varbinary").finish()
                        }
                        DbColumnType::Tinyblob => f.debug_tuple("DbColumnType::Tinyblob").finish(),
                        DbColumnType::Blob => f.debug_tuple("DbColumnType::Blob").finish(),
                        DbColumnType::Mediumblob => {
                            f.debug_tuple("DbColumnType::Mediumblob").finish()
                        }
                        DbColumnType::Longblob => f.debug_tuple("DbColumnType::Longblob").finish(),
                        DbColumnType::Enumeration => {
                            f.debug_tuple("DbColumnType::Enumeration").finish()
                        }
                        DbColumnType::Set => f.debug_tuple("DbColumnType::Set").finish(),
                        DbColumnType::Bit => f.debug_tuple("DbColumnType::Bit").finish(),
                        DbColumnType::Json => f.debug_tuple("DbColumnType::Json").finish(),
                    }
                }
            }
            #[derive(Clone)]
            pub struct DbColumn {
                pub ordinal: u64,
                pub name: _rt::String,
                pub db_type: DbColumnType,
                pub db_type_name: _rt::String,
            }
            impl ::core::fmt::Debug for DbColumn {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DbColumn")
                        .field("ordinal", &self.ordinal)
                        .field("name", &self.name)
                        .field("db-type", &self.db_type)
                        .field("db-type-name", &self.db_type_name)
                        .finish()
                }
            }
            /// Value descriptor for a single database value
            #[derive(Clone)]
            pub enum DbValue {
                Boolean(bool),
                Tinyint(i8),
                Smallint(i16),
                /// s24
                Mediumint(i32),
                Int(i32),
                Bigint(i64),
                TinyintUnsigned(u8),
                SmallintUnsigned(u16),
                /// u24
                MediumintUnsigned(u32),
                IntUnsigned(u32),
                BigintUnsigned(u64),
                Float(f32),
                Double(f64),
                Decimal(_rt::String),
                Date(Date),
                Datetime(Timestamp),
                Timestamp(Timestamp),
                Time(Time),
                Year(u16),
                Fixchar(_rt::String),
                Varchar(_rt::String),
                Tinytext(_rt::String),
                Text(_rt::String),
                Mediumtext(_rt::String),
                Longtext(_rt::String),
                Binary(_rt::Vec<u8>),
                Varbinary(_rt::Vec<u8>),
                Tinyblob(_rt::Vec<u8>),
                Blob(_rt::Vec<u8>),
                Mediumblob(_rt::Vec<u8>),
                Longblob(_rt::Vec<u8>),
                Enumeration(_rt::String),
                Set(_rt::String),
                Bit(_rt::Vec<bool>),
                Json(_rt::String),
                Null,
            }
            impl ::core::fmt::Debug for DbValue {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        DbValue::Boolean(e) => f.debug_tuple("DbValue::Boolean").field(e).finish(),
                        DbValue::Tinyint(e) => f.debug_tuple("DbValue::Tinyint").field(e).finish(),
                        DbValue::Smallint(e) => {
                            f.debug_tuple("DbValue::Smallint").field(e).finish()
                        }
                        DbValue::Mediumint(e) => {
                            f.debug_tuple("DbValue::Mediumint").field(e).finish()
                        }
                        DbValue::Int(e) => f.debug_tuple("DbValue::Int").field(e).finish(),
                        DbValue::Bigint(e) => f.debug_tuple("DbValue::Bigint").field(e).finish(),
                        DbValue::TinyintUnsigned(e) => {
                            f.debug_tuple("DbValue::TinyintUnsigned").field(e).finish()
                        }
                        DbValue::SmallintUnsigned(e) => {
                            f.debug_tuple("DbValue::SmallintUnsigned").field(e).finish()
                        }
                        DbValue::MediumintUnsigned(e) => f
                            .debug_tuple("DbValue::MediumintUnsigned")
                            .field(e)
                            .finish(),
                        DbValue::IntUnsigned(e) => {
                            f.debug_tuple("DbValue::IntUnsigned").field(e).finish()
                        }
                        DbValue::BigintUnsigned(e) => {
                            f.debug_tuple("DbValue::BigintUnsigned").field(e).finish()
                        }
                        DbValue::Float(e) => f.debug_tuple("DbValue::Float").field(e).finish(),
                        DbValue::Double(e) => f.debug_tuple("DbValue::Double").field(e).finish(),
                        DbValue::Decimal(e) => f.debug_tuple("DbValue::Decimal").field(e).finish(),
                        DbValue::Date(e) => f.debug_tuple("DbValue::Date").field(e).finish(),
                        DbValue::Datetime(e) => {
                            f.debug_tuple("DbValue::Datetime").field(e).finish()
                        }
                        DbValue::Timestamp(e) => {
                            f.debug_tuple("DbValue::Timestamp").field(e).finish()
                        }
                        DbValue::Time(e) => f.debug_tuple("DbValue::Time").field(e).finish(),
                        DbValue::Year(e) => f.debug_tuple("DbValue::Year").field(e).finish(),
                        DbValue::Fixchar(e) => f.debug_tuple("DbValue::Fixchar").field(e).finish(),
                        DbValue::Varchar(e) => f.debug_tuple("DbValue::Varchar").field(e).finish(),
                        DbValue::Tinytext(e) => {
                            f.debug_tuple("DbValue::Tinytext").field(e).finish()
                        }
                        DbValue::Text(e) => f.debug_tuple("DbValue::Text").field(e).finish(),
                        DbValue::Mediumtext(e) => {
                            f.debug_tuple("DbValue::Mediumtext").field(e).finish()
                        }
                        DbValue::Longtext(e) => {
                            f.debug_tuple("DbValue::Longtext").field(e).finish()
                        }
                        DbValue::Binary(e) => f.debug_tuple("DbValue::Binary").field(e).finish(),
                        DbValue::Varbinary(e) => {
                            f.debug_tuple("DbValue::Varbinary").field(e).finish()
                        }
                        DbValue::Tinyblob(e) => {
                            f.debug_tuple("DbValue::Tinyblob").field(e).finish()
                        }
                        DbValue::Blob(e) => f.debug_tuple("DbValue::Blob").field(e).finish(),
                        DbValue::Mediumblob(e) => {
                            f.debug_tuple("DbValue::Mediumblob").field(e).finish()
                        }
                        DbValue::Longblob(e) => {
                            f.debug_tuple("DbValue::Longblob").field(e).finish()
                        }
                        DbValue::Enumeration(e) => {
                            f.debug_tuple("DbValue::Enumeration").field(e).finish()
                        }
                        DbValue::Set(e) => f.debug_tuple("DbValue::Set").field(e).finish(),
                        DbValue::Bit(e) => f.debug_tuple("DbValue::Bit").field(e).finish(),
                        DbValue::Json(e) => f.debug_tuple("DbValue::Json").field(e).finish(),
                        DbValue::Null => f.debug_tuple("DbValue::Null").finish(),
                    }
                }
            }
            /// A single row of values
            #[derive(Clone)]
            pub struct DbRow {
                pub values: _rt::Vec<DbValue>,
            }
            impl ::core::fmt::Debug for DbRow {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DbRow")
                        .field("values", &self.values)
                        .finish()
                }
            }
            /// A potentially very large and lazy stream of rows:

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct DbResultSet {
                handle: _rt::Resource<DbResultSet>,
            }

            impl DbResultSet {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for DbResultSet {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]db-result-set"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct DbConnection {
                handle: _rt::Resource<DbConnection>,
            }

            impl DbConnection {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for DbConnection {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]db-connection"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl DbResultSet {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_columns(&self) -> _rt::Vec<DbColumn> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-result-set.get-columns"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base12 = l1;
                        let len12 = l2;
                        let mut result12 = _rt::Vec::with_capacity(len12);
                        for i in 0..len12 {
                            let base = base12.add(i * 32);
                            let e12 = {
                                let l3 = *base.add(0).cast::<i64>();
                                let l4 = *base.add(8).cast::<*mut u8>();
                                let l5 = *base.add(12).cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                                let l7 = i32::from(*base.add(16).cast::<u8>());
                                let v8 = match l7 {
                                    0 => DbColumnType::Boolean,
                                    1 => DbColumnType::Tinyint,
                                    2 => DbColumnType::Smallint,
                                    3 => DbColumnType::Mediumint,
                                    4 => DbColumnType::Int,
                                    5 => DbColumnType::Bigint,
                                    6 => DbColumnType::TinyintUnsigned,
                                    7 => DbColumnType::SmallintUnsigned,
                                    8 => DbColumnType::MediumintUnsigned,
                                    9 => DbColumnType::IntUnsigned,
                                    10 => DbColumnType::BigintUnsigned,
                                    11 => DbColumnType::Float,
                                    12 => DbColumnType::Double,
                                    13 => DbColumnType::Decimal,
                                    14 => DbColumnType::Date,
                                    15 => DbColumnType::Datetime,
                                    16 => DbColumnType::Timestamp,
                                    17 => DbColumnType::Time,
                                    18 => DbColumnType::Year,
                                    19 => DbColumnType::Fixchar,
                                    20 => DbColumnType::Varchar,
                                    21 => DbColumnType::Tinytext,
                                    22 => DbColumnType::Text,
                                    23 => DbColumnType::Mediumtext,
                                    24 => DbColumnType::Longtext,
                                    25 => DbColumnType::Binary,
                                    26 => DbColumnType::Varbinary,
                                    27 => DbColumnType::Tinyblob,
                                    28 => DbColumnType::Blob,
                                    29 => DbColumnType::Mediumblob,
                                    30 => DbColumnType::Longblob,
                                    31 => DbColumnType::Enumeration,
                                    32 => DbColumnType::Set,
                                    33 => DbColumnType::Bit,
                                    n => {
                                        debug_assert_eq!(n, 34, "invalid enum discriminant");
                                        DbColumnType::Json
                                    }
                                };
                                let l9 = *base.add(20).cast::<*mut u8>();
                                let l10 = *base.add(24).cast::<usize>();
                                let len11 = l10;
                                let bytes11 = _rt::Vec::from_raw_parts(l9.cast(), len11, len11);

                                DbColumn {
                                    ordinal: l3 as u64,
                                    name: _rt::string_lift(bytes6),
                                    db_type: v8,
                                    db_type_name: _rt::string_lift(bytes11),
                                }
                            };
                            result12.push(e12);
                        }
                        _rt::cabi_dealloc(base12, len12 * 32, 8);
                        result12
                    }
                }
            }
            impl DbResultSet {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_next(&self) -> Option<_rt::Vec<DbRow>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-result-set.get-next"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let base96 = l2;
                                    let len96 = l3;
                                    let mut result96 = _rt::Vec::with_capacity(len96);
                                    for i in 0..len96 {
                                        let base = base96.add(i * 8);
                                        let e96 = {
                                            let l4 = *base.add(0).cast::<*mut u8>();
                                            let l5 = *base.add(4).cast::<usize>();
                                            let base95 = l4;
                                            let len95 = l5;
                                            let mut result95 = _rt::Vec::with_capacity(len95);
                                            for i in 0..len95 {
                                                let base = base95.add(i * 24);
                                                let e95 = {
                                                    let l6 = i32::from(*base.add(0).cast::<u8>());
                                                    let v94 = match l6 {
                                                        0 => {
                                                            let e94 = {
                                                                let l7 = i32::from(
                                                                    *base.add(8).cast::<u8>(),
                                                                );

                                                                _rt::bool_lift(l7 as u8)
                                                            };
                                                            DbValue::Boolean(e94)
                                                        }
                                                        1 => {
                                                            let e94 = {
                                                                let l8 = i32::from(
                                                                    *base.add(8).cast::<i8>(),
                                                                );

                                                                l8 as i8
                                                            };
                                                            DbValue::Tinyint(e94)
                                                        }
                                                        2 => {
                                                            let e94 = {
                                                                let l9 = i32::from(
                                                                    *base.add(8).cast::<i16>(),
                                                                );

                                                                l9 as i16
                                                            };
                                                            DbValue::Smallint(e94)
                                                        }
                                                        3 => {
                                                            let e94 = {
                                                                let l10 =
                                                                    *base.add(8).cast::<i32>();

                                                                l10
                                                            };
                                                            DbValue::Mediumint(e94)
                                                        }
                                                        4 => {
                                                            let e94 = {
                                                                let l11 =
                                                                    *base.add(8).cast::<i32>();

                                                                l11
                                                            };
                                                            DbValue::Int(e94)
                                                        }
                                                        5 => {
                                                            let e94 = {
                                                                let l12 =
                                                                    *base.add(8).cast::<i64>();

                                                                l12
                                                            };
                                                            DbValue::Bigint(e94)
                                                        }
                                                        6 => {
                                                            let e94 = {
                                                                let l13 = i32::from(
                                                                    *base.add(8).cast::<u8>(),
                                                                );

                                                                l13 as u8
                                                            };
                                                            DbValue::TinyintUnsigned(e94)
                                                        }
                                                        7 => {
                                                            let e94 = {
                                                                let l14 = i32::from(
                                                                    *base.add(8).cast::<u16>(),
                                                                );

                                                                l14 as u16
                                                            };
                                                            DbValue::SmallintUnsigned(e94)
                                                        }
                                                        8 => {
                                                            let e94 = {
                                                                let l15 =
                                                                    *base.add(8).cast::<i32>();

                                                                l15 as u32
                                                            };
                                                            DbValue::MediumintUnsigned(e94)
                                                        }
                                                        9 => {
                                                            let e94 = {
                                                                let l16 =
                                                                    *base.add(8).cast::<i32>();

                                                                l16 as u32
                                                            };
                                                            DbValue::IntUnsigned(e94)
                                                        }
                                                        10 => {
                                                            let e94 = {
                                                                let l17 =
                                                                    *base.add(8).cast::<i64>();

                                                                l17 as u64
                                                            };
                                                            DbValue::BigintUnsigned(e94)
                                                        }
                                                        11 => {
                                                            let e94 = {
                                                                let l18 =
                                                                    *base.add(8).cast::<f32>();

                                                                l18
                                                            };
                                                            DbValue::Float(e94)
                                                        }
                                                        12 => {
                                                            let e94 = {
                                                                let l19 =
                                                                    *base.add(8).cast::<f64>();

                                                                l19
                                                            };
                                                            DbValue::Double(e94)
                                                        }
                                                        13 => {
                                                            let e94 = {
                                                                let l20 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l21 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len22 = l21;
                                                                let bytes22 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l20.cast(),
                                                                        len22,
                                                                        len22,
                                                                    );

                                                                _rt::string_lift(bytes22)
                                                            };
                                                            DbValue::Decimal(e94)
                                                        }
                                                        14 => {
                                                            let e94 = {
                                                                let l23 =
                                                                    *base.add(8).cast::<i32>();
                                                                let l24 = i32::from(
                                                                    *base.add(12).cast::<u8>(),
                                                                );
                                                                let l25 = i32::from(
                                                                    *base.add(13).cast::<u8>(),
                                                                );

                                                                Date {
                                                                    year: l23,
                                                                    month: l24 as u8,
                                                                    day: l25 as u8,
                                                                }
                                                            };
                                                            DbValue::Date(e94)
                                                        }
                                                        15 => {
                                                            let e94 = {
                                                                let l26 =
                                                                    *base.add(8).cast::<i32>();
                                                                let l27 = i32::from(
                                                                    *base.add(12).cast::<u8>(),
                                                                );
                                                                let l28 = i32::from(
                                                                    *base.add(13).cast::<u8>(),
                                                                );
                                                                let l29 = i32::from(
                                                                    *base.add(16).cast::<u8>(),
                                                                );
                                                                let l30 = i32::from(
                                                                    *base.add(17).cast::<u8>(),
                                                                );
                                                                let l31 = i32::from(
                                                                    *base.add(18).cast::<u8>(),
                                                                );
                                                                let l32 =
                                                                    *base.add(20).cast::<i32>();

                                                                Timestamp {
                                                                    date: Date {
                                                                        year: l26,
                                                                        month: l27 as u8,
                                                                        day: l28 as u8,
                                                                    },
                                                                    time: Time {
                                                                        hour: l29 as u8,
                                                                        minute: l30 as u8,
                                                                        second: l31 as u8,
                                                                        nanosecond: l32 as u32,
                                                                    },
                                                                }
                                                            };
                                                            DbValue::Datetime(e94)
                                                        }
                                                        16 => {
                                                            let e94 = {
                                                                let l33 =
                                                                    *base.add(8).cast::<i32>();
                                                                let l34 = i32::from(
                                                                    *base.add(12).cast::<u8>(),
                                                                );
                                                                let l35 = i32::from(
                                                                    *base.add(13).cast::<u8>(),
                                                                );
                                                                let l36 = i32::from(
                                                                    *base.add(16).cast::<u8>(),
                                                                );
                                                                let l37 = i32::from(
                                                                    *base.add(17).cast::<u8>(),
                                                                );
                                                                let l38 = i32::from(
                                                                    *base.add(18).cast::<u8>(),
                                                                );
                                                                let l39 =
                                                                    *base.add(20).cast::<i32>();

                                                                Timestamp {
                                                                    date: Date {
                                                                        year: l33,
                                                                        month: l34 as u8,
                                                                        day: l35 as u8,
                                                                    },
                                                                    time: Time {
                                                                        hour: l36 as u8,
                                                                        minute: l37 as u8,
                                                                        second: l38 as u8,
                                                                        nanosecond: l39 as u32,
                                                                    },
                                                                }
                                                            };
                                                            DbValue::Timestamp(e94)
                                                        }
                                                        17 => {
                                                            let e94 = {
                                                                let l40 = i32::from(
                                                                    *base.add(8).cast::<u8>(),
                                                                );
                                                                let l41 = i32::from(
                                                                    *base.add(9).cast::<u8>(),
                                                                );
                                                                let l42 = i32::from(
                                                                    *base.add(10).cast::<u8>(),
                                                                );
                                                                let l43 =
                                                                    *base.add(12).cast::<i32>();

                                                                Time {
                                                                    hour: l40 as u8,
                                                                    minute: l41 as u8,
                                                                    second: l42 as u8,
                                                                    nanosecond: l43 as u32,
                                                                }
                                                            };
                                                            DbValue::Time(e94)
                                                        }
                                                        18 => {
                                                            let e94 = {
                                                                let l44 = i32::from(
                                                                    *base.add(8).cast::<u16>(),
                                                                );

                                                                l44 as u16
                                                            };
                                                            DbValue::Year(e94)
                                                        }
                                                        19 => {
                                                            let e94 = {
                                                                let l45 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l46 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len47 = l46;
                                                                let bytes47 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l45.cast(),
                                                                        len47,
                                                                        len47,
                                                                    );

                                                                _rt::string_lift(bytes47)
                                                            };
                                                            DbValue::Fixchar(e94)
                                                        }
                                                        20 => {
                                                            let e94 = {
                                                                let l48 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l49 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len50 = l49;
                                                                let bytes50 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l48.cast(),
                                                                        len50,
                                                                        len50,
                                                                    );

                                                                _rt::string_lift(bytes50)
                                                            };
                                                            DbValue::Varchar(e94)
                                                        }
                                                        21 => {
                                                            let e94 = {
                                                                let l51 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l52 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len53 = l52;
                                                                let bytes53 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l51.cast(),
                                                                        len53,
                                                                        len53,
                                                                    );

                                                                _rt::string_lift(bytes53)
                                                            };
                                                            DbValue::Tinytext(e94)
                                                        }
                                                        22 => {
                                                            let e94 = {
                                                                let l54 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l55 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len56 = l55;
                                                                let bytes56 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l54.cast(),
                                                                        len56,
                                                                        len56,
                                                                    );

                                                                _rt::string_lift(bytes56)
                                                            };
                                                            DbValue::Text(e94)
                                                        }
                                                        23 => {
                                                            let e94 = {
                                                                let l57 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l58 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len59 = l58;
                                                                let bytes59 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l57.cast(),
                                                                        len59,
                                                                        len59,
                                                                    );

                                                                _rt::string_lift(bytes59)
                                                            };
                                                            DbValue::Mediumtext(e94)
                                                        }
                                                        24 => {
                                                            let e94 = {
                                                                let l60 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l61 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len62 = l61;
                                                                let bytes62 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l60.cast(),
                                                                        len62,
                                                                        len62,
                                                                    );

                                                                _rt::string_lift(bytes62)
                                                            };
                                                            DbValue::Longtext(e94)
                                                        }
                                                        25 => {
                                                            let e94 = {
                                                                let l63 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l64 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len65 = l64;

                                                                _rt::Vec::from_raw_parts(
                                                                    l63.cast(),
                                                                    len65,
                                                                    len65,
                                                                )
                                                            };
                                                            DbValue::Binary(e94)
                                                        }
                                                        26 => {
                                                            let e94 = {
                                                                let l66 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l67 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len68 = l67;

                                                                _rt::Vec::from_raw_parts(
                                                                    l66.cast(),
                                                                    len68,
                                                                    len68,
                                                                )
                                                            };
                                                            DbValue::Varbinary(e94)
                                                        }
                                                        27 => {
                                                            let e94 = {
                                                                let l69 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l70 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len71 = l70;

                                                                _rt::Vec::from_raw_parts(
                                                                    l69.cast(),
                                                                    len71,
                                                                    len71,
                                                                )
                                                            };
                                                            DbValue::Tinyblob(e94)
                                                        }
                                                        28 => {
                                                            let e94 = {
                                                                let l72 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l73 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len74 = l73;

                                                                _rt::Vec::from_raw_parts(
                                                                    l72.cast(),
                                                                    len74,
                                                                    len74,
                                                                )
                                                            };
                                                            DbValue::Blob(e94)
                                                        }
                                                        29 => {
                                                            let e94 = {
                                                                let l75 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l76 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len77 = l76;

                                                                _rt::Vec::from_raw_parts(
                                                                    l75.cast(),
                                                                    len77,
                                                                    len77,
                                                                )
                                                            };
                                                            DbValue::Mediumblob(e94)
                                                        }
                                                        30 => {
                                                            let e94 = {
                                                                let l78 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l79 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len80 = l79;

                                                                _rt::Vec::from_raw_parts(
                                                                    l78.cast(),
                                                                    len80,
                                                                    len80,
                                                                )
                                                            };
                                                            DbValue::Longblob(e94)
                                                        }
                                                        31 => {
                                                            let e94 = {
                                                                let l81 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l82 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len83 = l82;
                                                                let bytes83 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l81.cast(),
                                                                        len83,
                                                                        len83,
                                                                    );

                                                                _rt::string_lift(bytes83)
                                                            };
                                                            DbValue::Enumeration(e94)
                                                        }
                                                        32 => {
                                                            let e94 = {
                                                                let l84 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l85 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len86 = l85;
                                                                let bytes86 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l84.cast(),
                                                                        len86,
                                                                        len86,
                                                                    );

                                                                _rt::string_lift(bytes86)
                                                            };
                                                            DbValue::Set(e94)
                                                        }
                                                        33 => {
                                                            let e94 = {
                                                                let l87 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l88 =
                                                                    *base.add(12).cast::<usize>();
                                                                let base90 = l87;
                                                                let len90 = l88;
                                                                let mut result90 =
                                                                    _rt::Vec::with_capacity(len90);
                                                                for i in 0..len90 {
                                                                    let base = base90.add(i * 1);
                                                                    let e90 = {
                                                                        let l89 = i32::from(
                                                                            *base
                                                                                .add(0)
                                                                                .cast::<u8>(),
                                                                        );

                                                                        _rt::bool_lift(l89 as u8)
                                                                    };
                                                                    result90.push(e90);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base90,
                                                                    len90 * 1,
                                                                    1,
                                                                );

                                                                result90
                                                            };
                                                            DbValue::Bit(e94)
                                                        }
                                                        34 => {
                                                            let e94 = {
                                                                let l91 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l92 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len93 = l92;
                                                                let bytes93 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l91.cast(),
                                                                        len93,
                                                                        len93,
                                                                    );

                                                                _rt::string_lift(bytes93)
                                                            };
                                                            DbValue::Json(e94)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(
                                                                n, 35,
                                                                "invalid enum discriminant"
                                                            );
                                                            DbValue::Null
                                                        }
                                                    };

                                                    v94
                                                };
                                                result95.push(e95);
                                            }
                                            _rt::cabi_dealloc(base95, len95 * 24, 8);

                                            DbRow { values: result95 }
                                        };
                                        result96.push(e96);
                                    }
                                    _rt::cabi_dealloc(base96, len96 * 8, 4);

                                    result96
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn open(address: &str) -> Result<DbConnection, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = address;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[static]db-connection.open"]
                            fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<i32>();

                                    DbConnection::from_handle(l3 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr1.add(4).cast::<u8>());
                                    let v20 = match l4 {
                                        0 => {
                                            let e20 = {
                                                let l5 = *ptr1.add(8).cast::<*mut u8>();
                                                let l6 = *ptr1.add(12).cast::<usize>();
                                                let len7 = l6;
                                                let bytes7 =
                                                    _rt::Vec::from_raw_parts(l5.cast(), len7, len7);

                                                _rt::string_lift(bytes7)
                                            };
                                            Error::ConnectionFailure(e20)
                                        }
                                        1 => {
                                            let e20 = {
                                                let l8 = *ptr1.add(8).cast::<*mut u8>();
                                                let l9 = *ptr1.add(12).cast::<usize>();
                                                let len10 = l9;
                                                let bytes10 = _rt::Vec::from_raw_parts(
                                                    l8.cast(),
                                                    len10,
                                                    len10,
                                                );

                                                _rt::string_lift(bytes10)
                                            };
                                            Error::QueryParameterFailure(e20)
                                        }
                                        2 => {
                                            let e20 = {
                                                let l11 = *ptr1.add(8).cast::<*mut u8>();
                                                let l12 = *ptr1.add(12).cast::<usize>();
                                                let len13 = l12;
                                                let bytes13 = _rt::Vec::from_raw_parts(
                                                    l11.cast(),
                                                    len13,
                                                    len13,
                                                );

                                                _rt::string_lift(bytes13)
                                            };
                                            Error::QueryExecutionFailure(e20)
                                        }
                                        3 => {
                                            let e20 = {
                                                let l14 = *ptr1.add(8).cast::<*mut u8>();
                                                let l15 = *ptr1.add(12).cast::<usize>();
                                                let len16 = l15;
                                                let bytes16 = _rt::Vec::from_raw_parts(
                                                    l14.cast(),
                                                    len16,
                                                    len16,
                                                );

                                                _rt::string_lift(bytes16)
                                            };
                                            Error::QueryResponseFailure(e20)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e20 = {
                                                let l17 = *ptr1.add(8).cast::<*mut u8>();
                                                let l18 = *ptr1.add(12).cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );

                                                _rt::string_lift(bytes19)
                                            };
                                            Error::Other(e20)
                                        }
                                    };

                                    v20
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn query(
                    &self,
                    statement: &str,
                    params: &[DbValue],
                ) -> Result<DbResultSet, Error> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = statement;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec26 = params;
                        let len26 = vec26.len();
                        let layout26 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec26.len() * 24, 8);
                        let result26 = if layout26.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout26).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout26);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec26.into_iter().enumerate() {
                            let base = result26.add(i * 24);
                            {
                                match e {
                                    DbValue::Boolean(e) => {
                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                        *base.add(8).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        })
                                            as u8;
                                    }
                                    DbValue::Tinyint(e) => {
                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::Smallint(e) => {
                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Mediumint(e) => {
                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Int(e) => {
                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Bigint(e) => {
                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::TinyintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (6i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::SmallintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (7i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::MediumintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (8i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::IntUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (9i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::BigintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (10i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Float(e) => {
                                        *base.add(0).cast::<u8>() = (11i32) as u8;
                                        *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                    }
                                    DbValue::Double(e) => {
                                        *base.add(0).cast::<u8>() = (12i32) as u8;
                                        *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    DbValue::Decimal(e) => {
                                        *base.add(0).cast::<u8>() = (13i32) as u8;
                                        let vec1 = e;
                                        let ptr1 = vec1.as_ptr().cast::<u8>();
                                        let len1 = vec1.len();
                                        *base.add(12).cast::<usize>() = len1;
                                        *base.add(8).cast::<*mut u8>() = ptr1.cast_mut();
                                    }
                                    DbValue::Date(e) => {
                                        *base.add(0).cast::<u8>() = (14i32) as u8;
                                        let Date {
                                            year: year2,
                                            month: month2,
                                            day: day2,
                                        } = e;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year2);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month2)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day2)) as u8;
                                    }
                                    DbValue::Datetime(e) => {
                                        *base.add(0).cast::<u8>() = (15i32) as u8;
                                        let Timestamp {
                                            date: date3,
                                            time: time3,
                                        } = e;
                                        let Date {
                                            year: year4,
                                            month: month4,
                                            day: day4,
                                        } = date3;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year4);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month4)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day4)) as u8;
                                        let Time {
                                            hour: hour5,
                                            minute: minute5,
                                            second: second5,
                                            nanosecond: nanosecond5,
                                        } = time3;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour5)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute5)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second5)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond5);
                                    }
                                    DbValue::Timestamp(e) => {
                                        *base.add(0).cast::<u8>() = (16i32) as u8;
                                        let Timestamp {
                                            date: date6,
                                            time: time6,
                                        } = e;
                                        let Date {
                                            year: year7,
                                            month: month7,
                                            day: day7,
                                        } = date6;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year7);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month7)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day7)) as u8;
                                        let Time {
                                            hour: hour8,
                                            minute: minute8,
                                            second: second8,
                                            nanosecond: nanosecond8,
                                        } = time6;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour8)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute8)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second8)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond8);
                                    }
                                    DbValue::Time(e) => {
                                        *base.add(0).cast::<u8>() = (17i32) as u8;
                                        let Time {
                                            hour: hour9,
                                            minute: minute9,
                                            second: second9,
                                            nanosecond: nanosecond9,
                                        } = e;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(hour9)) as u8;
                                        *base.add(9).cast::<u8>() = (_rt::as_i32(minute9)) as u8;
                                        *base.add(10).cast::<u8>() = (_rt::as_i32(second9)) as u8;
                                        *base.add(12).cast::<i32>() = _rt::as_i32(nanosecond9);
                                    }
                                    DbValue::Year(e) => {
                                        *base.add(0).cast::<u8>() = (18i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Fixchar(e) => {
                                        *base.add(0).cast::<u8>() = (19i32) as u8;
                                        let vec10 = e;
                                        let ptr10 = vec10.as_ptr().cast::<u8>();
                                        let len10 = vec10.len();
                                        *base.add(12).cast::<usize>() = len10;
                                        *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                    }
                                    DbValue::Varchar(e) => {
                                        *base.add(0).cast::<u8>() = (20i32) as u8;
                                        let vec11 = e;
                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                        let len11 = vec11.len();
                                        *base.add(12).cast::<usize>() = len11;
                                        *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                    }
                                    DbValue::Tinytext(e) => {
                                        *base.add(0).cast::<u8>() = (21i32) as u8;
                                        let vec12 = e;
                                        let ptr12 = vec12.as_ptr().cast::<u8>();
                                        let len12 = vec12.len();
                                        *base.add(12).cast::<usize>() = len12;
                                        *base.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                    }
                                    DbValue::Text(e) => {
                                        *base.add(0).cast::<u8>() = (22i32) as u8;
                                        let vec13 = e;
                                        let ptr13 = vec13.as_ptr().cast::<u8>();
                                        let len13 = vec13.len();
                                        *base.add(12).cast::<usize>() = len13;
                                        *base.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                    }
                                    DbValue::Mediumtext(e) => {
                                        *base.add(0).cast::<u8>() = (23i32) as u8;
                                        let vec14 = e;
                                        let ptr14 = vec14.as_ptr().cast::<u8>();
                                        let len14 = vec14.len();
                                        *base.add(12).cast::<usize>() = len14;
                                        *base.add(8).cast::<*mut u8>() = ptr14.cast_mut();
                                    }
                                    DbValue::Longtext(e) => {
                                        *base.add(0).cast::<u8>() = (24i32) as u8;
                                        let vec15 = e;
                                        let ptr15 = vec15.as_ptr().cast::<u8>();
                                        let len15 = vec15.len();
                                        *base.add(12).cast::<usize>() = len15;
                                        *base.add(8).cast::<*mut u8>() = ptr15.cast_mut();
                                    }
                                    DbValue::Binary(e) => {
                                        *base.add(0).cast::<u8>() = (25i32) as u8;
                                        let vec16 = e;
                                        let ptr16 = vec16.as_ptr().cast::<u8>();
                                        let len16 = vec16.len();
                                        *base.add(12).cast::<usize>() = len16;
                                        *base.add(8).cast::<*mut u8>() = ptr16.cast_mut();
                                    }
                                    DbValue::Varbinary(e) => {
                                        *base.add(0).cast::<u8>() = (26i32) as u8;
                                        let vec17 = e;
                                        let ptr17 = vec17.as_ptr().cast::<u8>();
                                        let len17 = vec17.len();
                                        *base.add(12).cast::<usize>() = len17;
                                        *base.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                    }
                                    DbValue::Tinyblob(e) => {
                                        *base.add(0).cast::<u8>() = (27i32) as u8;
                                        let vec18 = e;
                                        let ptr18 = vec18.as_ptr().cast::<u8>();
                                        let len18 = vec18.len();
                                        *base.add(12).cast::<usize>() = len18;
                                        *base.add(8).cast::<*mut u8>() = ptr18.cast_mut();
                                    }
                                    DbValue::Blob(e) => {
                                        *base.add(0).cast::<u8>() = (28i32) as u8;
                                        let vec19 = e;
                                        let ptr19 = vec19.as_ptr().cast::<u8>();
                                        let len19 = vec19.len();
                                        *base.add(12).cast::<usize>() = len19;
                                        *base.add(8).cast::<*mut u8>() = ptr19.cast_mut();
                                    }
                                    DbValue::Mediumblob(e) => {
                                        *base.add(0).cast::<u8>() = (29i32) as u8;
                                        let vec20 = e;
                                        let ptr20 = vec20.as_ptr().cast::<u8>();
                                        let len20 = vec20.len();
                                        *base.add(12).cast::<usize>() = len20;
                                        *base.add(8).cast::<*mut u8>() = ptr20.cast_mut();
                                    }
                                    DbValue::Longblob(e) => {
                                        *base.add(0).cast::<u8>() = (30i32) as u8;
                                        let vec21 = e;
                                        let ptr21 = vec21.as_ptr().cast::<u8>();
                                        let len21 = vec21.len();
                                        *base.add(12).cast::<usize>() = len21;
                                        *base.add(8).cast::<*mut u8>() = ptr21.cast_mut();
                                    }
                                    DbValue::Enumeration(e) => {
                                        *base.add(0).cast::<u8>() = (31i32) as u8;
                                        let vec22 = e;
                                        let ptr22 = vec22.as_ptr().cast::<u8>();
                                        let len22 = vec22.len();
                                        *base.add(12).cast::<usize>() = len22;
                                        *base.add(8).cast::<*mut u8>() = ptr22.cast_mut();
                                    }
                                    DbValue::Set(e) => {
                                        *base.add(0).cast::<u8>() = (32i32) as u8;
                                        let vec23 = e;
                                        let ptr23 = vec23.as_ptr().cast::<u8>();
                                        let len23 = vec23.len();
                                        *base.add(12).cast::<usize>() = len23;
                                        *base.add(8).cast::<*mut u8>() = ptr23.cast_mut();
                                    }
                                    DbValue::Bit(e) => {
                                        *base.add(0).cast::<u8>() = (33i32) as u8;
                                        let vec24 = e;
                                        let len24 = vec24.len();
                                        let layout24 =
                                            _rt::alloc::Layout::from_size_align_unchecked(
                                                vec24.len() * 1,
                                                1,
                                            );
                                        let result24 = if layout24.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout24).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout24);
                                            }
                                            ptr
                                        } else {
                                            {
                                                ::core::ptr::null_mut()
                                            }
                                        };
                                        for (i, e) in vec24.into_iter().enumerate() {
                                            let base = result24.add(i * 1);
                                            {
                                                *base.add(0).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len24;
                                        *base.add(8).cast::<*mut u8>() = result24;
                                        cleanup_list.extend_from_slice(&[(result24, layout24)]);
                                    }
                                    DbValue::Json(e) => {
                                        *base.add(0).cast::<u8>() = (34i32) as u8;
                                        let vec25 = e;
                                        let ptr25 = vec25.as_ptr().cast::<u8>();
                                        let len25 = vec25.len();
                                        *base.add(12).cast::<usize>() = len25;
                                        *base.add(8).cast::<*mut u8>() = ptr25.cast_mut();
                                    }
                                    DbValue::Null => {
                                        *base.add(0).cast::<u8>() = (35i32) as u8;
                                    }
                                }
                            }
                        }
                        let ptr27 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-connection.query"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result26,
                            len26,
                            ptr27,
                        );
                        let l28 = i32::from(*ptr27.add(0).cast::<u8>());
                        if layout26.size() != 0 {
                            _rt::alloc::dealloc(result26.cast(), layout26);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l28 {
                            0 => {
                                let e = {
                                    let l29 = *ptr27.add(4).cast::<i32>();

                                    DbResultSet::from_handle(l29 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l30 = i32::from(*ptr27.add(4).cast::<u8>());
                                    let v46 = match l30 {
                                        0 => {
                                            let e46 = {
                                                let l31 = *ptr27.add(8).cast::<*mut u8>();
                                                let l32 = *ptr27.add(12).cast::<usize>();
                                                let len33 = l32;
                                                let bytes33 = _rt::Vec::from_raw_parts(
                                                    l31.cast(),
                                                    len33,
                                                    len33,
                                                );

                                                _rt::string_lift(bytes33)
                                            };
                                            Error::ConnectionFailure(e46)
                                        }
                                        1 => {
                                            let e46 = {
                                                let l34 = *ptr27.add(8).cast::<*mut u8>();
                                                let l35 = *ptr27.add(12).cast::<usize>();
                                                let len36 = l35;
                                                let bytes36 = _rt::Vec::from_raw_parts(
                                                    l34.cast(),
                                                    len36,
                                                    len36,
                                                );

                                                _rt::string_lift(bytes36)
                                            };
                                            Error::QueryParameterFailure(e46)
                                        }
                                        2 => {
                                            let e46 = {
                                                let l37 = *ptr27.add(8).cast::<*mut u8>();
                                                let l38 = *ptr27.add(12).cast::<usize>();
                                                let len39 = l38;
                                                let bytes39 = _rt::Vec::from_raw_parts(
                                                    l37.cast(),
                                                    len39,
                                                    len39,
                                                );

                                                _rt::string_lift(bytes39)
                                            };
                                            Error::QueryExecutionFailure(e46)
                                        }
                                        3 => {
                                            let e46 = {
                                                let l40 = *ptr27.add(8).cast::<*mut u8>();
                                                let l41 = *ptr27.add(12).cast::<usize>();
                                                let len42 = l41;
                                                let bytes42 = _rt::Vec::from_raw_parts(
                                                    l40.cast(),
                                                    len42,
                                                    len42,
                                                );

                                                _rt::string_lift(bytes42)
                                            };
                                            Error::QueryResponseFailure(e46)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e46 = {
                                                let l43 = *ptr27.add(8).cast::<*mut u8>();
                                                let l44 = *ptr27.add(12).cast::<usize>();
                                                let len45 = l44;
                                                let bytes45 = _rt::Vec::from_raw_parts(
                                                    l43.cast(),
                                                    len45,
                                                    len45,
                                                );

                                                _rt::string_lift(bytes45)
                                            };
                                            Error::Other(e46)
                                        }
                                    };

                                    v46
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn execute(&self, statement: &str, params: &[DbValue]) -> Result<u64, Error> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                        let vec0 = statement;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec26 = params;
                        let len26 = vec26.len();
                        let layout26 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec26.len() * 24, 8);
                        let result26 = if layout26.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout26).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout26);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec26.into_iter().enumerate() {
                            let base = result26.add(i * 24);
                            {
                                match e {
                                    DbValue::Boolean(e) => {
                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                        *base.add(8).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        })
                                            as u8;
                                    }
                                    DbValue::Tinyint(e) => {
                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::Smallint(e) => {
                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Mediumint(e) => {
                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Int(e) => {
                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Bigint(e) => {
                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::TinyintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (6i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::SmallintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (7i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::MediumintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (8i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::IntUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (9i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::BigintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (10i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Float(e) => {
                                        *base.add(0).cast::<u8>() = (11i32) as u8;
                                        *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                    }
                                    DbValue::Double(e) => {
                                        *base.add(0).cast::<u8>() = (12i32) as u8;
                                        *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    DbValue::Decimal(e) => {
                                        *base.add(0).cast::<u8>() = (13i32) as u8;
                                        let vec1 = e;
                                        let ptr1 = vec1.as_ptr().cast::<u8>();
                                        let len1 = vec1.len();
                                        *base.add(12).cast::<usize>() = len1;
                                        *base.add(8).cast::<*mut u8>() = ptr1.cast_mut();
                                    }
                                    DbValue::Date(e) => {
                                        *base.add(0).cast::<u8>() = (14i32) as u8;
                                        let Date {
                                            year: year2,
                                            month: month2,
                                            day: day2,
                                        } = e;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year2);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month2)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day2)) as u8;
                                    }
                                    DbValue::Datetime(e) => {
                                        *base.add(0).cast::<u8>() = (15i32) as u8;
                                        let Timestamp {
                                            date: date3,
                                            time: time3,
                                        } = e;
                                        let Date {
                                            year: year4,
                                            month: month4,
                                            day: day4,
                                        } = date3;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year4);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month4)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day4)) as u8;
                                        let Time {
                                            hour: hour5,
                                            minute: minute5,
                                            second: second5,
                                            nanosecond: nanosecond5,
                                        } = time3;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour5)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute5)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second5)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond5);
                                    }
                                    DbValue::Timestamp(e) => {
                                        *base.add(0).cast::<u8>() = (16i32) as u8;
                                        let Timestamp {
                                            date: date6,
                                            time: time6,
                                        } = e;
                                        let Date {
                                            year: year7,
                                            month: month7,
                                            day: day7,
                                        } = date6;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year7);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month7)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day7)) as u8;
                                        let Time {
                                            hour: hour8,
                                            minute: minute8,
                                            second: second8,
                                            nanosecond: nanosecond8,
                                        } = time6;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour8)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute8)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second8)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond8);
                                    }
                                    DbValue::Time(e) => {
                                        *base.add(0).cast::<u8>() = (17i32) as u8;
                                        let Time {
                                            hour: hour9,
                                            minute: minute9,
                                            second: second9,
                                            nanosecond: nanosecond9,
                                        } = e;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(hour9)) as u8;
                                        *base.add(9).cast::<u8>() = (_rt::as_i32(minute9)) as u8;
                                        *base.add(10).cast::<u8>() = (_rt::as_i32(second9)) as u8;
                                        *base.add(12).cast::<i32>() = _rt::as_i32(nanosecond9);
                                    }
                                    DbValue::Year(e) => {
                                        *base.add(0).cast::<u8>() = (18i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Fixchar(e) => {
                                        *base.add(0).cast::<u8>() = (19i32) as u8;
                                        let vec10 = e;
                                        let ptr10 = vec10.as_ptr().cast::<u8>();
                                        let len10 = vec10.len();
                                        *base.add(12).cast::<usize>() = len10;
                                        *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                    }
                                    DbValue::Varchar(e) => {
                                        *base.add(0).cast::<u8>() = (20i32) as u8;
                                        let vec11 = e;
                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                        let len11 = vec11.len();
                                        *base.add(12).cast::<usize>() = len11;
                                        *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                    }
                                    DbValue::Tinytext(e) => {
                                        *base.add(0).cast::<u8>() = (21i32) as u8;
                                        let vec12 = e;
                                        let ptr12 = vec12.as_ptr().cast::<u8>();
                                        let len12 = vec12.len();
                                        *base.add(12).cast::<usize>() = len12;
                                        *base.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                    }
                                    DbValue::Text(e) => {
                                        *base.add(0).cast::<u8>() = (22i32) as u8;
                                        let vec13 = e;
                                        let ptr13 = vec13.as_ptr().cast::<u8>();
                                        let len13 = vec13.len();
                                        *base.add(12).cast::<usize>() = len13;
                                        *base.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                    }
                                    DbValue::Mediumtext(e) => {
                                        *base.add(0).cast::<u8>() = (23i32) as u8;
                                        let vec14 = e;
                                        let ptr14 = vec14.as_ptr().cast::<u8>();
                                        let len14 = vec14.len();
                                        *base.add(12).cast::<usize>() = len14;
                                        *base.add(8).cast::<*mut u8>() = ptr14.cast_mut();
                                    }
                                    DbValue::Longtext(e) => {
                                        *base.add(0).cast::<u8>() = (24i32) as u8;
                                        let vec15 = e;
                                        let ptr15 = vec15.as_ptr().cast::<u8>();
                                        let len15 = vec15.len();
                                        *base.add(12).cast::<usize>() = len15;
                                        *base.add(8).cast::<*mut u8>() = ptr15.cast_mut();
                                    }
                                    DbValue::Binary(e) => {
                                        *base.add(0).cast::<u8>() = (25i32) as u8;
                                        let vec16 = e;
                                        let ptr16 = vec16.as_ptr().cast::<u8>();
                                        let len16 = vec16.len();
                                        *base.add(12).cast::<usize>() = len16;
                                        *base.add(8).cast::<*mut u8>() = ptr16.cast_mut();
                                    }
                                    DbValue::Varbinary(e) => {
                                        *base.add(0).cast::<u8>() = (26i32) as u8;
                                        let vec17 = e;
                                        let ptr17 = vec17.as_ptr().cast::<u8>();
                                        let len17 = vec17.len();
                                        *base.add(12).cast::<usize>() = len17;
                                        *base.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                    }
                                    DbValue::Tinyblob(e) => {
                                        *base.add(0).cast::<u8>() = (27i32) as u8;
                                        let vec18 = e;
                                        let ptr18 = vec18.as_ptr().cast::<u8>();
                                        let len18 = vec18.len();
                                        *base.add(12).cast::<usize>() = len18;
                                        *base.add(8).cast::<*mut u8>() = ptr18.cast_mut();
                                    }
                                    DbValue::Blob(e) => {
                                        *base.add(0).cast::<u8>() = (28i32) as u8;
                                        let vec19 = e;
                                        let ptr19 = vec19.as_ptr().cast::<u8>();
                                        let len19 = vec19.len();
                                        *base.add(12).cast::<usize>() = len19;
                                        *base.add(8).cast::<*mut u8>() = ptr19.cast_mut();
                                    }
                                    DbValue::Mediumblob(e) => {
                                        *base.add(0).cast::<u8>() = (29i32) as u8;
                                        let vec20 = e;
                                        let ptr20 = vec20.as_ptr().cast::<u8>();
                                        let len20 = vec20.len();
                                        *base.add(12).cast::<usize>() = len20;
                                        *base.add(8).cast::<*mut u8>() = ptr20.cast_mut();
                                    }
                                    DbValue::Longblob(e) => {
                                        *base.add(0).cast::<u8>() = (30i32) as u8;
                                        let vec21 = e;
                                        let ptr21 = vec21.as_ptr().cast::<u8>();
                                        let len21 = vec21.len();
                                        *base.add(12).cast::<usize>() = len21;
                                        *base.add(8).cast::<*mut u8>() = ptr21.cast_mut();
                                    }
                                    DbValue::Enumeration(e) => {
                                        *base.add(0).cast::<u8>() = (31i32) as u8;
                                        let vec22 = e;
                                        let ptr22 = vec22.as_ptr().cast::<u8>();
                                        let len22 = vec22.len();
                                        *base.add(12).cast::<usize>() = len22;
                                        *base.add(8).cast::<*mut u8>() = ptr22.cast_mut();
                                    }
                                    DbValue::Set(e) => {
                                        *base.add(0).cast::<u8>() = (32i32) as u8;
                                        let vec23 = e;
                                        let ptr23 = vec23.as_ptr().cast::<u8>();
                                        let len23 = vec23.len();
                                        *base.add(12).cast::<usize>() = len23;
                                        *base.add(8).cast::<*mut u8>() = ptr23.cast_mut();
                                    }
                                    DbValue::Bit(e) => {
                                        *base.add(0).cast::<u8>() = (33i32) as u8;
                                        let vec24 = e;
                                        let len24 = vec24.len();
                                        let layout24 =
                                            _rt::alloc::Layout::from_size_align_unchecked(
                                                vec24.len() * 1,
                                                1,
                                            );
                                        let result24 = if layout24.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout24).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout24);
                                            }
                                            ptr
                                        } else {
                                            {
                                                ::core::ptr::null_mut()
                                            }
                                        };
                                        for (i, e) in vec24.into_iter().enumerate() {
                                            let base = result24.add(i * 1);
                                            {
                                                *base.add(0).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len24;
                                        *base.add(8).cast::<*mut u8>() = result24;
                                        cleanup_list.extend_from_slice(&[(result24, layout24)]);
                                    }
                                    DbValue::Json(e) => {
                                        *base.add(0).cast::<u8>() = (34i32) as u8;
                                        let vec25 = e;
                                        let ptr25 = vec25.as_ptr().cast::<u8>();
                                        let len25 = vec25.len();
                                        *base.add(12).cast::<usize>() = len25;
                                        *base.add(8).cast::<*mut u8>() = ptr25.cast_mut();
                                    }
                                    DbValue::Null => {
                                        *base.add(0).cast::<u8>() = (35i32) as u8;
                                    }
                                }
                            }
                        }
                        let ptr27 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-connection.execute"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result26,
                            len26,
                            ptr27,
                        );
                        let l28 = i32::from(*ptr27.add(0).cast::<u8>());
                        if layout26.size() != 0 {
                            _rt::alloc::dealloc(result26.cast(), layout26);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l28 {
                            0 => {
                                let e = {
                                    let l29 = *ptr27.add(8).cast::<i64>();

                                    l29 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l30 = i32::from(*ptr27.add(8).cast::<u8>());
                                    let v46 = match l30 {
                                        0 => {
                                            let e46 = {
                                                let l31 = *ptr27.add(12).cast::<*mut u8>();
                                                let l32 = *ptr27.add(16).cast::<usize>();
                                                let len33 = l32;
                                                let bytes33 = _rt::Vec::from_raw_parts(
                                                    l31.cast(),
                                                    len33,
                                                    len33,
                                                );

                                                _rt::string_lift(bytes33)
                                            };
                                            Error::ConnectionFailure(e46)
                                        }
                                        1 => {
                                            let e46 = {
                                                let l34 = *ptr27.add(12).cast::<*mut u8>();
                                                let l35 = *ptr27.add(16).cast::<usize>();
                                                let len36 = l35;
                                                let bytes36 = _rt::Vec::from_raw_parts(
                                                    l34.cast(),
                                                    len36,
                                                    len36,
                                                );

                                                _rt::string_lift(bytes36)
                                            };
                                            Error::QueryParameterFailure(e46)
                                        }
                                        2 => {
                                            let e46 = {
                                                let l37 = *ptr27.add(12).cast::<*mut u8>();
                                                let l38 = *ptr27.add(16).cast::<usize>();
                                                let len39 = l38;
                                                let bytes39 = _rt::Vec::from_raw_parts(
                                                    l37.cast(),
                                                    len39,
                                                    len39,
                                                );

                                                _rt::string_lift(bytes39)
                                            };
                                            Error::QueryExecutionFailure(e46)
                                        }
                                        3 => {
                                            let e46 = {
                                                let l40 = *ptr27.add(12).cast::<*mut u8>();
                                                let l41 = *ptr27.add(16).cast::<usize>();
                                                let len42 = l41;
                                                let bytes42 = _rt::Vec::from_raw_parts(
                                                    l40.cast(),
                                                    len42,
                                                    len42,
                                                );

                                                _rt::string_lift(bytes42)
                                            };
                                            Error::QueryResponseFailure(e46)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e46 = {
                                                let l43 = *ptr27.add(12).cast::<*mut u8>();
                                                let l44 = *ptr27.add(16).cast::<usize>();
                                                let len45 = l44;
                                                let bytes45 = _rt::Vec::from_raw_parts(
                                                    l43.cast(),
                                                    len45,
                                                    len45,
                                                );

                                                _rt::string_lift(bytes45)
                                            };
                                            Error::Other(e46)
                                        }
                                    };

                                    v46
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod golem {
        #[allow(dead_code)]
        pub mod it {
            #[allow(dead_code, clippy::all)]
            pub mod api {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type PostgresDbRow = super::super::super::super::wasi::rdbms::postgres::DbRow;
                pub type PostgresDbColumn =
                    super::super::super::super::wasi::rdbms::postgres::DbColumn;
                pub type MysqlDbRow = super::super::super::super::wasi::rdbms::mysql::DbRow;
                pub type MysqlDbColumn = super::super::super::super::wasi::rdbms::mysql::DbColumn;
                #[derive(Clone)]
                pub struct PostgresQueryResult {
                    pub columns: _rt::Vec<PostgresDbColumn>,
                    pub rows: _rt::Vec<PostgresDbRow>,
                }
                impl ::core::fmt::Debug for PostgresQueryResult {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("PostgresQueryResult")
                            .field("columns", &self.columns)
                            .field("rows", &self.rows)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct MysqlQueryResult {
                    pub columns: _rt::Vec<MysqlDbColumn>,
                    pub rows: _rt::Vec<MysqlDbRow>,
                }
                impl ::core::fmt::Debug for MysqlQueryResult {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("MysqlQueryResult")
                            .field("columns", &self.columns)
                            .field("rows", &self.rows)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_check_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::check();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(4).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_check<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_mysql_execute_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let base4 = arg2;
                    let len4 = arg3;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4.add(i * 8);
                        let e4 = {
                            let l1 = *base.add(0).cast::<*mut u8>();
                            let l2 = *base.add(4).cast::<usize>();
                            let len3 = l2;
                            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);

                            _rt::string_lift(bytes3)
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(base4, len4 * 8, 4);
                    let result5 = T::mysql_execute(_rt::string_lift(bytes0), result4);
                    let ptr6 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result5 {
                        Ok(e) => {
                            *ptr6.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr6.add(8).cast::<i64>() = _rt::as_i64(e);
                        }
                        Err(e) => {
                            *ptr6.add(0).cast::<u8>() = (1i32) as u8;
                            let vec7 = (e.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *ptr6.add(12).cast::<usize>() = len7;
                            *ptr6.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                        }
                    };
                    ptr6
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_mysql_execute<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_mysql_query_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let base4 = arg2;
                    let len4 = arg3;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4.add(i * 8);
                        let e4 = {
                            let l1 = *base.add(0).cast::<*mut u8>();
                            let l2 = *base.add(4).cast::<usize>();
                            let len3 = l2;
                            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);

                            _rt::string_lift(bytes3)
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(base4, len4 * 8, 4);
                    let result5 = T::mysql_query(_rt::string_lift(bytes0), result4);
                    let ptr6 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result5 {
                        Ok(e) => {
                            *ptr6.add(0).cast::<u8>() = (0i32) as u8;
                            let MysqlQueryResult {
                                columns: columns7,
                                rows: rows7,
                            } = e;
                            let vec12 = columns7;
                            let len12 = vec12.len();
                            let layout12 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec12.len() * 32, 8);
                            let result12 = if layout12.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout12);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec12.into_iter().enumerate() {
                                let base = result12.add(i * 32);
                                {
                                    let super::super::super::super::wasi::rdbms::mysql::DbColumn {
                                        ordinal: ordinal8,
                                        name: name8,
                                        db_type: db_type8,
                                        db_type_name: db_type_name8,
                                    } = e;
                                    *base.add(0).cast::<i64>() = _rt::as_i64(ordinal8);
                                    let vec9 = (name8.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *base.add(12).cast::<usize>() = len9;
                                    *base.add(8).cast::<*mut u8>() = ptr9.cast_mut();
                                    use super::super::super::super::wasi::rdbms::mysql::DbColumnType as V10;
                                    match db_type8 {
                                        V10::Boolean => {
                                            *base.add(16).cast::<u8>() = (0i32) as u8;
                                        }
                                        V10::Tinyint => {
                                            *base.add(16).cast::<u8>() = (1i32) as u8;
                                        }
                                        V10::Smallint => {
                                            *base.add(16).cast::<u8>() = (2i32) as u8;
                                        }
                                        V10::Mediumint => {
                                            *base.add(16).cast::<u8>() = (3i32) as u8;
                                        }
                                        V10::Int => {
                                            *base.add(16).cast::<u8>() = (4i32) as u8;
                                        }
                                        V10::Bigint => {
                                            *base.add(16).cast::<u8>() = (5i32) as u8;
                                        }
                                        V10::TinyintUnsigned => {
                                            *base.add(16).cast::<u8>() = (6i32) as u8;
                                        }
                                        V10::SmallintUnsigned => {
                                            *base.add(16).cast::<u8>() = (7i32) as u8;
                                        }
                                        V10::MediumintUnsigned => {
                                            *base.add(16).cast::<u8>() = (8i32) as u8;
                                        }
                                        V10::IntUnsigned => {
                                            *base.add(16).cast::<u8>() = (9i32) as u8;
                                        }
                                        V10::BigintUnsigned => {
                                            *base.add(16).cast::<u8>() = (10i32) as u8;
                                        }
                                        V10::Float => {
                                            *base.add(16).cast::<u8>() = (11i32) as u8;
                                        }
                                        V10::Double => {
                                            *base.add(16).cast::<u8>() = (12i32) as u8;
                                        }
                                        V10::Decimal => {
                                            *base.add(16).cast::<u8>() = (13i32) as u8;
                                        }
                                        V10::Date => {
                                            *base.add(16).cast::<u8>() = (14i32) as u8;
                                        }
                                        V10::Datetime => {
                                            *base.add(16).cast::<u8>() = (15i32) as u8;
                                        }
                                        V10::Timestamp => {
                                            *base.add(16).cast::<u8>() = (16i32) as u8;
                                        }
                                        V10::Time => {
                                            *base.add(16).cast::<u8>() = (17i32) as u8;
                                        }
                                        V10::Year => {
                                            *base.add(16).cast::<u8>() = (18i32) as u8;
                                        }
                                        V10::Fixchar => {
                                            *base.add(16).cast::<u8>() = (19i32) as u8;
                                        }
                                        V10::Varchar => {
                                            *base.add(16).cast::<u8>() = (20i32) as u8;
                                        }
                                        V10::Tinytext => {
                                            *base.add(16).cast::<u8>() = (21i32) as u8;
                                        }
                                        V10::Text => {
                                            *base.add(16).cast::<u8>() = (22i32) as u8;
                                        }
                                        V10::Mediumtext => {
                                            *base.add(16).cast::<u8>() = (23i32) as u8;
                                        }
                                        V10::Longtext => {
                                            *base.add(16).cast::<u8>() = (24i32) as u8;
                                        }
                                        V10::Binary => {
                                            *base.add(16).cast::<u8>() = (25i32) as u8;
                                        }
                                        V10::Varbinary => {
                                            *base.add(16).cast::<u8>() = (26i32) as u8;
                                        }
                                        V10::Tinyblob => {
                                            *base.add(16).cast::<u8>() = (27i32) as u8;
                                        }
                                        V10::Blob => {
                                            *base.add(16).cast::<u8>() = (28i32) as u8;
                                        }
                                        V10::Mediumblob => {
                                            *base.add(16).cast::<u8>() = (29i32) as u8;
                                        }
                                        V10::Longblob => {
                                            *base.add(16).cast::<u8>() = (30i32) as u8;
                                        }
                                        V10::Enumeration => {
                                            *base.add(16).cast::<u8>() = (31i32) as u8;
                                        }
                                        V10::Set => {
                                            *base.add(16).cast::<u8>() = (32i32) as u8;
                                        }
                                        V10::Bit => {
                                            *base.add(16).cast::<u8>() = (33i32) as u8;
                                        }
                                        V10::Json => {
                                            *base.add(16).cast::<u8>() = (34i32) as u8;
                                        }
                                    }
                                    let vec11 = (db_type_name8.into_bytes()).into_boxed_slice();
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    ::core::mem::forget(vec11);
                                    *base.add(24).cast::<usize>() = len11;
                                    *base.add(20).cast::<*mut u8>() = ptr11.cast_mut();
                                }
                            }
                            *ptr6.add(8).cast::<usize>() = len12;
                            *ptr6.add(4).cast::<*mut u8>() = result12;
                            let vec41 = rows7;
                            let len41 = vec41.len();
                            let layout41 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec41.len() * 8, 4);
                            let result41 = if layout41.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout41).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout41);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec41.into_iter().enumerate() {
                                let base = result41.add(i * 8);
                                {
                                    let super::super::super::super::wasi::rdbms::mysql::DbRow {
                                        values: values13,
                                    } = e;
                                    let vec40 = values13;
                                    let len40 = vec40.len();
                                    let layout40 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec40.len() * 24,
                                        8,
                                    );
                                    let result40 = if layout40.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout40).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout40);
                                        }
                                        ptr
                                    } else {
                                        {
                                            ::core::ptr::null_mut()
                                        }
                                    };
                                    for (i, e) in vec40.into_iter().enumerate() {
                                        let base = result40.add(i * 24);
                                        {
                                            use super::super::super::super::wasi::rdbms::mysql::DbValue as V39;
                                            match e {
                                                V39::Boolean(e) => {
                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                    *base.add(8).cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8;
                                                }
                                                V39::Tinyint(e) => {
                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                    *base.add(8).cast::<u8>() =
                                                        (_rt::as_i32(e)) as u8;
                                                }
                                                V39::Smallint(e) => {
                                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                                    *base.add(8).cast::<u16>() =
                                                        (_rt::as_i32(e)) as u16;
                                                }
                                                V39::Mediumint(e) => {
                                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V39::Int(e) => {
                                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V39::Bigint(e) => {
                                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V39::TinyintUnsigned(e) => {
                                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                                    *base.add(8).cast::<u8>() =
                                                        (_rt::as_i32(e)) as u8;
                                                }
                                                V39::SmallintUnsigned(e) => {
                                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                                    *base.add(8).cast::<u16>() =
                                                        (_rt::as_i32(e)) as u16;
                                                }
                                                V39::MediumintUnsigned(e) => {
                                                    *base.add(0).cast::<u8>() = (8i32) as u8;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V39::IntUnsigned(e) => {
                                                    *base.add(0).cast::<u8>() = (9i32) as u8;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V39::BigintUnsigned(e) => {
                                                    *base.add(0).cast::<u8>() = (10i32) as u8;
                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V39::Float(e) => {
                                                    *base.add(0).cast::<u8>() = (11i32) as u8;
                                                    *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                                }
                                                V39::Double(e) => {
                                                    *base.add(0).cast::<u8>() = (12i32) as u8;
                                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                }
                                                V39::Decimal(e) => {
                                                    *base.add(0).cast::<u8>() = (13i32) as u8;
                                                    let vec14 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                                    let len14 = vec14.len();
                                                    ::core::mem::forget(vec14);
                                                    *base.add(12).cast::<usize>() = len14;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr14.cast_mut();
                                                }
                                                V39::Date(e) => {
                                                    *base.add(0).cast::<u8>() = (14i32) as u8;
                                                    let super::super::super::super::wasi::rdbms::mysql::Date{ year:year15, month:month15, day:day15, } = e;
                                                    *base.add(8).cast::<i32>() =
                                                        _rt::as_i32(year15);
                                                    *base.add(12).cast::<u8>() =
                                                        (_rt::as_i32(month15)) as u8;
                                                    *base.add(13).cast::<u8>() =
                                                        (_rt::as_i32(day15)) as u8;
                                                }
                                                V39::Datetime(e) => {
                                                    *base.add(0).cast::<u8>() = (15i32) as u8;
                                                    let super::super::super::super::wasi::rdbms::mysql::Timestamp{ date:date16, time:time16, } = e;
                                                    let super::super::super::super::wasi::rdbms::mysql::Date{ year:year17, month:month17, day:day17, } = date16;
                                                    *base.add(8).cast::<i32>() =
                                                        _rt::as_i32(year17);
                                                    *base.add(12).cast::<u8>() =
                                                        (_rt::as_i32(month17)) as u8;
                                                    *base.add(13).cast::<u8>() =
                                                        (_rt::as_i32(day17)) as u8;
                                                    let super::super::super::super::wasi::rdbms::mysql::Time{ hour:hour18, minute:minute18, second:second18, nanosecond:nanosecond18, } = time16;
                                                    *base.add(16).cast::<u8>() =
                                                        (_rt::as_i32(hour18)) as u8;
                                                    *base.add(17).cast::<u8>() =
                                                        (_rt::as_i32(minute18)) as u8;
                                                    *base.add(18).cast::<u8>() =
                                                        (_rt::as_i32(second18)) as u8;
                                                    *base.add(20).cast::<i32>() =
                                                        _rt::as_i32(nanosecond18);
                                                }
                                                V39::Timestamp(e) => {
                                                    *base.add(0).cast::<u8>() = (16i32) as u8;
                                                    let super::super::super::super::wasi::rdbms::mysql::Timestamp{ date:date19, time:time19, } = e;
                                                    let super::super::super::super::wasi::rdbms::mysql::Date{ year:year20, month:month20, day:day20, } = date19;
                                                    *base.add(8).cast::<i32>() =
                                                        _rt::as_i32(year20);
                                                    *base.add(12).cast::<u8>() =
                                                        (_rt::as_i32(month20)) as u8;
                                                    *base.add(13).cast::<u8>() =
                                                        (_rt::as_i32(day20)) as u8;
                                                    let super::super::super::super::wasi::rdbms::mysql::Time{ hour:hour21, minute:minute21, second:second21, nanosecond:nanosecond21, } = time19;
                                                    *base.add(16).cast::<u8>() =
                                                        (_rt::as_i32(hour21)) as u8;
                                                    *base.add(17).cast::<u8>() =
                                                        (_rt::as_i32(minute21)) as u8;
                                                    *base.add(18).cast::<u8>() =
                                                        (_rt::as_i32(second21)) as u8;
                                                    *base.add(20).cast::<i32>() =
                                                        _rt::as_i32(nanosecond21);
                                                }
                                                V39::Time(e) => {
                                                    *base.add(0).cast::<u8>() = (17i32) as u8;
                                                    let super::super::super::super::wasi::rdbms::mysql::Time{ hour:hour22, minute:minute22, second:second22, nanosecond:nanosecond22, } = e;
                                                    *base.add(8).cast::<u8>() =
                                                        (_rt::as_i32(hour22)) as u8;
                                                    *base.add(9).cast::<u8>() =
                                                        (_rt::as_i32(minute22)) as u8;
                                                    *base.add(10).cast::<u8>() =
                                                        (_rt::as_i32(second22)) as u8;
                                                    *base.add(12).cast::<i32>() =
                                                        _rt::as_i32(nanosecond22);
                                                }
                                                V39::Year(e) => {
                                                    *base.add(0).cast::<u8>() = (18i32) as u8;
                                                    *base.add(8).cast::<u16>() =
                                                        (_rt::as_i32(e)) as u16;
                                                }
                                                V39::Fixchar(e) => {
                                                    *base.add(0).cast::<u8>() = (19i32) as u8;
                                                    let vec23 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr23 = vec23.as_ptr().cast::<u8>();
                                                    let len23 = vec23.len();
                                                    ::core::mem::forget(vec23);
                                                    *base.add(12).cast::<usize>() = len23;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr23.cast_mut();
                                                }
                                                V39::Varchar(e) => {
                                                    *base.add(0).cast::<u8>() = (20i32) as u8;
                                                    let vec24 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr24 = vec24.as_ptr().cast::<u8>();
                                                    let len24 = vec24.len();
                                                    ::core::mem::forget(vec24);
                                                    *base.add(12).cast::<usize>() = len24;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr24.cast_mut();
                                                }
                                                V39::Tinytext(e) => {
                                                    *base.add(0).cast::<u8>() = (21i32) as u8;
                                                    let vec25 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr25 = vec25.as_ptr().cast::<u8>();
                                                    let len25 = vec25.len();
                                                    ::core::mem::forget(vec25);
                                                    *base.add(12).cast::<usize>() = len25;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr25.cast_mut();
                                                }
                                                V39::Text(e) => {
                                                    *base.add(0).cast::<u8>() = (22i32) as u8;
                                                    let vec26 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr26 = vec26.as_ptr().cast::<u8>();
                                                    let len26 = vec26.len();
                                                    ::core::mem::forget(vec26);
                                                    *base.add(12).cast::<usize>() = len26;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr26.cast_mut();
                                                }
                                                V39::Mediumtext(e) => {
                                                    *base.add(0).cast::<u8>() = (23i32) as u8;
                                                    let vec27 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr27 = vec27.as_ptr().cast::<u8>();
                                                    let len27 = vec27.len();
                                                    ::core::mem::forget(vec27);
                                                    *base.add(12).cast::<usize>() = len27;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr27.cast_mut();
                                                }
                                                V39::Longtext(e) => {
                                                    *base.add(0).cast::<u8>() = (24i32) as u8;
                                                    let vec28 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr28 = vec28.as_ptr().cast::<u8>();
                                                    let len28 = vec28.len();
                                                    ::core::mem::forget(vec28);
                                                    *base.add(12).cast::<usize>() = len28;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr28.cast_mut();
                                                }
                                                V39::Binary(e) => {
                                                    *base.add(0).cast::<u8>() = (25i32) as u8;
                                                    let vec29 = (e).into_boxed_slice();
                                                    let ptr29 = vec29.as_ptr().cast::<u8>();
                                                    let len29 = vec29.len();
                                                    ::core::mem::forget(vec29);
                                                    *base.add(12).cast::<usize>() = len29;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr29.cast_mut();
                                                }
                                                V39::Varbinary(e) => {
                                                    *base.add(0).cast::<u8>() = (26i32) as u8;
                                                    let vec30 = (e).into_boxed_slice();
                                                    let ptr30 = vec30.as_ptr().cast::<u8>();
                                                    let len30 = vec30.len();
                                                    ::core::mem::forget(vec30);
                                                    *base.add(12).cast::<usize>() = len30;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr30.cast_mut();
                                                }
                                                V39::Tinyblob(e) => {
                                                    *base.add(0).cast::<u8>() = (27i32) as u8;
                                                    let vec31 = (e).into_boxed_slice();
                                                    let ptr31 = vec31.as_ptr().cast::<u8>();
                                                    let len31 = vec31.len();
                                                    ::core::mem::forget(vec31);
                                                    *base.add(12).cast::<usize>() = len31;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr31.cast_mut();
                                                }
                                                V39::Blob(e) => {
                                                    *base.add(0).cast::<u8>() = (28i32) as u8;
                                                    let vec32 = (e).into_boxed_slice();
                                                    let ptr32 = vec32.as_ptr().cast::<u8>();
                                                    let len32 = vec32.len();
                                                    ::core::mem::forget(vec32);
                                                    *base.add(12).cast::<usize>() = len32;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr32.cast_mut();
                                                }
                                                V39::Mediumblob(e) => {
                                                    *base.add(0).cast::<u8>() = (29i32) as u8;
                                                    let vec33 = (e).into_boxed_slice();
                                                    let ptr33 = vec33.as_ptr().cast::<u8>();
                                                    let len33 = vec33.len();
                                                    ::core::mem::forget(vec33);
                                                    *base.add(12).cast::<usize>() = len33;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr33.cast_mut();
                                                }
                                                V39::Longblob(e) => {
                                                    *base.add(0).cast::<u8>() = (30i32) as u8;
                                                    let vec34 = (e).into_boxed_slice();
                                                    let ptr34 = vec34.as_ptr().cast::<u8>();
                                                    let len34 = vec34.len();
                                                    ::core::mem::forget(vec34);
                                                    *base.add(12).cast::<usize>() = len34;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr34.cast_mut();
                                                }
                                                V39::Enumeration(e) => {
                                                    *base.add(0).cast::<u8>() = (31i32) as u8;
                                                    let vec35 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr35 = vec35.as_ptr().cast::<u8>();
                                                    let len35 = vec35.len();
                                                    ::core::mem::forget(vec35);
                                                    *base.add(12).cast::<usize>() = len35;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr35.cast_mut();
                                                }
                                                V39::Set(e) => {
                                                    *base.add(0).cast::<u8>() = (32i32) as u8;
                                                    let vec36 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr36 = vec36.as_ptr().cast::<u8>();
                                                    let len36 = vec36.len();
                                                    ::core::mem::forget(vec36);
                                                    *base.add(12).cast::<usize>() = len36;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr36.cast_mut();
                                                }
                                                V39::Bit(e) => {
                                                    *base.add(0).cast::<u8>() = (33i32) as u8;
                                                    let vec37 = e;
                                                    let len37 = vec37.len();
                                                    let layout37 = _rt::alloc::Layout::from_size_align_unchecked(vec37.len() * 1, 1);
                                                    let result37 = if layout37.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout37)
                                                            .cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(
                                                                layout37,
                                                            );
                                                        }
                                                        ptr
                                                    } else {
                                                        {
                                                            ::core::ptr::null_mut()
                                                        }
                                                    };
                                                    for (i, e) in vec37.into_iter().enumerate() {
                                                        let base = result37.add(i * 1);
                                                        {
                                                            *base.add(0).cast::<u8>() = (match e {
                                                                true => 1,
                                                                false => 0,
                                                            })
                                                                as u8;
                                                        }
                                                    }
                                                    *base.add(12).cast::<usize>() = len37;
                                                    *base.add(8).cast::<*mut u8>() = result37;
                                                }
                                                V39::Json(e) => {
                                                    *base.add(0).cast::<u8>() = (34i32) as u8;
                                                    let vec38 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr38 = vec38.as_ptr().cast::<u8>();
                                                    let len38 = vec38.len();
                                                    ::core::mem::forget(vec38);
                                                    *base.add(12).cast::<usize>() = len38;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr38.cast_mut();
                                                }
                                                V39::Null => {
                                                    *base.add(0).cast::<u8>() = (35i32) as u8;
                                                }
                                            }
                                        }
                                    }
                                    *base.add(4).cast::<usize>() = len40;
                                    *base.add(0).cast::<*mut u8>() = result40;
                                }
                            }
                            *ptr6.add(16).cast::<usize>() = len41;
                            *ptr6.add(12).cast::<*mut u8>() = result41;
                        }
                        Err(e) => {
                            *ptr6.add(0).cast::<u8>() = (1i32) as u8;
                            let vec42 = (e.into_bytes()).into_boxed_slice();
                            let ptr42 = vec42.as_ptr().cast::<u8>();
                            let len42 = vec42.len();
                            ::core::mem::forget(vec42);
                            *ptr6.add(8).cast::<usize>() = len42;
                            *ptr6.add(4).cast::<*mut u8>() = ptr42.cast_mut();
                        }
                    };
                    ptr6
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_mysql_query<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l5 = *arg0.add(4).cast::<*mut u8>();
                            let l6 = *arg0.add(8).cast::<usize>();
                            let base7 = l5;
                            let len7 = l6;
                            for i in 0..len7 {
                                let base = base7.add(i * 32);
                                {
                                    let l1 = *base.add(8).cast::<*mut u8>();
                                    let l2 = *base.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l1, l2, 1);
                                    let l3 = *base.add(20).cast::<*mut u8>();
                                    let l4 = *base.add(24).cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                }
                            }
                            _rt::cabi_dealloc(base7, len7 * 32, 8);
                            let l53 = *arg0.add(12).cast::<*mut u8>();
                            let l54 = *arg0.add(16).cast::<usize>();
                            let base55 = l53;
                            let len55 = l54;
                            for i in 0..len55 {
                                let base = base55.add(i * 8);
                                {
                                    let l50 = *base.add(0).cast::<*mut u8>();
                                    let l51 = *base.add(4).cast::<usize>();
                                    let base52 = l50;
                                    let len52 = l51;
                                    for i in 0..len52 {
                                        let base = base52.add(i * 24);
                                        {
                                            let l8 = i32::from(*base.add(0).cast::<u8>());
                                            match l8 {
                                                0 => (),
                                                1 => (),
                                                2 => (),
                                                3 => (),
                                                4 => (),
                                                5 => (),
                                                6 => (),
                                                7 => (),
                                                8 => (),
                                                9 => (),
                                                10 => (),
                                                11 => (),
                                                12 => (),
                                                13 => {
                                                    let l9 = *base.add(8).cast::<*mut u8>();
                                                    let l10 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l9, l10, 1);
                                                }
                                                14 => (),
                                                15 => (),
                                                16 => (),
                                                17 => (),
                                                18 => (),
                                                19 => {
                                                    let l11 = *base.add(8).cast::<*mut u8>();
                                                    let l12 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l11, l12, 1);
                                                }
                                                20 => {
                                                    let l13 = *base.add(8).cast::<*mut u8>();
                                                    let l14 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l13, l14, 1);
                                                }
                                                21 => {
                                                    let l15 = *base.add(8).cast::<*mut u8>();
                                                    let l16 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l15, l16, 1);
                                                }
                                                22 => {
                                                    let l17 = *base.add(8).cast::<*mut u8>();
                                                    let l18 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l17, l18, 1);
                                                }
                                                23 => {
                                                    let l19 = *base.add(8).cast::<*mut u8>();
                                                    let l20 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l19, l20, 1);
                                                }
                                                24 => {
                                                    let l21 = *base.add(8).cast::<*mut u8>();
                                                    let l22 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l21, l22, 1);
                                                }
                                                25 => {
                                                    let l23 = *base.add(8).cast::<*mut u8>();
                                                    let l24 = *base.add(12).cast::<usize>();
                                                    let base25 = l23;
                                                    let len25 = l24;
                                                    _rt::cabi_dealloc(base25, len25 * 1, 1);
                                                }
                                                26 => {
                                                    let l26 = *base.add(8).cast::<*mut u8>();
                                                    let l27 = *base.add(12).cast::<usize>();
                                                    let base28 = l26;
                                                    let len28 = l27;
                                                    _rt::cabi_dealloc(base28, len28 * 1, 1);
                                                }
                                                27 => {
                                                    let l29 = *base.add(8).cast::<*mut u8>();
                                                    let l30 = *base.add(12).cast::<usize>();
                                                    let base31 = l29;
                                                    let len31 = l30;
                                                    _rt::cabi_dealloc(base31, len31 * 1, 1);
                                                }
                                                28 => {
                                                    let l32 = *base.add(8).cast::<*mut u8>();
                                                    let l33 = *base.add(12).cast::<usize>();
                                                    let base34 = l32;
                                                    let len34 = l33;
                                                    _rt::cabi_dealloc(base34, len34 * 1, 1);
                                                }
                                                29 => {
                                                    let l35 = *base.add(8).cast::<*mut u8>();
                                                    let l36 = *base.add(12).cast::<usize>();
                                                    let base37 = l35;
                                                    let len37 = l36;
                                                    _rt::cabi_dealloc(base37, len37 * 1, 1);
                                                }
                                                30 => {
                                                    let l38 = *base.add(8).cast::<*mut u8>();
                                                    let l39 = *base.add(12).cast::<usize>();
                                                    let base40 = l38;
                                                    let len40 = l39;
                                                    _rt::cabi_dealloc(base40, len40 * 1, 1);
                                                }
                                                31 => {
                                                    let l41 = *base.add(8).cast::<*mut u8>();
                                                    let l42 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l41, l42, 1);
                                                }
                                                32 => {
                                                    let l43 = *base.add(8).cast::<*mut u8>();
                                                    let l44 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l43, l44, 1);
                                                }
                                                33 => {
                                                    let l45 = *base.add(8).cast::<*mut u8>();
                                                    let l46 = *base.add(12).cast::<usize>();
                                                    let base47 = l45;
                                                    let len47 = l46;
                                                    _rt::cabi_dealloc(base47, len47 * 1, 1);
                                                }
                                                34 => {
                                                    let l48 = *base.add(8).cast::<*mut u8>();
                                                    let l49 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l48, l49, 1);
                                                }
                                                _ => (),
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(base52, len52 * 24, 8);
                                }
                            }
                            _rt::cabi_dealloc(base55, len55 * 8, 4);
                        }
                        _ => {
                            let l56 = *arg0.add(4).cast::<*mut u8>();
                            let l57 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l56, l57, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_postgres_execute_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let base4 = arg2;
                    let len4 = arg3;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4.add(i * 8);
                        let e4 = {
                            let l1 = *base.add(0).cast::<*mut u8>();
                            let l2 = *base.add(4).cast::<usize>();
                            let len3 = l2;
                            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);

                            _rt::string_lift(bytes3)
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(base4, len4 * 8, 4);
                    let result5 = T::postgres_execute(_rt::string_lift(bytes0), result4);
                    let ptr6 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result5 {
                        Ok(e) => {
                            *ptr6.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr6.add(8).cast::<i64>() = _rt::as_i64(e);
                        }
                        Err(e) => {
                            *ptr6.add(0).cast::<u8>() = (1i32) as u8;
                            let vec7 = (e.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *ptr6.add(12).cast::<usize>() = len7;
                            *ptr6.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                        }
                    };
                    ptr6
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_postgres_execute<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_postgres_query_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let base4 = arg2;
                    let len4 = arg3;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4.add(i * 8);
                        let e4 = {
                            let l1 = *base.add(0).cast::<*mut u8>();
                            let l2 = *base.add(4).cast::<usize>();
                            let len3 = l2;
                            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);

                            _rt::string_lift(bytes3)
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(base4, len4 * 8, 4);
                    let result5 = T::postgres_query(_rt::string_lift(bytes0), result4);
                    let ptr6 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result5 {
                        Ok(e) => {
                            *ptr6.add(0).cast::<u8>() = (0i32) as u8;
                            let PostgresQueryResult {
                                columns: columns7,
                                rows: rows7,
                            } = e;
                            let vec25 = columns7;
                            let len25 = vec25.len();
                            let layout25 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec25.len() * 32, 8);
                            let result25 = if layout25.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout25).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout25);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec25.into_iter().enumerate() {
                                let base = result25.add(i * 32);
                                {
                                    let super::super::super::super::wasi::rdbms::postgres::DbColumn{ ordinal:ordinal8, name:name8, db_type:db_type8, db_type_name:db_type_name8, } = e;
                                    *base.add(0).cast::<i64>() = _rt::as_i64(ordinal8);
                                    let vec9 = (name8.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *base.add(12).cast::<usize>() = len9;
                                    *base.add(8).cast::<*mut u8>() = ptr9.cast_mut();
                                    let super::super::super::super::wasi::rdbms::postgres::DbColumnType{ nodes:nodes10, } = db_type8;
                                    let vec23 = nodes10;
                                    let len23 = vec23.len();
                                    let layout23 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec23.len() * 20,
                                        4,
                                    );
                                    let result23 = if layout23.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout23).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout23);
                                        }
                                        ptr
                                    } else {
                                        {
                                            ::core::ptr::null_mut()
                                        }
                                    };
                                    for (i, e) in vec23.into_iter().enumerate() {
                                        let base = result23.add(i * 20);
                                        {
                                            use super::super::super::super::wasi::rdbms::postgres::DbColumnTypeNode as V22;
                                            match e {
                                                V22::Character => {
                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                }
                                                V22::Int2 => {
                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                }
                                                V22::Int4 => {
                                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                                }
                                                V22::Int8 => {
                                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                                }
                                                V22::Float4 => {
                                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                                }
                                                V22::Float8 => {
                                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                                }
                                                V22::Numeric => {
                                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                                }
                                                V22::Boolean => {
                                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                                }
                                                V22::Text => {
                                                    *base.add(0).cast::<u8>() = (8i32) as u8;
                                                }
                                                V22::Varchar => {
                                                    *base.add(0).cast::<u8>() = (9i32) as u8;
                                                }
                                                V22::Bpchar => {
                                                    *base.add(0).cast::<u8>() = (10i32) as u8;
                                                }
                                                V22::Timestamp => {
                                                    *base.add(0).cast::<u8>() = (11i32) as u8;
                                                }
                                                V22::Timestamptz => {
                                                    *base.add(0).cast::<u8>() = (12i32) as u8;
                                                }
                                                V22::Date => {
                                                    *base.add(0).cast::<u8>() = (13i32) as u8;
                                                }
                                                V22::Time => {
                                                    *base.add(0).cast::<u8>() = (14i32) as u8;
                                                }
                                                V22::Timetz => {
                                                    *base.add(0).cast::<u8>() = (15i32) as u8;
                                                }
                                                V22::Interval => {
                                                    *base.add(0).cast::<u8>() = (16i32) as u8;
                                                }
                                                V22::Bytea => {
                                                    *base.add(0).cast::<u8>() = (17i32) as u8;
                                                }
                                                V22::Uuid => {
                                                    *base.add(0).cast::<u8>() = (18i32) as u8;
                                                }
                                                V22::Xml => {
                                                    *base.add(0).cast::<u8>() = (19i32) as u8;
                                                }
                                                V22::Json => {
                                                    *base.add(0).cast::<u8>() = (20i32) as u8;
                                                }
                                                V22::Jsonb => {
                                                    *base.add(0).cast::<u8>() = (21i32) as u8;
                                                }
                                                V22::Jsonpath => {
                                                    *base.add(0).cast::<u8>() = (22i32) as u8;
                                                }
                                                V22::Inet => {
                                                    *base.add(0).cast::<u8>() = (23i32) as u8;
                                                }
                                                V22::Cidr => {
                                                    *base.add(0).cast::<u8>() = (24i32) as u8;
                                                }
                                                V22::Macaddr => {
                                                    *base.add(0).cast::<u8>() = (25i32) as u8;
                                                }
                                                V22::Bit => {
                                                    *base.add(0).cast::<u8>() = (26i32) as u8;
                                                }
                                                V22::Varbit => {
                                                    *base.add(0).cast::<u8>() = (27i32) as u8;
                                                }
                                                V22::Int4range => {
                                                    *base.add(0).cast::<u8>() = (28i32) as u8;
                                                }
                                                V22::Int8range => {
                                                    *base.add(0).cast::<u8>() = (29i32) as u8;
                                                }
                                                V22::Numrange => {
                                                    *base.add(0).cast::<u8>() = (30i32) as u8;
                                                }
                                                V22::Tsrange => {
                                                    *base.add(0).cast::<u8>() = (31i32) as u8;
                                                }
                                                V22::Tstzrange => {
                                                    *base.add(0).cast::<u8>() = (32i32) as u8;
                                                }
                                                V22::Daterange => {
                                                    *base.add(0).cast::<u8>() = (33i32) as u8;
                                                }
                                                V22::Money => {
                                                    *base.add(0).cast::<u8>() = (34i32) as u8;
                                                }
                                                V22::Oid => {
                                                    *base.add(0).cast::<u8>() = (35i32) as u8;
                                                }
                                                V22::Enumeration(e) => {
                                                    *base.add(0).cast::<u8>() = (36i32) as u8;
                                                    let super::super::super::super::wasi::rdbms::postgres::EnumerationType{ name:name11, } = e;
                                                    let vec12 =
                                                        (name11.into_bytes()).into_boxed_slice();
                                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                                    let len12 = vec12.len();
                                                    ::core::mem::forget(vec12);
                                                    *base.add(8).cast::<usize>() = len12;
                                                    *base.add(4).cast::<*mut u8>() =
                                                        ptr12.cast_mut();
                                                }
                                                V22::Composite(e) => {
                                                    *base.add(0).cast::<u8>() = (37i32) as u8;
                                                    let super::super::super::super::wasi::rdbms::postgres::CompositeType{ name:name13, attributes:attributes13, } = e;
                                                    let vec14 =
                                                        (name13.into_bytes()).into_boxed_slice();
                                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                                    let len14 = vec14.len();
                                                    ::core::mem::forget(vec14);
                                                    *base.add(8).cast::<usize>() = len14;
                                                    *base.add(4).cast::<*mut u8>() =
                                                        ptr14.cast_mut();
                                                    let vec17 = attributes13;
                                                    let len17 = vec17.len();
                                                    let layout17 = _rt::alloc::Layout::from_size_align_unchecked(vec17.len() * 12, 4);
                                                    let result17 = if layout17.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout17)
                                                            .cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(
                                                                layout17,
                                                            );
                                                        }
                                                        ptr
                                                    } else {
                                                        {
                                                            ::core::ptr::null_mut()
                                                        }
                                                    };
                                                    for (i, e) in vec17.into_iter().enumerate() {
                                                        let base = result17.add(i * 12);
                                                        {
                                                            let (t15_0, t15_1) = e;
                                                            let vec16 = (t15_0.into_bytes())
                                                                .into_boxed_slice();
                                                            let ptr16 = vec16.as_ptr().cast::<u8>();
                                                            let len16 = vec16.len();
                                                            ::core::mem::forget(vec16);
                                                            *base.add(4).cast::<usize>() = len16;
                                                            *base.add(0).cast::<*mut u8>() =
                                                                ptr16.cast_mut();
                                                            *base.add(8).cast::<i32>() =
                                                                _rt::as_i32(t15_1);
                                                        }
                                                    }
                                                    *base.add(16).cast::<usize>() = len17;
                                                    *base.add(12).cast::<*mut u8>() = result17;
                                                }
                                                V22::Domain(e) => {
                                                    *base.add(0).cast::<u8>() = (38i32) as u8;
                                                    let super::super::super::super::wasi::rdbms::postgres::DomainType{ name:name18, base_type:base_type18, } = e;
                                                    let vec19 =
                                                        (name18.into_bytes()).into_boxed_slice();
                                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                                    let len19 = vec19.len();
                                                    ::core::mem::forget(vec19);
                                                    *base.add(8).cast::<usize>() = len19;
                                                    *base.add(4).cast::<*mut u8>() =
                                                        ptr19.cast_mut();
                                                    *base.add(12).cast::<i32>() =
                                                        _rt::as_i32(base_type18);
                                                }
                                                V22::Range(e) => {
                                                    *base.add(0).cast::<u8>() = (39i32) as u8;
                                                    let super::super::super::super::wasi::rdbms::postgres::RangeType{ name:name20, base_type:base_type20, } = e;
                                                    let vec21 =
                                                        (name20.into_bytes()).into_boxed_slice();
                                                    let ptr21 = vec21.as_ptr().cast::<u8>();
                                                    let len21 = vec21.len();
                                                    ::core::mem::forget(vec21);
                                                    *base.add(8).cast::<usize>() = len21;
                                                    *base.add(4).cast::<*mut u8>() =
                                                        ptr21.cast_mut();
                                                    *base.add(12).cast::<i32>() =
                                                        _rt::as_i32(base_type20);
                                                }
                                                V22::Array(e) => {
                                                    *base.add(0).cast::<u8>() = (40i32) as u8;
                                                    *base.add(4).cast::<i32>() = _rt::as_i32(e);
                                                }
                                            }
                                        }
                                    }
                                    *base.add(20).cast::<usize>() = len23;
                                    *base.add(16).cast::<*mut u8>() = result23;
                                    let vec24 = (db_type_name8.into_bytes()).into_boxed_slice();
                                    let ptr24 = vec24.as_ptr().cast::<u8>();
                                    let len24 = vec24.len();
                                    ::core::mem::forget(vec24);
                                    *base.add(28).cast::<usize>() = len24;
                                    *base.add(24).cast::<*mut u8>() = ptr24.cast_mut();
                                }
                            }
                            *ptr6.add(8).cast::<usize>() = len25;
                            *ptr6.add(4).cast::<*mut u8>() = result25;
                            let vec131 = rows7;
                            let len131 = vec131.len();
                            let layout131 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec131.len() * 8, 4);
                            let result131 = if layout131.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout131).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout131);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec131.into_iter().enumerate() {
                                let base = result131.add(i * 8);
                                {
                                    let super::super::super::super::wasi::rdbms::postgres::DbRow {
                                        values: values26,
                                    } = e;
                                    let vec130 = values26;
                                    let len130 = vec130.len();
                                    let layout130 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec130.len() * 8,
                                        4,
                                    );
                                    let result130 = if layout130.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout130).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout130);
                                        }
                                        ptr
                                    } else {
                                        {
                                            ::core::ptr::null_mut()
                                        }
                                    };
                                    for (i, e) in vec130.into_iter().enumerate() {
                                        let base = result130.add(i * 8);
                                        {
                                            let super::super::super::super::wasi::rdbms::postgres::DbValue{ nodes:nodes27, } = e;
                                            let vec129 = nodes27;
                                            let len129 = vec129.len();
                                            let layout129 =
                                                _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec129.len() * 56,
                                                    8,
                                                );
                                            let result129 = if layout129.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout129).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout129);
                                                }
                                                ptr
                                            } else {
                                                {
                                                    ::core::ptr::null_mut()
                                                }
                                            };
                                            for (i, e) in vec129.into_iter().enumerate() {
                                                let base = result129.add(i * 56);
                                                {
                                                    use super::super::super::super::wasi::rdbms::postgres::DbValueNode as V128;
                                                    match e {
                                                        V128::Character(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (0i32) as u8;
                                                            *base.add(8).cast::<u8>() =
                                                                (_rt::as_i32(e)) as u8;
                                                        }
                                                        V128::Int2(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (1i32) as u8;
                                                            *base.add(8).cast::<u16>() =
                                                                (_rt::as_i32(e)) as u16;
                                                        }
                                                        V128::Int4(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (2i32) as u8;
                                                            *base.add(8).cast::<i32>() =
                                                                _rt::as_i32(e);
                                                        }
                                                        V128::Int8(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (3i32) as u8;
                                                            *base.add(8).cast::<i64>() =
                                                                _rt::as_i64(e);
                                                        }
                                                        V128::Float4(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (4i32) as u8;
                                                            *base.add(8).cast::<f32>() =
                                                                _rt::as_f32(e);
                                                        }
                                                        V128::Float8(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (5i32) as u8;
                                                            *base.add(8).cast::<f64>() =
                                                                _rt::as_f64(e);
                                                        }
                                                        V128::Numeric(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (6i32) as u8;
                                                            let vec28 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr28 = vec28.as_ptr().cast::<u8>();
                                                            let len28 = vec28.len();
                                                            ::core::mem::forget(vec28);
                                                            *base.add(12).cast::<usize>() = len28;
                                                            *base.add(8).cast::<*mut u8>() =
                                                                ptr28.cast_mut();
                                                        }
                                                        V128::Boolean(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (7i32) as u8;
                                                            *base.add(8).cast::<u8>() = (match e {
                                                                true => 1,
                                                                false => 0,
                                                            })
                                                                as u8;
                                                        }
                                                        V128::Text(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (8i32) as u8;
                                                            let vec29 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                                            let len29 = vec29.len();
                                                            ::core::mem::forget(vec29);
                                                            *base.add(12).cast::<usize>() = len29;
                                                            *base.add(8).cast::<*mut u8>() =
                                                                ptr29.cast_mut();
                                                        }
                                                        V128::Varchar(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (9i32) as u8;
                                                            let vec30 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                                            let len30 = vec30.len();
                                                            ::core::mem::forget(vec30);
                                                            *base.add(12).cast::<usize>() = len30;
                                                            *base.add(8).cast::<*mut u8>() =
                                                                ptr30.cast_mut();
                                                        }
                                                        V128::Bpchar(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (10i32) as u8;
                                                            let vec31 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr31 = vec31.as_ptr().cast::<u8>();
                                                            let len31 = vec31.len();
                                                            ::core::mem::forget(vec31);
                                                            *base.add(12).cast::<usize>() = len31;
                                                            *base.add(8).cast::<*mut u8>() =
                                                                ptr31.cast_mut();
                                                        }
                                                        V128::Timestamp(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (11i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Timestamp{ date:date32, time:time32, } = e;
                                                            let super::super::super::super::wasi::rdbms::postgres::Date{ year:year33, month:month33, day:day33, } = date32;
                                                            *base.add(8).cast::<i32>() =
                                                                _rt::as_i32(year33);
                                                            *base.add(12).cast::<u8>() =
                                                                (_rt::as_i32(month33)) as u8;
                                                            *base.add(13).cast::<u8>() =
                                                                (_rt::as_i32(day33)) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour34, minute:minute34, second:second34, nanosecond:nanosecond34, } = time32;
                                                            *base.add(16).cast::<u8>() =
                                                                (_rt::as_i32(hour34)) as u8;
                                                            *base.add(17).cast::<u8>() =
                                                                (_rt::as_i32(minute34)) as u8;
                                                            *base.add(18).cast::<u8>() =
                                                                (_rt::as_i32(second34)) as u8;
                                                            *base.add(20).cast::<i32>() =
                                                                _rt::as_i32(nanosecond34);
                                                        }
                                                        V128::Timestamptz(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (12i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Timestamptz{ timestamp:timestamp35, offset:offset35, } = e;
                                                            let super::super::super::super::wasi::rdbms::postgres::Timestamp{ date:date36, time:time36, } = timestamp35;
                                                            let super::super::super::super::wasi::rdbms::postgres::Date{ year:year37, month:month37, day:day37, } = date36;
                                                            *base.add(8).cast::<i32>() =
                                                                _rt::as_i32(year37);
                                                            *base.add(12).cast::<u8>() =
                                                                (_rt::as_i32(month37)) as u8;
                                                            *base.add(13).cast::<u8>() =
                                                                (_rt::as_i32(day37)) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour38, minute:minute38, second:second38, nanosecond:nanosecond38, } = time36;
                                                            *base.add(16).cast::<u8>() =
                                                                (_rt::as_i32(hour38)) as u8;
                                                            *base.add(17).cast::<u8>() =
                                                                (_rt::as_i32(minute38)) as u8;
                                                            *base.add(18).cast::<u8>() =
                                                                (_rt::as_i32(second38)) as u8;
                                                            *base.add(20).cast::<i32>() =
                                                                _rt::as_i32(nanosecond38);
                                                            *base.add(24).cast::<i32>() =
                                                                _rt::as_i32(offset35);
                                                        }
                                                        V128::Date(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (13i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Date{ year:year39, month:month39, day:day39, } = e;
                                                            *base.add(8).cast::<i32>() =
                                                                _rt::as_i32(year39);
                                                            *base.add(12).cast::<u8>() =
                                                                (_rt::as_i32(month39)) as u8;
                                                            *base.add(13).cast::<u8>() =
                                                                (_rt::as_i32(day39)) as u8;
                                                        }
                                                        V128::Time(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (14i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour40, minute:minute40, second:second40, nanosecond:nanosecond40, } = e;
                                                            *base.add(8).cast::<u8>() =
                                                                (_rt::as_i32(hour40)) as u8;
                                                            *base.add(9).cast::<u8>() =
                                                                (_rt::as_i32(minute40)) as u8;
                                                            *base.add(10).cast::<u8>() =
                                                                (_rt::as_i32(second40)) as u8;
                                                            *base.add(12).cast::<i32>() =
                                                                _rt::as_i32(nanosecond40);
                                                        }
                                                        V128::Timetz(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (15i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Timetz{ time:time41, offset:offset41, } = e;
                                                            let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour42, minute:minute42, second:second42, nanosecond:nanosecond42, } = time41;
                                                            *base.add(8).cast::<u8>() =
                                                                (_rt::as_i32(hour42)) as u8;
                                                            *base.add(9).cast::<u8>() =
                                                                (_rt::as_i32(minute42)) as u8;
                                                            *base.add(10).cast::<u8>() =
                                                                (_rt::as_i32(second42)) as u8;
                                                            *base.add(12).cast::<i32>() =
                                                                _rt::as_i32(nanosecond42);
                                                            *base.add(16).cast::<i32>() =
                                                                _rt::as_i32(offset41);
                                                        }
                                                        V128::Interval(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (16i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Interval{ months:months43, days:days43, microseconds:microseconds43, } = e;
                                                            *base.add(8).cast::<i32>() =
                                                                _rt::as_i32(months43);
                                                            *base.add(12).cast::<i32>() =
                                                                _rt::as_i32(days43);
                                                            *base.add(16).cast::<i64>() =
                                                                _rt::as_i64(microseconds43);
                                                        }
                                                        V128::Bytea(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (17i32) as u8;
                                                            let vec44 = (e).into_boxed_slice();
                                                            let ptr44 = vec44.as_ptr().cast::<u8>();
                                                            let len44 = vec44.len();
                                                            ::core::mem::forget(vec44);
                                                            *base.add(12).cast::<usize>() = len44;
                                                            *base.add(8).cast::<*mut u8>() =
                                                                ptr44.cast_mut();
                                                        }
                                                        V128::Json(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (18i32) as u8;
                                                            let vec45 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr45 = vec45.as_ptr().cast::<u8>();
                                                            let len45 = vec45.len();
                                                            ::core::mem::forget(vec45);
                                                            *base.add(12).cast::<usize>() = len45;
                                                            *base.add(8).cast::<*mut u8>() =
                                                                ptr45.cast_mut();
                                                        }
                                                        V128::Jsonb(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (19i32) as u8;
                                                            let vec46 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr46 = vec46.as_ptr().cast::<u8>();
                                                            let len46 = vec46.len();
                                                            ::core::mem::forget(vec46);
                                                            *base.add(12).cast::<usize>() = len46;
                                                            *base.add(8).cast::<*mut u8>() =
                                                                ptr46.cast_mut();
                                                        }
                                                        V128::Jsonpath(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (20i32) as u8;
                                                            let vec47 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr47 = vec47.as_ptr().cast::<u8>();
                                                            let len47 = vec47.len();
                                                            ::core::mem::forget(vec47);
                                                            *base.add(12).cast::<usize>() = len47;
                                                            *base.add(8).cast::<*mut u8>() =
                                                                ptr47.cast_mut();
                                                        }
                                                        V128::Xml(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (21i32) as u8;
                                                            let vec48 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr48 = vec48.as_ptr().cast::<u8>();
                                                            let len48 = vec48.len();
                                                            ::core::mem::forget(vec48);
                                                            *base.add(12).cast::<usize>() = len48;
                                                            *base.add(8).cast::<*mut u8>() =
                                                                ptr48.cast_mut();
                                                        }
                                                        V128::Uuid(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (22i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Uuid{ high_bits:high_bits49, low_bits:low_bits49, } = e;
                                                            *base.add(8).cast::<i64>() =
                                                                _rt::as_i64(high_bits49);
                                                            *base.add(16).cast::<i64>() =
                                                                _rt::as_i64(low_bits49);
                                                        }
                                                        V128::Inet(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (23i32) as u8;
                                                            use super::super::super::super::wasi::rdbms::postgres::IpAddress as V52;
                                                            match e {
                                                                V52::Ipv4(e) => {
                                                                    *base.add(8).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    let (
                                                                        t50_0,
                                                                        t50_1,
                                                                        t50_2,
                                                                        t50_3,
                                                                    ) = e;
                                                                    *base.add(10).cast::<u8>() =
                                                                        (_rt::as_i32(t50_0)) as u8;
                                                                    *base.add(11).cast::<u8>() =
                                                                        (_rt::as_i32(t50_1)) as u8;
                                                                    *base.add(12).cast::<u8>() =
                                                                        (_rt::as_i32(t50_2)) as u8;
                                                                    *base.add(13).cast::<u8>() =
                                                                        (_rt::as_i32(t50_3)) as u8;
                                                                }
                                                                V52::Ipv6(e) => {
                                                                    *base.add(8).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let (
                                                                        t51_0,
                                                                        t51_1,
                                                                        t51_2,
                                                                        t51_3,
                                                                        t51_4,
                                                                        t51_5,
                                                                        t51_6,
                                                                        t51_7,
                                                                    ) = e;
                                                                    *base.add(10).cast::<u16>() =
                                                                        (_rt::as_i32(t51_0)) as u16;
                                                                    *base.add(12).cast::<u16>() =
                                                                        (_rt::as_i32(t51_1)) as u16;
                                                                    *base.add(14).cast::<u16>() =
                                                                        (_rt::as_i32(t51_2)) as u16;
                                                                    *base.add(16).cast::<u16>() =
                                                                        (_rt::as_i32(t51_3)) as u16;
                                                                    *base.add(18).cast::<u16>() =
                                                                        (_rt::as_i32(t51_4)) as u16;
                                                                    *base.add(20).cast::<u16>() =
                                                                        (_rt::as_i32(t51_5)) as u16;
                                                                    *base.add(22).cast::<u16>() =
                                                                        (_rt::as_i32(t51_6)) as u16;
                                                                    *base.add(24).cast::<u16>() =
                                                                        (_rt::as_i32(t51_7)) as u16;
                                                                }
                                                            }
                                                        }
                                                        V128::Cidr(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (24i32) as u8;
                                                            use super::super::super::super::wasi::rdbms::postgres::IpAddress as V55;
                                                            match e {
                                                                V55::Ipv4(e) => {
                                                                    *base.add(8).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    let (
                                                                        t53_0,
                                                                        t53_1,
                                                                        t53_2,
                                                                        t53_3,
                                                                    ) = e;
                                                                    *base.add(10).cast::<u8>() =
                                                                        (_rt::as_i32(t53_0)) as u8;
                                                                    *base.add(11).cast::<u8>() =
                                                                        (_rt::as_i32(t53_1)) as u8;
                                                                    *base.add(12).cast::<u8>() =
                                                                        (_rt::as_i32(t53_2)) as u8;
                                                                    *base.add(13).cast::<u8>() =
                                                                        (_rt::as_i32(t53_3)) as u8;
                                                                }
                                                                V55::Ipv6(e) => {
                                                                    *base.add(8).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let (
                                                                        t54_0,
                                                                        t54_1,
                                                                        t54_2,
                                                                        t54_3,
                                                                        t54_4,
                                                                        t54_5,
                                                                        t54_6,
                                                                        t54_7,
                                                                    ) = e;
                                                                    *base.add(10).cast::<u16>() =
                                                                        (_rt::as_i32(t54_0)) as u16;
                                                                    *base.add(12).cast::<u16>() =
                                                                        (_rt::as_i32(t54_1)) as u16;
                                                                    *base.add(14).cast::<u16>() =
                                                                        (_rt::as_i32(t54_2)) as u16;
                                                                    *base.add(16).cast::<u16>() =
                                                                        (_rt::as_i32(t54_3)) as u16;
                                                                    *base.add(18).cast::<u16>() =
                                                                        (_rt::as_i32(t54_4)) as u16;
                                                                    *base.add(20).cast::<u16>() =
                                                                        (_rt::as_i32(t54_5)) as u16;
                                                                    *base.add(22).cast::<u16>() =
                                                                        (_rt::as_i32(t54_6)) as u16;
                                                                    *base.add(24).cast::<u16>() =
                                                                        (_rt::as_i32(t54_7)) as u16;
                                                                }
                                                            }
                                                        }
                                                        V128::Macaddr(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (25i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::MacAddress{ octets:octets56, } = e;
                                                            let (
                                                                t57_0,
                                                                t57_1,
                                                                t57_2,
                                                                t57_3,
                                                                t57_4,
                                                                t57_5,
                                                            ) = octets56;
                                                            *base.add(8).cast::<u8>() =
                                                                (_rt::as_i32(t57_0)) as u8;
                                                            *base.add(9).cast::<u8>() =
                                                                (_rt::as_i32(t57_1)) as u8;
                                                            *base.add(10).cast::<u8>() =
                                                                (_rt::as_i32(t57_2)) as u8;
                                                            *base.add(11).cast::<u8>() =
                                                                (_rt::as_i32(t57_3)) as u8;
                                                            *base.add(12).cast::<u8>() =
                                                                (_rt::as_i32(t57_4)) as u8;
                                                            *base.add(13).cast::<u8>() =
                                                                (_rt::as_i32(t57_5)) as u8;
                                                        }
                                                        V128::Bit(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (26i32) as u8;
                                                            let vec58 = e;
                                                            let len58 = vec58.len();
                                                            let layout58 = _rt::alloc::Layout::from_size_align_unchecked(vec58.len() * 1, 1);
                                                            let result58 = if layout58.size() != 0 {
                                                                let ptr =
                                                                    _rt::alloc::alloc(layout58)
                                                                        .cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(
                                                                        layout58,
                                                                    );
                                                                }
                                                                ptr
                                                            } else {
                                                                {
                                                                    ::core::ptr::null_mut()
                                                                }
                                                            };
                                                            for (i, e) in
                                                                vec58.into_iter().enumerate()
                                                            {
                                                                let base = result58.add(i * 1);
                                                                {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (match e {
                                                                            true => 1,
                                                                            false => 0,
                                                                        })
                                                                            as u8;
                                                                }
                                                            }
                                                            *base.add(12).cast::<usize>() = len58;
                                                            *base.add(8).cast::<*mut u8>() =
                                                                result58;
                                                        }
                                                        V128::Varbit(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (27i32) as u8;
                                                            let vec59 = e;
                                                            let len59 = vec59.len();
                                                            let layout59 = _rt::alloc::Layout::from_size_align_unchecked(vec59.len() * 1, 1);
                                                            let result59 = if layout59.size() != 0 {
                                                                let ptr =
                                                                    _rt::alloc::alloc(layout59)
                                                                        .cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(
                                                                        layout59,
                                                                    );
                                                                }
                                                                ptr
                                                            } else {
                                                                {
                                                                    ::core::ptr::null_mut()
                                                                }
                                                            };
                                                            for (i, e) in
                                                                vec59.into_iter().enumerate()
                                                            {
                                                                let base = result59.add(i * 1);
                                                                {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (match e {
                                                                            true => 1,
                                                                            false => 0,
                                                                        })
                                                                            as u8;
                                                                }
                                                            }
                                                            *base.add(12).cast::<usize>() = len59;
                                                            *base.add(8).cast::<*mut u8>() =
                                                                result59;
                                                        }
                                                        V128::Int4range(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (28i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Int4range{ start:start60, end:end60, } = e;
                                                            use super::super::super::super::wasi::rdbms::postgres::Int4bound as V61;
                                                            match start60 {
                                                                V61::Included(e) => {
                                                                    *base.add(8).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    *base.add(12).cast::<i32>() =
                                                                        _rt::as_i32(e);
                                                                }
                                                                V61::Excluded(e) => {
                                                                    *base.add(8).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    *base.add(12).cast::<i32>() =
                                                                        _rt::as_i32(e);
                                                                }
                                                                V61::Unbounded => {
                                                                    *base.add(8).cast::<u8>() =
                                                                        (2i32) as u8;
                                                                }
                                                            }
                                                            use super::super::super::super::wasi::rdbms::postgres::Int4bound as V62;
                                                            match end60 {
                                                                V62::Included(e) => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    *base.add(20).cast::<i32>() =
                                                                        _rt::as_i32(e);
                                                                }
                                                                V62::Excluded(e) => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    *base.add(20).cast::<i32>() =
                                                                        _rt::as_i32(e);
                                                                }
                                                                V62::Unbounded => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (2i32) as u8;
                                                                }
                                                            }
                                                        }
                                                        V128::Int8range(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (29i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Int8range{ start:start63, end:end63, } = e;
                                                            use super::super::super::super::wasi::rdbms::postgres::Int8bound as V64;
                                                            match start63 {
                                                                V64::Included(e) => {
                                                                    *base.add(8).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    *base.add(16).cast::<i64>() =
                                                                        _rt::as_i64(e);
                                                                }
                                                                V64::Excluded(e) => {
                                                                    *base.add(8).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    *base.add(16).cast::<i64>() =
                                                                        _rt::as_i64(e);
                                                                }
                                                                V64::Unbounded => {
                                                                    *base.add(8).cast::<u8>() =
                                                                        (2i32) as u8;
                                                                }
                                                            }
                                                            use super::super::super::super::wasi::rdbms::postgres::Int8bound as V65;
                                                            match end63 {
                                                                V65::Included(e) => {
                                                                    *base.add(24).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    *base.add(32).cast::<i64>() =
                                                                        _rt::as_i64(e);
                                                                }
                                                                V65::Excluded(e) => {
                                                                    *base.add(24).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    *base.add(32).cast::<i64>() =
                                                                        _rt::as_i64(e);
                                                                }
                                                                V65::Unbounded => {
                                                                    *base.add(24).cast::<u8>() =
                                                                        (2i32) as u8;
                                                                }
                                                            }
                                                        }
                                                        V128::Numrange(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (30i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Numrange{ start:start66, end:end66, } = e;
                                                            use super::super::super::super::wasi::rdbms::postgres::Numbound as V69;
                                                            match start66 {
                                                                V69::Included(e) => {
                                                                    *base.add(8).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    let vec67 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr67 =
                                                                        vec67.as_ptr().cast::<u8>();
                                                                    let len67 = vec67.len();
                                                                    ::core::mem::forget(vec67);
                                                                    *base.add(16).cast::<usize>() =
                                                                        len67;
                                                                    *base
                                                                        .add(12)
                                                                        .cast::<*mut u8>() =
                                                                        ptr67.cast_mut();
                                                                }
                                                                V69::Excluded(e) => {
                                                                    *base.add(8).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let vec68 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr68 =
                                                                        vec68.as_ptr().cast::<u8>();
                                                                    let len68 = vec68.len();
                                                                    ::core::mem::forget(vec68);
                                                                    *base.add(16).cast::<usize>() =
                                                                        len68;
                                                                    *base
                                                                        .add(12)
                                                                        .cast::<*mut u8>() =
                                                                        ptr68.cast_mut();
                                                                }
                                                                V69::Unbounded => {
                                                                    *base.add(8).cast::<u8>() =
                                                                        (2i32) as u8;
                                                                }
                                                            }
                                                            use super::super::super::super::wasi::rdbms::postgres::Numbound as V72;
                                                            match end66 {
                                                                V72::Included(e) => {
                                                                    *base.add(20).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    let vec70 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr70 =
                                                                        vec70.as_ptr().cast::<u8>();
                                                                    let len70 = vec70.len();
                                                                    ::core::mem::forget(vec70);
                                                                    *base.add(28).cast::<usize>() =
                                                                        len70;
                                                                    *base
                                                                        .add(24)
                                                                        .cast::<*mut u8>() =
                                                                        ptr70.cast_mut();
                                                                }
                                                                V72::Excluded(e) => {
                                                                    *base.add(20).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let vec71 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr71 =
                                                                        vec71.as_ptr().cast::<u8>();
                                                                    let len71 = vec71.len();
                                                                    ::core::mem::forget(vec71);
                                                                    *base.add(28).cast::<usize>() =
                                                                        len71;
                                                                    *base
                                                                        .add(24)
                                                                        .cast::<*mut u8>() =
                                                                        ptr71.cast_mut();
                                                                }
                                                                V72::Unbounded => {
                                                                    *base.add(20).cast::<u8>() =
                                                                        (2i32) as u8;
                                                                }
                                                            }
                                                        }
                                                        V128::Tsrange(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (31i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Tsrange{ start:start73, end:end73, } = e;
                                                            use super::super::super::super::wasi::rdbms::postgres::Tsbound as V80;
                                                            match start73 {
                                                                V80::Included(e) => {
                                                                    *base.add(8).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Timestamp{ date:date74, time:time74, } = e;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Date{ year:year75, month:month75, day:day75, } = date74;
                                                                    *base.add(12).cast::<i32>() =
                                                                        _rt::as_i32(year75);
                                                                    *base.add(16).cast::<u8>() =
                                                                        (_rt::as_i32(month75))
                                                                            as u8;
                                                                    *base.add(17).cast::<u8>() =
                                                                        (_rt::as_i32(day75)) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour76, minute:minute76, second:second76, nanosecond:nanosecond76, } = time74;
                                                                    *base.add(20).cast::<u8>() =
                                                                        (_rt::as_i32(hour76)) as u8;
                                                                    *base.add(21).cast::<u8>() =
                                                                        (_rt::as_i32(minute76))
                                                                            as u8;
                                                                    *base.add(22).cast::<u8>() =
                                                                        (_rt::as_i32(second76))
                                                                            as u8;
                                                                    *base.add(24).cast::<i32>() =
                                                                        _rt::as_i32(nanosecond76);
                                                                }
                                                                V80::Excluded(e) => {
                                                                    *base.add(8).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Timestamp{ date:date77, time:time77, } = e;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Date{ year:year78, month:month78, day:day78, } = date77;
                                                                    *base.add(12).cast::<i32>() =
                                                                        _rt::as_i32(year78);
                                                                    *base.add(16).cast::<u8>() =
                                                                        (_rt::as_i32(month78))
                                                                            as u8;
                                                                    *base.add(17).cast::<u8>() =
                                                                        (_rt::as_i32(day78)) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour79, minute:minute79, second:second79, nanosecond:nanosecond79, } = time77;
                                                                    *base.add(20).cast::<u8>() =
                                                                        (_rt::as_i32(hour79)) as u8;
                                                                    *base.add(21).cast::<u8>() =
                                                                        (_rt::as_i32(minute79))
                                                                            as u8;
                                                                    *base.add(22).cast::<u8>() =
                                                                        (_rt::as_i32(second79))
                                                                            as u8;
                                                                    *base.add(24).cast::<i32>() =
                                                                        _rt::as_i32(nanosecond79);
                                                                }
                                                                V80::Unbounded => {
                                                                    *base.add(8).cast::<u8>() =
                                                                        (2i32) as u8;
                                                                }
                                                            }
                                                            use super::super::super::super::wasi::rdbms::postgres::Tsbound as V87;
                                                            match end73 {
                                                                V87::Included(e) => {
                                                                    *base.add(28).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Timestamp{ date:date81, time:time81, } = e;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Date{ year:year82, month:month82, day:day82, } = date81;
                                                                    *base.add(32).cast::<i32>() =
                                                                        _rt::as_i32(year82);
                                                                    *base.add(36).cast::<u8>() =
                                                                        (_rt::as_i32(month82))
                                                                            as u8;
                                                                    *base.add(37).cast::<u8>() =
                                                                        (_rt::as_i32(day82)) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour83, minute:minute83, second:second83, nanosecond:nanosecond83, } = time81;
                                                                    *base.add(40).cast::<u8>() =
                                                                        (_rt::as_i32(hour83)) as u8;
                                                                    *base.add(41).cast::<u8>() =
                                                                        (_rt::as_i32(minute83))
                                                                            as u8;
                                                                    *base.add(42).cast::<u8>() =
                                                                        (_rt::as_i32(second83))
                                                                            as u8;
                                                                    *base.add(44).cast::<i32>() =
                                                                        _rt::as_i32(nanosecond83);
                                                                }
                                                                V87::Excluded(e) => {
                                                                    *base.add(28).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Timestamp{ date:date84, time:time84, } = e;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Date{ year:year85, month:month85, day:day85, } = date84;
                                                                    *base.add(32).cast::<i32>() =
                                                                        _rt::as_i32(year85);
                                                                    *base.add(36).cast::<u8>() =
                                                                        (_rt::as_i32(month85))
                                                                            as u8;
                                                                    *base.add(37).cast::<u8>() =
                                                                        (_rt::as_i32(day85)) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour86, minute:minute86, second:second86, nanosecond:nanosecond86, } = time84;
                                                                    *base.add(40).cast::<u8>() =
                                                                        (_rt::as_i32(hour86)) as u8;
                                                                    *base.add(41).cast::<u8>() =
                                                                        (_rt::as_i32(minute86))
                                                                            as u8;
                                                                    *base.add(42).cast::<u8>() =
                                                                        (_rt::as_i32(second86))
                                                                            as u8;
                                                                    *base.add(44).cast::<i32>() =
                                                                        _rt::as_i32(nanosecond86);
                                                                }
                                                                V87::Unbounded => {
                                                                    *base.add(28).cast::<u8>() =
                                                                        (2i32) as u8;
                                                                }
                                                            }
                                                        }
                                                        V128::Tstzrange(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (32i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Tstzrange{ start:start88, end:end88, } = e;
                                                            use super::super::super::super::wasi::rdbms::postgres::Tstzbound as V97;
                                                            match start88 {
                                                                V97::Included(e) => {
                                                                    *base.add(8).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Timestamptz{ timestamp:timestamp89, offset:offset89, } = e;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Timestamp{ date:date90, time:time90, } = timestamp89;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Date{ year:year91, month:month91, day:day91, } = date90;
                                                                    *base.add(12).cast::<i32>() =
                                                                        _rt::as_i32(year91);
                                                                    *base.add(16).cast::<u8>() =
                                                                        (_rt::as_i32(month91))
                                                                            as u8;
                                                                    *base.add(17).cast::<u8>() =
                                                                        (_rt::as_i32(day91)) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour92, minute:minute92, second:second92, nanosecond:nanosecond92, } = time90;
                                                                    *base.add(20).cast::<u8>() =
                                                                        (_rt::as_i32(hour92)) as u8;
                                                                    *base.add(21).cast::<u8>() =
                                                                        (_rt::as_i32(minute92))
                                                                            as u8;
                                                                    *base.add(22).cast::<u8>() =
                                                                        (_rt::as_i32(second92))
                                                                            as u8;
                                                                    *base.add(24).cast::<i32>() =
                                                                        _rt::as_i32(nanosecond92);
                                                                    *base.add(28).cast::<i32>() =
                                                                        _rt::as_i32(offset89);
                                                                }
                                                                V97::Excluded(e) => {
                                                                    *base.add(8).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Timestamptz{ timestamp:timestamp93, offset:offset93, } = e;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Timestamp{ date:date94, time:time94, } = timestamp93;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Date{ year:year95, month:month95, day:day95, } = date94;
                                                                    *base.add(12).cast::<i32>() =
                                                                        _rt::as_i32(year95);
                                                                    *base.add(16).cast::<u8>() =
                                                                        (_rt::as_i32(month95))
                                                                            as u8;
                                                                    *base.add(17).cast::<u8>() =
                                                                        (_rt::as_i32(day95)) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour96, minute:minute96, second:second96, nanosecond:nanosecond96, } = time94;
                                                                    *base.add(20).cast::<u8>() =
                                                                        (_rt::as_i32(hour96)) as u8;
                                                                    *base.add(21).cast::<u8>() =
                                                                        (_rt::as_i32(minute96))
                                                                            as u8;
                                                                    *base.add(22).cast::<u8>() =
                                                                        (_rt::as_i32(second96))
                                                                            as u8;
                                                                    *base.add(24).cast::<i32>() =
                                                                        _rt::as_i32(nanosecond96);
                                                                    *base.add(28).cast::<i32>() =
                                                                        _rt::as_i32(offset93);
                                                                }
                                                                V97::Unbounded => {
                                                                    *base.add(8).cast::<u8>() =
                                                                        (2i32) as u8;
                                                                }
                                                            }
                                                            use super::super::super::super::wasi::rdbms::postgres::Tstzbound as V106;
                                                            match end88 {
                                                                V106::Included(e) => {
                                                                    *base.add(32).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Timestamptz{ timestamp:timestamp98, offset:offset98, } = e;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Timestamp{ date:date99, time:time99, } = timestamp98;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Date{ year:year100, month:month100, day:day100, } = date99;
                                                                    *base.add(36).cast::<i32>() =
                                                                        _rt::as_i32(year100);
                                                                    *base.add(40).cast::<u8>() =
                                                                        (_rt::as_i32(month100))
                                                                            as u8;
                                                                    *base.add(41).cast::<u8>() =
                                                                        (_rt::as_i32(day100)) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour101, minute:minute101, second:second101, nanosecond:nanosecond101, } = time99;
                                                                    *base.add(44).cast::<u8>() =
                                                                        (_rt::as_i32(hour101))
                                                                            as u8;
                                                                    *base.add(45).cast::<u8>() =
                                                                        (_rt::as_i32(minute101))
                                                                            as u8;
                                                                    *base.add(46).cast::<u8>() =
                                                                        (_rt::as_i32(second101))
                                                                            as u8;
                                                                    *base.add(48).cast::<i32>() =
                                                                        _rt::as_i32(nanosecond101);
                                                                    *base.add(52).cast::<i32>() =
                                                                        _rt::as_i32(offset98);
                                                                }
                                                                V106::Excluded(e) => {
                                                                    *base.add(32).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Timestamptz{ timestamp:timestamp102, offset:offset102, } = e;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Timestamp{ date:date103, time:time103, } = timestamp102;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Date{ year:year104, month:month104, day:day104, } = date103;
                                                                    *base.add(36).cast::<i32>() =
                                                                        _rt::as_i32(year104);
                                                                    *base.add(40).cast::<u8>() =
                                                                        (_rt::as_i32(month104))
                                                                            as u8;
                                                                    *base.add(41).cast::<u8>() =
                                                                        (_rt::as_i32(day104)) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour105, minute:minute105, second:second105, nanosecond:nanosecond105, } = time103;
                                                                    *base.add(44).cast::<u8>() =
                                                                        (_rt::as_i32(hour105))
                                                                            as u8;
                                                                    *base.add(45).cast::<u8>() =
                                                                        (_rt::as_i32(minute105))
                                                                            as u8;
                                                                    *base.add(46).cast::<u8>() =
                                                                        (_rt::as_i32(second105))
                                                                            as u8;
                                                                    *base.add(48).cast::<i32>() =
                                                                        _rt::as_i32(nanosecond105);
                                                                    *base.add(52).cast::<i32>() =
                                                                        _rt::as_i32(offset102);
                                                                }
                                                                V106::Unbounded => {
                                                                    *base.add(32).cast::<u8>() =
                                                                        (2i32) as u8;
                                                                }
                                                            }
                                                        }
                                                        V128::Daterange(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (33i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Daterange{ start:start107, end:end107, } = e;
                                                            use super::super::super::super::wasi::rdbms::postgres::Datebound as V110;
                                                            match start107 {
                                                                V110::Included(e) => {
                                                                    *base.add(8).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Date{ year:year108, month:month108, day:day108, } = e;
                                                                    *base.add(12).cast::<i32>() =
                                                                        _rt::as_i32(year108);
                                                                    *base.add(16).cast::<u8>() =
                                                                        (_rt::as_i32(month108))
                                                                            as u8;
                                                                    *base.add(17).cast::<u8>() =
                                                                        (_rt::as_i32(day108)) as u8;
                                                                }
                                                                V110::Excluded(e) => {
                                                                    *base.add(8).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Date{ year:year109, month:month109, day:day109, } = e;
                                                                    *base.add(12).cast::<i32>() =
                                                                        _rt::as_i32(year109);
                                                                    *base.add(16).cast::<u8>() =
                                                                        (_rt::as_i32(month109))
                                                                            as u8;
                                                                    *base.add(17).cast::<u8>() =
                                                                        (_rt::as_i32(day109)) as u8;
                                                                }
                                                                V110::Unbounded => {
                                                                    *base.add(8).cast::<u8>() =
                                                                        (2i32) as u8;
                                                                }
                                                            }
                                                            use super::super::super::super::wasi::rdbms::postgres::Datebound as V113;
                                                            match end107 {
                                                                V113::Included(e) => {
                                                                    *base.add(20).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Date{ year:year111, month:month111, day:day111, } = e;
                                                                    *base.add(24).cast::<i32>() =
                                                                        _rt::as_i32(year111);
                                                                    *base.add(28).cast::<u8>() =
                                                                        (_rt::as_i32(month111))
                                                                            as u8;
                                                                    *base.add(29).cast::<u8>() =
                                                                        (_rt::as_i32(day111)) as u8;
                                                                }
                                                                V113::Excluded(e) => {
                                                                    *base.add(20).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Date{ year:year112, month:month112, day:day112, } = e;
                                                                    *base.add(24).cast::<i32>() =
                                                                        _rt::as_i32(year112);
                                                                    *base.add(28).cast::<u8>() =
                                                                        (_rt::as_i32(month112))
                                                                            as u8;
                                                                    *base.add(29).cast::<u8>() =
                                                                        (_rt::as_i32(day112)) as u8;
                                                                }
                                                                V113::Unbounded => {
                                                                    *base.add(20).cast::<u8>() =
                                                                        (2i32) as u8;
                                                                }
                                                            }
                                                        }
                                                        V128::Money(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (34i32) as u8;
                                                            *base.add(8).cast::<i64>() =
                                                                _rt::as_i64(e);
                                                        }
                                                        V128::Oid(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (35i32) as u8;
                                                            *base.add(8).cast::<i32>() =
                                                                _rt::as_i32(e);
                                                        }
                                                        V128::Enumeration(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (36i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Enumeration{ name:name114, value:value114, } = e;
                                                            let vec115 = (name114.into_bytes())
                                                                .into_boxed_slice();
                                                            let ptr115 =
                                                                vec115.as_ptr().cast::<u8>();
                                                            let len115 = vec115.len();
                                                            ::core::mem::forget(vec115);
                                                            *base.add(12).cast::<usize>() = len115;
                                                            *base.add(8).cast::<*mut u8>() =
                                                                ptr115.cast_mut();
                                                            let vec116 = (value114.into_bytes())
                                                                .into_boxed_slice();
                                                            let ptr116 =
                                                                vec116.as_ptr().cast::<u8>();
                                                            let len116 = vec116.len();
                                                            ::core::mem::forget(vec116);
                                                            *base.add(20).cast::<usize>() = len116;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr116.cast_mut();
                                                        }
                                                        V128::Composite(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (37i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Composite{ name:name117, values:values117, } = e;
                                                            let vec118 = (name117.into_bytes())
                                                                .into_boxed_slice();
                                                            let ptr118 =
                                                                vec118.as_ptr().cast::<u8>();
                                                            let len118 = vec118.len();
                                                            ::core::mem::forget(vec118);
                                                            *base.add(12).cast::<usize>() = len118;
                                                            *base.add(8).cast::<*mut u8>() =
                                                                ptr118.cast_mut();
                                                            let vec119 =
                                                                (values117).into_boxed_slice();
                                                            let ptr119 =
                                                                vec119.as_ptr().cast::<u8>();
                                                            let len119 = vec119.len();
                                                            ::core::mem::forget(vec119);
                                                            *base.add(20).cast::<usize>() = len119;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr119.cast_mut();
                                                        }
                                                        V128::Domain(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (38i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Domain{ name:name120, value:value120, } = e;
                                                            let vec121 = (name120.into_bytes())
                                                                .into_boxed_slice();
                                                            let ptr121 =
                                                                vec121.as_ptr().cast::<u8>();
                                                            let len121 = vec121.len();
                                                            ::core::mem::forget(vec121);
                                                            *base.add(12).cast::<usize>() = len121;
                                                            *base.add(8).cast::<*mut u8>() =
                                                                ptr121.cast_mut();
                                                            *base.add(16).cast::<i32>() =
                                                                _rt::as_i32(value120);
                                                        }
                                                        V128::Range(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (39i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Range{ name:name122, value:value122, } = e;
                                                            let vec123 = (name122.into_bytes())
                                                                .into_boxed_slice();
                                                            let ptr123 =
                                                                vec123.as_ptr().cast::<u8>();
                                                            let len123 = vec123.len();
                                                            ::core::mem::forget(vec123);
                                                            *base.add(12).cast::<usize>() = len123;
                                                            *base.add(8).cast::<*mut u8>() =
                                                                ptr123.cast_mut();
                                                            let super::super::super::super::wasi::rdbms::postgres::ValuesRange{ start:start124, end:end124, } = value122;
                                                            use super::super::super::super::wasi::rdbms::postgres::ValueBound as V125;
                                                            match start124 {
                                                                V125::Included(e) => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    *base.add(20).cast::<i32>() =
                                                                        _rt::as_i32(e);
                                                                }
                                                                V125::Excluded(e) => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    *base.add(20).cast::<i32>() =
                                                                        _rt::as_i32(e);
                                                                }
                                                                V125::Unbounded => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (2i32) as u8;
                                                                }
                                                            }
                                                            use super::super::super::super::wasi::rdbms::postgres::ValueBound as V126;
                                                            match end124 {
                                                                V126::Included(e) => {
                                                                    *base.add(24).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    *base.add(28).cast::<i32>() =
                                                                        _rt::as_i32(e);
                                                                }
                                                                V126::Excluded(e) => {
                                                                    *base.add(24).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    *base.add(28).cast::<i32>() =
                                                                        _rt::as_i32(e);
                                                                }
                                                                V126::Unbounded => {
                                                                    *base.add(24).cast::<u8>() =
                                                                        (2i32) as u8;
                                                                }
                                                            }
                                                        }
                                                        V128::Array(e) => {
                                                            *base.add(0).cast::<u8>() =
                                                                (40i32) as u8;
                                                            let vec127 = (e).into_boxed_slice();
                                                            let ptr127 =
                                                                vec127.as_ptr().cast::<u8>();
                                                            let len127 = vec127.len();
                                                            ::core::mem::forget(vec127);
                                                            *base.add(12).cast::<usize>() = len127;
                                                            *base.add(8).cast::<*mut u8>() =
                                                                ptr127.cast_mut();
                                                        }
                                                        V128::Null => {
                                                            *base.add(0).cast::<u8>() =
                                                                (41i32) as u8;
                                                        }
                                                    }
                                                }
                                            }
                                            *base.add(4).cast::<usize>() = len129;
                                            *base.add(0).cast::<*mut u8>() = result129;
                                        }
                                    }
                                    *base.add(4).cast::<usize>() = len130;
                                    *base.add(0).cast::<*mut u8>() = result130;
                                }
                            }
                            *ptr6.add(16).cast::<usize>() = len131;
                            *ptr6.add(12).cast::<*mut u8>() = result131;
                        }
                        Err(e) => {
                            *ptr6.add(0).cast::<u8>() = (1i32) as u8;
                            let vec132 = (e.into_bytes()).into_boxed_slice();
                            let ptr132 = vec132.as_ptr().cast::<u8>();
                            let len132 = vec132.len();
                            ::core::mem::forget(vec132);
                            *ptr6.add(8).cast::<usize>() = len132;
                            *ptr6.add(4).cast::<*mut u8>() = ptr132.cast_mut();
                        }
                    };
                    ptr6
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_postgres_query<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l22 = *arg0.add(4).cast::<*mut u8>();
                            let l23 = *arg0.add(8).cast::<usize>();
                            let base24 = l22;
                            let len24 = l23;
                            for i in 0..len24 {
                                let base = base24.add(i * 32);
                                {
                                    let l1 = *base.add(8).cast::<*mut u8>();
                                    let l2 = *base.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l1, l2, 1);
                                    let l17 = *base.add(16).cast::<*mut u8>();
                                    let l18 = *base.add(20).cast::<usize>();
                                    let base19 = l17;
                                    let len19 = l18;
                                    for i in 0..len19 {
                                        let base = base19.add(i * 20);
                                        {
                                            let l3 = i32::from(*base.add(0).cast::<u8>());
                                            match l3 {
                                                0 => (),
                                                1 => (),
                                                2 => (),
                                                3 => (),
                                                4 => (),
                                                5 => (),
                                                6 => (),
                                                7 => (),
                                                8 => (),
                                                9 => (),
                                                10 => (),
                                                11 => (),
                                                12 => (),
                                                13 => (),
                                                14 => (),
                                                15 => (),
                                                16 => (),
                                                17 => (),
                                                18 => (),
                                                19 => (),
                                                20 => (),
                                                21 => (),
                                                22 => (),
                                                23 => (),
                                                24 => (),
                                                25 => (),
                                                26 => (),
                                                27 => (),
                                                28 => (),
                                                29 => (),
                                                30 => (),
                                                31 => (),
                                                32 => (),
                                                33 => (),
                                                34 => (),
                                                35 => (),
                                                36 => {
                                                    let l4 = *base.add(4).cast::<*mut u8>();
                                                    let l5 = *base.add(8).cast::<usize>();
                                                    _rt::cabi_dealloc(l4, l5, 1);
                                                }
                                                37 => {
                                                    let l6 = *base.add(4).cast::<*mut u8>();
                                                    let l7 = *base.add(8).cast::<usize>();
                                                    _rt::cabi_dealloc(l6, l7, 1);
                                                    let l10 = *base.add(12).cast::<*mut u8>();
                                                    let l11 = *base.add(16).cast::<usize>();
                                                    let base12 = l10;
                                                    let len12 = l11;
                                                    for i in 0..len12 {
                                                        let base = base12.add(i * 12);
                                                        {
                                                            let l8 = *base.add(0).cast::<*mut u8>();
                                                            let l9 = *base.add(4).cast::<usize>();
                                                            _rt::cabi_dealloc(l8, l9, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(base12, len12 * 12, 4);
                                                }
                                                38 => {
                                                    let l13 = *base.add(4).cast::<*mut u8>();
                                                    let l14 = *base.add(8).cast::<usize>();
                                                    _rt::cabi_dealloc(l13, l14, 1);
                                                }
                                                39 => {
                                                    let l15 = *base.add(4).cast::<*mut u8>();
                                                    let l16 = *base.add(8).cast::<usize>();
                                                    _rt::cabi_dealloc(l15, l16, 1);
                                                }
                                                _ => (),
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(base19, len19 * 20, 4);
                                    let l20 = *base.add(24).cast::<*mut u8>();
                                    let l21 = *base.add(28).cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                }
                            }
                            _rt::cabi_dealloc(base24, len24 * 32, 8);
                            let l83 = *arg0.add(12).cast::<*mut u8>();
                            let l84 = *arg0.add(16).cast::<usize>();
                            let base85 = l83;
                            let len85 = l84;
                            for i in 0..len85 {
                                let base = base85.add(i * 8);
                                {
                                    let l80 = *base.add(0).cast::<*mut u8>();
                                    let l81 = *base.add(4).cast::<usize>();
                                    let base82 = l80;
                                    let len82 = l81;
                                    for i in 0..len82 {
                                        let base = base82.add(i * 8);
                                        {
                                            let l77 = *base.add(0).cast::<*mut u8>();
                                            let l78 = *base.add(4).cast::<usize>();
                                            let base79 = l77;
                                            let len79 = l78;
                                            for i in 0..len79 {
                                                let base = base79.add(i * 56);
                                                {
                                                    let l25 = i32::from(*base.add(0).cast::<u8>());
                                                    match l25 {
                                                        0 => (),
                                                        1 => (),
                                                        2 => (),
                                                        3 => (),
                                                        4 => (),
                                                        5 => (),
                                                        6 => {
                                                            let l26 =
                                                                *base.add(8).cast::<*mut u8>();
                                                            let l27 = *base.add(12).cast::<usize>();
                                                            _rt::cabi_dealloc(l26, l27, 1);
                                                        }
                                                        7 => (),
                                                        8 => {
                                                            let l28 =
                                                                *base.add(8).cast::<*mut u8>();
                                                            let l29 = *base.add(12).cast::<usize>();
                                                            _rt::cabi_dealloc(l28, l29, 1);
                                                        }
                                                        9 => {
                                                            let l30 =
                                                                *base.add(8).cast::<*mut u8>();
                                                            let l31 = *base.add(12).cast::<usize>();
                                                            _rt::cabi_dealloc(l30, l31, 1);
                                                        }
                                                        10 => {
                                                            let l32 =
                                                                *base.add(8).cast::<*mut u8>();
                                                            let l33 = *base.add(12).cast::<usize>();
                                                            _rt::cabi_dealloc(l32, l33, 1);
                                                        }
                                                        11 => (),
                                                        12 => (),
                                                        13 => (),
                                                        14 => (),
                                                        15 => (),
                                                        16 => (),
                                                        17 => {
                                                            let l34 =
                                                                *base.add(8).cast::<*mut u8>();
                                                            let l35 = *base.add(12).cast::<usize>();
                                                            let base36 = l34;
                                                            let len36 = l35;
                                                            _rt::cabi_dealloc(base36, len36 * 1, 1);
                                                        }
                                                        18 => {
                                                            let l37 =
                                                                *base.add(8).cast::<*mut u8>();
                                                            let l38 = *base.add(12).cast::<usize>();
                                                            _rt::cabi_dealloc(l37, l38, 1);
                                                        }
                                                        19 => {
                                                            let l39 =
                                                                *base.add(8).cast::<*mut u8>();
                                                            let l40 = *base.add(12).cast::<usize>();
                                                            _rt::cabi_dealloc(l39, l40, 1);
                                                        }
                                                        20 => {
                                                            let l41 =
                                                                *base.add(8).cast::<*mut u8>();
                                                            let l42 = *base.add(12).cast::<usize>();
                                                            _rt::cabi_dealloc(l41, l42, 1);
                                                        }
                                                        21 => {
                                                            let l43 =
                                                                *base.add(8).cast::<*mut u8>();
                                                            let l44 = *base.add(12).cast::<usize>();
                                                            _rt::cabi_dealloc(l43, l44, 1);
                                                        }
                                                        22 => (),
                                                        23 => (),
                                                        24 => (),
                                                        25 => (),
                                                        26 => {
                                                            let l45 =
                                                                *base.add(8).cast::<*mut u8>();
                                                            let l46 = *base.add(12).cast::<usize>();
                                                            let base47 = l45;
                                                            let len47 = l46;
                                                            _rt::cabi_dealloc(base47, len47 * 1, 1);
                                                        }
                                                        27 => {
                                                            let l48 =
                                                                *base.add(8).cast::<*mut u8>();
                                                            let l49 = *base.add(12).cast::<usize>();
                                                            let base50 = l48;
                                                            let len50 = l49;
                                                            _rt::cabi_dealloc(base50, len50 * 1, 1);
                                                        }
                                                        28 => (),
                                                        29 => (),
                                                        30 => {
                                                            let l51 = i32::from(
                                                                *base.add(8).cast::<u8>(),
                                                            );
                                                            match l51 {
                                                                0 => {
                                                                    let l52 = *base
                                                                        .add(12)
                                                                        .cast::<*mut u8>();
                                                                    let l53 = *base
                                                                        .add(16)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l52, l53, 1);
                                                                }
                                                                1 => {
                                                                    let l54 = *base
                                                                        .add(12)
                                                                        .cast::<*mut u8>();
                                                                    let l55 = *base
                                                                        .add(16)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l54, l55, 1);
                                                                }
                                                                _ => (),
                                                            }
                                                            let l56 = i32::from(
                                                                *base.add(20).cast::<u8>(),
                                                            );
                                                            match l56 {
                                                                0 => {
                                                                    let l57 = *base
                                                                        .add(24)
                                                                        .cast::<*mut u8>();
                                                                    let l58 = *base
                                                                        .add(28)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l57, l58, 1);
                                                                }
                                                                1 => {
                                                                    let l59 = *base
                                                                        .add(24)
                                                                        .cast::<*mut u8>();
                                                                    let l60 = *base
                                                                        .add(28)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l59, l60, 1);
                                                                }
                                                                _ => (),
                                                            }
                                                        }
                                                        31 => (),
                                                        32 => (),
                                                        33 => (),
                                                        34 => (),
                                                        35 => (),
                                                        36 => {
                                                            let l61 =
                                                                *base.add(8).cast::<*mut u8>();
                                                            let l62 = *base.add(12).cast::<usize>();
                                                            _rt::cabi_dealloc(l61, l62, 1);
                                                            let l63 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l64 = *base.add(20).cast::<usize>();
                                                            _rt::cabi_dealloc(l63, l64, 1);
                                                        }
                                                        37 => {
                                                            let l65 =
                                                                *base.add(8).cast::<*mut u8>();
                                                            let l66 = *base.add(12).cast::<usize>();
                                                            _rt::cabi_dealloc(l65, l66, 1);
                                                            let l67 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l68 = *base.add(20).cast::<usize>();
                                                            let base69 = l67;
                                                            let len69 = l68;
                                                            _rt::cabi_dealloc(base69, len69 * 4, 4);
                                                        }
                                                        38 => {
                                                            let l70 =
                                                                *base.add(8).cast::<*mut u8>();
                                                            let l71 = *base.add(12).cast::<usize>();
                                                            _rt::cabi_dealloc(l70, l71, 1);
                                                        }
                                                        39 => {
                                                            let l72 =
                                                                *base.add(8).cast::<*mut u8>();
                                                            let l73 = *base.add(12).cast::<usize>();
                                                            _rt::cabi_dealloc(l72, l73, 1);
                                                        }
                                                        40 => {
                                                            let l74 =
                                                                *base.add(8).cast::<*mut u8>();
                                                            let l75 = *base.add(12).cast::<usize>();
                                                            let base76 = l74;
                                                            let len76 = l75;
                                                            _rt::cabi_dealloc(base76, len76 * 4, 4);
                                                        }
                                                        _ => (),
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(base79, len79 * 56, 8);
                                        }
                                    }
                                    _rt::cabi_dealloc(base82, len82 * 8, 4);
                                }
                            }
                            _rt::cabi_dealloc(base85, len85 * 8, 4);
                        }
                        _ => {
                            let l86 = *arg0.add(4).cast::<*mut u8>();
                            let l87 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l86, l87, 1);
                        }
                    }
                }
                pub trait Guest {
                    fn check() -> _rt::String;
                    fn mysql_execute(
                        statement: _rt::String,
                        params: _rt::Vec<_rt::String>,
                    ) -> Result<u64, _rt::String>;
                    fn mysql_query(
                        statement: _rt::String,
                        params: _rt::Vec<_rt::String>,
                    ) -> Result<MysqlQueryResult, _rt::String>;
                    fn postgres_execute(
                        statement: _rt::String,
                        params: _rt::Vec<_rt::String>,
                    ) -> Result<u64, _rt::String>;
                    fn postgres_query(
                        statement: _rt::String,
                        params: _rt::Vec<_rt::String>,
                    ) -> Result<PostgresQueryResult, _rt::String>;
                }
                #[doc(hidden)]

                macro_rules! __export_golem_it_api_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "golem:it/api#check"]
    unsafe extern "C" fn export_check() -> *mut u8 {
      $($path_to_types)*::_export_check_cabi::<$ty>()
    }
    #[export_name = "cabi_post_golem:it/api#check"]
    unsafe extern "C" fn _post_return_check(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_check::<$ty>(arg0)
    }
    #[export_name = "golem:it/api#mysql-execute"]
    unsafe extern "C" fn export_mysql_execute(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,) -> *mut u8 {
      $($path_to_types)*::_export_mysql_execute_cabi::<$ty>(arg0, arg1, arg2, arg3)
    }
    #[export_name = "cabi_post_golem:it/api#mysql-execute"]
    unsafe extern "C" fn _post_return_mysql_execute(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_mysql_execute::<$ty>(arg0)
    }
    #[export_name = "golem:it/api#mysql-query"]
    unsafe extern "C" fn export_mysql_query(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,) -> *mut u8 {
      $($path_to_types)*::_export_mysql_query_cabi::<$ty>(arg0, arg1, arg2, arg3)
    }
    #[export_name = "cabi_post_golem:it/api#mysql-query"]
    unsafe extern "C" fn _post_return_mysql_query(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_mysql_query::<$ty>(arg0)
    }
    #[export_name = "golem:it/api#postgres-execute"]
    unsafe extern "C" fn export_postgres_execute(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,) -> *mut u8 {
      $($path_to_types)*::_export_postgres_execute_cabi::<$ty>(arg0, arg1, arg2, arg3)
    }
    #[export_name = "cabi_post_golem:it/api#postgres-execute"]
    unsafe extern "C" fn _post_return_postgres_execute(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_postgres_execute::<$ty>(arg0)
    }
    #[export_name = "golem:it/api#postgres-query"]
    unsafe extern "C" fn export_postgres_query(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,) -> *mut u8 {
      $($path_to_types)*::_export_postgres_query_cabi::<$ty>(arg0, arg1, arg2, arg3)
    }
    #[export_name = "cabi_post_golem:it/api#postgres-query"]
    unsafe extern "C" fn _post_return_postgres_query(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_postgres_query::<$ty>(arg0)
    }
  };);
}
                #[doc(hidden)]
                pub(crate) use __export_golem_it_api_cabi;
                #[repr(align(8))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 20]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 20]);
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }

    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }

    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }

    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }

    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }

    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }

    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }

    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }

    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }

    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }

    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub use alloc_crate::alloc;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_rdbms_service_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::golem::it::api::__export_golem_it_api_cabi!($ty with_types_in $($path_to_types_root)*::exports::golem::it::api);
  )
}
#[doc(inline)]
pub(crate) use __export_rdbms_service_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:rdbms-service:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 4915] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xaf%\x01A\x02\x01A\x0a\
\x01Bo\x01y\x04\0\x0anode-index\x03\0\0\x01q\x05\x12connection-failure\x01s\0\x17\
query-parameter-failure\x01s\0\x17query-execution-failure\x01s\0\x16query-respon\
se-failure\x01s\0\x05other\x01s\0\x04\0\x05error\x03\0\x02\x01r\x02\x09high-bits\
w\x08low-bitsw\x04\0\x04uuid\x03\0\x04\x01o\x04}}}}\x01o\x08{{{{{{{{\x01q\x02\x04\
ipv4\x01\x06\0\x04ipv6\x01\x07\0\x04\0\x0aip-address\x03\0\x08\x01o\x06}}}}}}\x01\
r\x01\x06octets\x0a\x04\0\x0bmac-address\x03\0\x0b\x01r\x03\x04yearz\x05month}\x03\
day}\x04\0\x04date\x03\0\x0d\x01r\x04\x04hour}\x06minute}\x06second}\x0ananoseco\
ndy\x04\0\x04time\x03\0\x0f\x01r\x02\x04date\x0e\x04time\x10\x04\0\x09timestamp\x03\
\0\x11\x01r\x02\x09timestamp\x12\x06offsetz\x04\0\x0btimestamptz\x03\0\x13\x01r\x02\
\x04time\x10\x06offsetz\x04\0\x06timetz\x03\0\x15\x01r\x03\x06monthsz\x04daysz\x0c\
microsecondsx\x04\0\x08interval\x03\0\x17\x01q\x03\x08included\x01z\0\x08exclude\
d\x01z\0\x09unbounded\0\0\x04\0\x09int4bound\x03\0\x19\x01q\x03\x08included\x01x\
\0\x08excluded\x01x\0\x09unbounded\0\0\x04\0\x09int8bound\x03\0\x1b\x01q\x03\x08\
included\x01s\0\x08excluded\x01s\0\x09unbounded\0\0\x04\0\x08numbound\x03\0\x1d\x01\
q\x03\x08included\x01\x12\0\x08excluded\x01\x12\0\x09unbounded\0\0\x04\0\x07tsbo\
und\x03\0\x1f\x01q\x03\x08included\x01\x14\0\x08excluded\x01\x14\0\x09unbounded\0\
\0\x04\0\x09tstzbound\x03\0!\x01q\x03\x08included\x01\x0e\0\x08excluded\x01\x0e\0\
\x09unbounded\0\0\x04\0\x09datebound\x03\0#\x01r\x02\x05start\x1a\x03end\x1a\x04\
\0\x09int4range\x03\0%\x01r\x02\x05start\x1c\x03end\x1c\x04\0\x09int8range\x03\0\
'\x01r\x02\x05start\x1e\x03end\x1e\x04\0\x08numrange\x03\0)\x01r\x02\x05start\x20\
\x03end\x20\x04\0\x07tsrange\x03\0+\x01r\x02\x05start\"\x03end\"\x04\0\x09tstzra\
nge\x03\0-\x01r\x02\x05start$\x03end$\x04\0\x09daterange\x03\0/\x01r\x01\x04name\
s\x04\0\x10enumeration-type\x03\01\x01r\x02\x04names\x05values\x04\0\x0benumerat\
ion\x03\03\x01o\x02s\x01\x01p5\x01r\x02\x04names\x0aattributes6\x04\0\x0ecomposi\
te-type\x03\07\x01p\x01\x01r\x02\x04names\x06values9\x04\0\x09composite\x03\0:\x01\
r\x02\x04names\x09base-type\x01\x04\0\x0bdomain-type\x03\0<\x01r\x02\x04names\x05\
value\x01\x04\0\x06domain\x03\0>\x01r\x02\x04names\x09base-type\x01\x04\0\x0aran\
ge-type\x03\0@\x01q\x03\x08included\x01\x01\0\x08excluded\x01\x01\0\x09unbounded\
\0\0\x04\0\x0bvalue-bound\x03\0B\x01r\x02\x05start\xc3\0\x03end\xc3\0\x04\0\x0cv\
alues-range\x03\0D\x01r\x02\x04names\x05value\xc5\0\x04\0\x05range\x03\0F\x01q)\x09\
character\0\0\x04int2\0\0\x04int4\0\0\x04int8\0\0\x06float4\0\0\x06float8\0\0\x07\
numeric\0\0\x07boolean\0\0\x04text\0\0\x07varchar\0\0\x06bpchar\0\0\x09timestamp\
\0\0\x0btimestamptz\0\0\x04date\0\0\x04time\0\0\x06timetz\0\0\x08interval\0\0\x05\
bytea\0\0\x04uuid\0\0\x03xml\0\0\x04json\0\0\x05jsonb\0\0\x08jsonpath\0\0\x04ine\
t\0\0\x04cidr\0\0\x07macaddr\0\0\x03bit\0\0\x06varbit\0\0\x09int4range\0\0\x09in\
t8range\0\0\x08numrange\0\0\x07tsrange\0\0\x09tstzrange\0\0\x09daterange\0\0\x05\
money\0\0\x03oid\0\0\x0benumeration\x012\0\x09composite\x018\0\x06domain\x01=\0\x05\
range\x01\xc1\0\0\x05array\x01\x01\0\x04\0\x13db-column-type-node\x03\0H\x01p\xc9\
\0\x01r\x01\x05nodes\xca\0\x04\0\x0edb-column-type\x03\0K\x01p}\x01p\x7f\x01q*\x09\
character\x01~\0\x04int2\x01|\0\x04int4\x01z\0\x04int8\x01x\0\x06float4\x01v\0\x06\
float8\x01u\0\x07numeric\x01s\0\x07boolean\x01\x7f\0\x04text\x01s\0\x07varchar\x01\
s\0\x06bpchar\x01s\0\x09timestamp\x01\x12\0\x0btimestamptz\x01\x14\0\x04date\x01\
\x0e\0\x04time\x01\x10\0\x06timetz\x01\x16\0\x08interval\x01\x18\0\x05bytea\x01\xcd\
\0\0\x04json\x01s\0\x05jsonb\x01s\0\x08jsonpath\x01s\0\x03xml\x01s\0\x04uuid\x01\
\x05\0\x04inet\x01\x09\0\x04cidr\x01\x09\0\x07macaddr\x01\x0c\0\x03bit\x01\xce\0\
\0\x06varbit\x01\xce\0\0\x09int4range\x01&\0\x09int8range\x01(\0\x08numrange\x01\
*\0\x07tsrange\x01,\0\x09tstzrange\x01.\0\x09daterange\x010\0\x05money\x01x\0\x03\
oid\x01y\0\x0benumeration\x014\0\x09composite\x01;\0\x06domain\x01?\0\x05range\x01\
\xc7\0\0\x05array\x019\0\x04null\0\0\x04\0\x0ddb-value-node\x03\0O\x01p\xd0\0\x01\
r\x01\x05nodes\xd1\0\x04\0\x08db-value\x03\0R\x01r\x04\x07ordinalw\x04names\x07d\
b-type\xcc\0\x0cdb-type-names\x04\0\x09db-column\x03\0T\x01p\xd3\0\x01r\x01\x06v\
alues\xd6\0\x04\0\x06db-row\x03\0W\x04\0\x0ddb-result-set\x03\x01\x04\0\x0ddb-co\
nnection\x03\x01\x01hY\x01p\xd5\0\x01@\x01\x04self\xdb\0\0\xdc\0\x04\0![method]d\
b-result-set.get-columns\x01]\x01p\xd8\0\x01k\xde\0\x01@\x01\x04self\xdb\0\0\xdf\
\0\x04\0\x1e[method]db-result-set.get-next\x01`\x01iZ\x01j\x01\xe1\0\x01\x03\x01\
@\x01\x07addresss\0\xe2\0\x04\0\x1a[static]db-connection.open\x01c\x01hZ\x01iY\x01\
j\x01\xe5\0\x01\x03\x01@\x03\x04self\xe4\0\x09statements\x06params\xd6\0\0\xe6\0\
\x04\0\x1b[method]db-connection.query\x01g\x01j\x01w\x01\x03\x01@\x03\x04self\xe4\
\0\x09statements\x06params\xd6\0\0\xe8\0\x04\0\x1d[method]db-connection.execute\x01\
i\x03\x01\x19wasi:rdbms/postgres@0.0.1\x05\0\x01B)\x01q\x05\x12connection-failur\
e\x01s\0\x17query-parameter-failure\x01s\0\x17query-execution-failure\x01s\0\x16\
query-response-failure\x01s\0\x05other\x01s\0\x04\0\x05error\x03\0\0\x01r\x03\x04\
yearz\x05month}\x03day}\x04\0\x04date\x03\0\x02\x01r\x04\x04hour}\x06minute}\x06\
second}\x0ananosecondy\x04\0\x04time\x03\0\x04\x01r\x02\x04date\x03\x04time\x05\x04\
\0\x09timestamp\x03\0\x06\x01q#\x07boolean\0\0\x07tinyint\0\0\x08smallint\0\0\x09\
mediumint\0\0\x03int\0\0\x06bigint\0\0\x10tinyint-unsigned\0\0\x11smallint-unsig\
ned\0\0\x12mediumint-unsigned\0\0\x0cint-unsigned\0\0\x0fbigint-unsigned\0\0\x05\
float\0\0\x06double\0\0\x07decimal\0\0\x04date\0\0\x08datetime\0\0\x09timestamp\0\
\0\x04time\0\0\x04year\0\0\x07fixchar\0\0\x07varchar\0\0\x08tinytext\0\0\x04text\
\0\0\x0amediumtext\0\0\x08longtext\0\0\x06binary\0\0\x09varbinary\0\0\x08tinyblo\
b\0\0\x04blob\0\0\x0amediumblob\0\0\x08longblob\0\0\x0benumeration\0\0\x03set\0\0\
\x03bit\0\0\x04json\0\0\x04\0\x0edb-column-type\x03\0\x08\x01r\x04\x07ordinalw\x04\
names\x07db-type\x09\x0cdb-type-names\x04\0\x09db-column\x03\0\x0a\x01p}\x01p\x7f\
\x01q$\x07boolean\x01\x7f\0\x07tinyint\x01~\0\x08smallint\x01|\0\x09mediumint\x01\
z\0\x03int\x01z\0\x06bigint\x01x\0\x10tinyint-unsigned\x01}\0\x11smallint-unsign\
ed\x01{\0\x12mediumint-unsigned\x01y\0\x0cint-unsigned\x01y\0\x0fbigint-unsigned\
\x01w\0\x05float\x01v\0\x06double\x01u\0\x07decimal\x01s\0\x04date\x01\x03\0\x08\
datetime\x01\x07\0\x09timestamp\x01\x07\0\x04time\x01\x05\0\x04year\x01{\0\x07fi\
xchar\x01s\0\x07varchar\x01s\0\x08tinytext\x01s\0\x04text\x01s\0\x0amediumtext\x01\
s\0\x08longtext\x01s\0\x06binary\x01\x0c\0\x09varbinary\x01\x0c\0\x08tinyblob\x01\
\x0c\0\x04blob\x01\x0c\0\x0amediumblob\x01\x0c\0\x08longblob\x01\x0c\0\x0benumer\
ation\x01s\0\x03set\x01s\0\x03bit\x01\x0d\0\x04json\x01s\0\x04null\0\0\x04\0\x08\
db-value\x03\0\x0e\x01p\x0f\x01r\x01\x06values\x10\x04\0\x06db-row\x03\0\x11\x04\
\0\x0ddb-result-set\x03\x01\x04\0\x0ddb-connection\x03\x01\x01h\x13\x01p\x0b\x01\
@\x01\x04self\x15\0\x16\x04\0![method]db-result-set.get-columns\x01\x17\x01p\x12\
\x01k\x18\x01@\x01\x04self\x15\0\x19\x04\0\x1e[method]db-result-set.get-next\x01\
\x1a\x01i\x14\x01j\x01\x1b\x01\x01\x01@\x01\x07addresss\0\x1c\x04\0\x1a[static]d\
b-connection.open\x01\x1d\x01h\x14\x01i\x13\x01j\x01\x1f\x01\x01\x01@\x03\x04sel\
f\x1e\x09statements\x06params\x10\0\x20\x04\0\x1b[method]db-connection.query\x01\
!\x01j\x01w\x01\x01\x01@\x03\x04self\x1e\x09statements\x06params\x10\0\"\x04\0\x1d\
[method]db-connection.execute\x01#\x03\x01\x16wasi:rdbms/mysql@0.0.1\x05\x01\x02\
\x03\0\0\x06db-row\x02\x03\0\0\x09db-column\x02\x03\0\x01\x06db-row\x02\x03\0\x01\
\x09db-column\x01B\x1d\x02\x03\x02\x01\x02\x04\0\x0fpostgres-db-row\x03\0\0\x02\x03\
\x02\x01\x03\x04\0\x12postgres-db-column\x03\0\x02\x02\x03\x02\x01\x04\x04\0\x0c\
mysql-db-row\x03\0\x04\x02\x03\x02\x01\x05\x04\0\x0fmysql-db-column\x03\0\x06\x01\
p\x03\x01p\x01\x01r\x02\x07columns\x08\x04rows\x09\x04\0\x15postgres-query-resul\
t\x03\0\x0a\x01p\x07\x01p\x05\x01r\x02\x07columns\x0c\x04rows\x0d\x04\0\x12mysql\
-query-result\x03\0\x0e\x01@\0\0s\x04\0\x05check\x01\x10\x01ps\x01j\x01w\x01s\x01\
@\x02\x09statements\x06params\x11\0\x12\x04\0\x0dmysql-execute\x01\x13\x01j\x01\x0f\
\x01s\x01@\x02\x09statements\x06params\x11\0\x14\x04\0\x0bmysql-query\x01\x15\x04\
\0\x10postgres-execute\x01\x13\x01j\x01\x0b\x01s\x01@\x02\x09statements\x06param\
s\x11\0\x16\x04\0\x0epostgres-query\x01\x17\x04\x01\x0cgolem:it/api\x05\x06\x04\x01\
\x16golem:it/rdbms-service\x04\0\x0b\x13\x01\0\x0drdbms-service\x03\0\0\0G\x09pr\
oducers\x01\x0cprocessed-by\x02\x0dwit-component\x070.208.1\x10wit-bindgen-rust\x06\
0.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
